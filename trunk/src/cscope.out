cscope 15 $HOME/Projects/gmyqq/src -q 0000001796 0000251795
	@buddy.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 #ifde‡
__WIN32__


18 
	~<wösock.h
>

19 
	~<wööë.h
>

21 
	~<sys/sockë.h
>

22 
	~<¨∑/öë.h
>

24 
	~"qq˛õ¡.h
"

25 
	~"mem‹y.h
"

26 
	~"debug.h
"

27 
	~"¥Ÿocﬁ.h
"

28 
	~"li°.h
"

29 
	~"buddy.h
"

30 
	~"∑ckëmgr.h
"

34 
	$buddy_comp
(c⁄° *
p
, c⁄° *
q
)

36  ( (*(
qqbuddy
 **)
p
)->
numbî
 - (*(qqbuddy **)
q
)->number );

37 
	}
}

39 
	$£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

41  ( ((
qqbuddy
*)
p
)->
numbî
 =()
v
 );

42 
	}
}

44 
qqbuddy
* 
	$buddy_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 )

46 if–!
numbî
 )

47  
NULL
;

48 
qqbuddy
* 
b
;

49 
b
 = (
qqbuddy
 *)
	`li°_£¨ch
–&
qq
->
buddy_li°
, (*)
numbî
, 
£¨chî
 );

51 if–
b
==
NULL
 && 
¸óã
 ){

52 
	`NEW
–
b
, –
qqbuddy
 ) ,qqbuddy);

53 if–!
b
 )  b;

54 
b
->
numbî
 =Çumber;

55 
	`•rötf
–
b
->
nick«me
, "%u", 
numbî
 );

56 if–
	`li°_≠≥nd
–&
qq
->
buddy_li°
, (*)
b
 )<0 ){

57 
	`DEL
–
b
 );

60  
b
;

61 
	}
}

63 
	$buddy_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

65 
qqbuddy
* 
b
;

66 
b
 =(
qqbuddy
 *Ë
	`li°_£¨ch
–&
qq
->
buddy_li°
, (*)
numbî
, 
£¨chî
 );

67 if–
b
 ){

68 
	`li°_ªmove
–&
qq
->
buddy_li°
, 
b
 );

70 
	}
}

72 
	$buddy_s‹t_li°
–
qq˛õ¡
* 
qq
 )

74 
	`li°_s‹t
–&
qq
->
buddy_li°
, 
buddy_comp
 );

75 
	}
}

77 
	$buddyoff_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

79 ((
qqbuddy
*)
p
)->
°©us
 = 
QQ_OFFLINE
;

81 
	}
}

82 
	$buddy_£t_Æl_off
–
qq˛õ¡
* 
qq
 )

84 
	`li°_£¨ch
–&
qq
->
buddy_li°
, 
NULL
, 
buddyoff_£¨chî
 );

85 
	}
}

87 
	$buddy_upd©e_li°
–
qq˛õ¡
* 
qq
 )

89 
	`¥Ÿ_buddy_upd©e_li°
–
qq
, 0 );

90 
	`¥Ÿ_buddy_upd©e_⁄löe
–
qq
, 0 );

91 
	}
}

93 
	$buddy_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqbuddy
* 
b
 )

95 
	`¥Ÿ_u£r_gë_öfo
–
qq
, 
b
->
numbî
 );

96 
	}
}

99 
	$buddy_£nd_mesßge
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg
 )

101 
	`¥Ÿ_im_£nd_msg
–
qq
, 
numbî
, 
msg
 );

103 
	}
}

105 * 
	$buddy_°©us_°rög
–
°
 )

107  
°
 ){

108 
QQ_ONLINE
:

110 
QQ_OFFLINE
:

112 
QQ_AWAY
:

114 
QQ_HIDDEN
:

116 
QQ_BUSY
:

118 
QQ_KILLME
:

120 
QQ_QUIET
:

125 
	}
}

129 
	$buddy_put_evít
–
qq˛õ¡
* 
qq
 )

131 *
ãmp
;

132 
i
;

133 
qqbuddy
* 
b
;

134 
	`NEW
–
ãmp
, 
	`KB
(128) ,);

135 if–!
ãmp
 ) ;

136 
	`°r˝y
–
ãmp
, "buddylist^$" );

137 
	`±hªad_muãx_lock
–&
qq
->
buddy_li°
.
muãx
 );

138 
ö_addr
 
addr
;

139  
i
=0; i<
qq
->
buddy_li°
.
cou¡
; i++ ){

140 
b
 = (
qqbuddy
*)
qq
->
buddy_li°
.
ôems
[
i
];

141 
addr
.
s_addr
 = 
	`ht⁄l
–
b
->
ù
 );

142 
	`•rötf
–
ãmp
, "%s%u\t%s\t%s\t%s\t%d\t%s\t%s\t%d^@",Åemp, 
b
->
numbî
, 
	`buddy_°©us_°rög
(b->
°©us
), b->
nick«me
,

143 
b
->
signôuª
, b->
£x
, 
	`öë_¡ﬂ
–
addr
 ), b->
Æüs
, b->
gid
 );

145 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

146 
	`qq˛õ¡_put_evít
–
qq
, 
ãmp
 );

147 
	`DEL
–
ãmp
 );

148 
	}
}

	@buddy.h

1 #i‚de‡
_BUDDY_H


2 
	#_BUDDY_H


	)

4 
	~"qqdef.h
"

6 
	sqqbuddy
{

7 
uöt
 
	mnumbî
;

8 
	mnick«me
[
NICKNAME_LEN
];

9 
uöt
 
	mù
;

10 
ush‹t
 
	mp‹t
;

11 
ush‹t
 
	mÁ˚
;

12 
uch¨
 
	mage
;

13 
uch¨
 
	m£x
;

14 
uch¨
 
	mgid
;

15 
uch¨
 
	mqqshow
;

16 
uch¨
 
	mÊag
;

17 
uch¨
 
	m£ssi⁄_key
[16];

18 
uch¨
 
	m°©us
;

19 
ush‹t
 
	mvîsi⁄
;

20 
uch¨
 
	mvîify_Êag
;

22 
uöt
 
	msign_time
;

23 
uch¨
 
	maccou¡_Êag
;

24 #i‚de‡
NO_BUDDY_DETAIL_INFO


25 
	msignôuª
[
SIGNITURE_LEN
];

26 
	maccou¡
[
ACCOUNT_LEN
];

27 
	mÆüs
[
ALIAS_LEN
];

28 
	möfo_°rög
[
MAX_USER_INFO
][
USER_INFO_LEN
];

30 
	msignôuª
[1];

31 
	maccou¡
[1];

32 
	mÆüs
[1];

33 
	möfo_°rög
[1][1];

36 }
	tqqbuddy
;

38 
	gqq˛õ¡
;

39 
qqbuddy
* 
buddy_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 );

40 
buddy_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

41 
buddy_upd©e_li°
–
qq˛õ¡
* 
qq
 );

42 
buddy_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqbuddy
* 
b
 );

43 
buddy_s‹t_li°
–
qq˛õ¡
* 
qq
 );

44 
buddy_£nd_mesßge
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg
 );

45 
buddy_£t_Æl_off
–
qq˛õ¡
* 
qq
 );

46 
buddy_put_evít
–
qq˛õ¡
* 
qq
 );

47 * 
buddy_°©us_°rög
–
°
 );

	@checkAndSetConfig.cc

1 
	~"myqq.h
"

2 
	~"töyxml/töyxml.h
"

3 
	~"töyxml/töy°r.h
"

5 
	gMyqq
::
	$checkAndSëC⁄fig
()

7 
TiXmlDocumít
 
	`c⁄fig_dom
(
c⁄fig_fûe
.
	`c_°r
());

8 if(
my°¨c⁄f
.
	`LﬂdFûe
())

10 
cout
<<"ÊâæÂà∞ÈÖçÁΩÆÊñá‰ª∂„ÄÇ„ÄÇ„ÄÇ\n";

14 
	`öô_fûe
();

17 
TiXmlEÀmít
* 
roŸ
 = 
c⁄fig_dom
.
	`RoŸEÀmít
();

18 if(
roŸ
 =
NULL
)

20 
TiXmlEÀmít
* 
U£rsEÀmít
 = 
my°¨roŸ
->
	`Fú°ChûdEÀmít
();

21 if(
U£rsEÀmít
==
NULL
)

23 
TiXmlEÀmít
* 
U£rEÀmít
 = 
U£rsEÀmít
->
	`Fú°ChûdEÀmít
();

24 if(
U£rEÀmít
==
NULL
)

26 
TiXmlEÀmít
 *
accou¡
 = 
U£rEÀmít
->
	`Fú°ChûdEÀmít
();

27 
TiXmlEÀmít
 *
∑ssw‹d
 = 
u£∫ame
->
	`NextSiblögEÀmít
();

28 
this
->
accou¡
 =áccou¡->
	`GëText
();

29 
this
->
∑ssw‹d
 =Öassw‹d->
	`GëText
();

30 
	}
}

31 
	gMyqq
::
	$öô_fûe
()

34 
TiXmlDocumít
 *
myDocumít
 = 
√w
 
	`TiXmlDocumít
();

35 
TiXmlDe˛¨©i⁄
 *
tôÀ
 = 
√w
 
	`TiXmlDe˛¨©i⁄
("1.0","utf-8","yes");

36 
myDocumít
->
	`LökEndChûd
(
tôÀ
);

38 
TiXmlCommít
 *
commít
 = 
√w
 
	`TiXmlCommít
("updateÅhe information below");

39 
myDocumít
->
	`LökEndChûd
(
commít
);

42 
TiXmlEÀmít
 *
RoŸEÀmít
 = 
√w
 
	`TiXmlEÀmít
("my°¨"); 
myDocumít
->
	`LökEndChûd
(RootElement);

44 
TiXmlEÀmít
 *
U£rsEÀmít
 = 
√w
 
	`TiXmlEÀmít
("users");

45 
RoŸEÀmít
->
	`LökEndChûd
(
U£rsEÀmít
);

47 
TiXmlEÀmít
 *
u£rEÀmít
 = 
√w
 
	`TiXmlEÀmít
("user");

48 
U£rsEÀmít
->
	`LökEndChûd
(
u£rEÀmít
);

50 
u£rEÀmít
->
	`SëAâribuã
("active", "true");

52 
TiXmlEÀmít
 *
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("nickname");

53 
u£rEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

54 
TiXmlText
 *
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("yourÇickÇame");

55 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

57 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("name");

58 
u£rEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

59 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("your userÇame");

60 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

62 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("password");

63 
u£rEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

64 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("yourÖassword");

65 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

67 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("fakeAddress");

68 
u£rEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

69 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("your IPáddress");

70 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

72 
TiXmlEÀmít
 *
c⁄figEÀmít
 = 
√w
 
	`TiXmlEÀmít
("config");

73 
RoŸEÀmít
->
	`LökEndChûd
(
c⁄figEÀmít
);

75 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("autologin");

76 
c⁄figEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

77 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("false");

78 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

80 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("authenticationMode");

81 
c⁄figEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

82 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("0");

83 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

85 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("nic");

86 
c⁄figEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

87 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("eth0");

88 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

90 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("echoInterval");

91 
c⁄figEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

92 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("4");

93 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

95 
ãmpEÀmít
 = 
√w
 
	`TiXmlEÀmít
("intelligentReconnect");

96 
c⁄figEÀmít
->
	`LökEndChûd
(
ãmpEÀmít
);

97 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("0");

98 
ãmpEÀmít
->
	`LökEndChûd
(
ãmpC⁄ã¡
);

100 
myDocumít
->
	`SaveFûe
(
c⁄fig_fûe
.
	`c_°r
());

101 
cout
<<"ÂàùÂßãÂåñÈÖçÁΩÆÊñá‰ª∂Âà∞"<<
c⁄fig_fûe
.
	`c_°r
()<<
ídl
;

102 
	}
}

103 
	gMyqq
::
	$ßve_fûe
()

105 
TiXmlDocumít
 
	`my°¨c⁄f
(
c⁄fig_fûe
.
	`c_°r
());

106 if(
my°¨c⁄f
.
	`LﬂdFûe
())

109 
TiXmlEÀmít
* 
my°¨roŸ
 = 
my°¨c⁄f
.
	`RoŸEÀmít
();

110 if(
my°¨roŸ
 =
NULL
)

112 
TiXmlEÀmít
* 
U£rsEÀmít
 = 
my°¨roŸ
->
	`Fú°ChûdEÀmít
();

113 if(
U£rsEÀmít
==
NULL
)

115 
TiXmlEÀmít
* 
U£rEÀmít
 = 
U£rsEÀmít
->
	`Fú°ChûdEÀmít
();

116 if(
U£rEÀmít
==
NULL
)

118 
TiXmlEÀmít
 *
nick«me
 = 
U£rEÀmít
->
	`Fú°ChûdEÀmít
();

119 
TiXmlEÀmít
 *
u£∫ame
 = 
nick«me
->
	`NextSiblögEÀmít
();

120 
TiXmlEÀmít
 *
∑ssw‹d
 = 
u£∫ame
->
	`NextSiblögEÀmít
();

121 
TiXmlEÀmít
 *
ÁkeAddªss
 = 
∑ssw‹d
->
	`NextSiblögEÀmít
();

123 
TiXmlText
 *
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("QQË¥¶Âè∑");

124 
nick«me
->
	`Rïœ˚Chûd
“ick«me->
	`Fú°Chûd
(), *
ãmpC⁄ã¡
);

126 
ãmpC⁄ã¡
 = 
√w
 
	`TiXmlText
("ÂØÜÁ†Å");

127 
u£∫ame
->
	`Rïœ˚Chûd
(u£∫ame->
	`Fú°Chûd
(), *
ãmpC⁄ã¡
);

129 
TiXmlEÀmít
 *
c⁄fig
 = 
U£rsEÀmít
->
	`NextSiblögEÀmít
();

130 
TiXmlEÀmít
 *
autﬁogöEÀmít
 = 
c⁄fig
->
	`Fú°ChûdEÀmít
();

132 
cout
<<"ßvêtÿ"<<
c⁄fig_fûe
.
	`c_°r
()<<
ídl
;

133 
my°¨c⁄f
.
	`SaveFûe
();

136 
	}
}

	@config.c

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

19 
	~"debug.h
"

20 
	~"qqdef.h
"

21 
	~"mem‹y.h
"

22 
	~"c⁄fig.h
"

24 #i‚de‡
__WIN32__


25 
	#°ricmp
 
°rˇ£cmp


	)

28 
c⁄fig_ôem
 
	tôem
;

30 
	ePARSING
{

31 
	mNAME
,

32 
	mVALUE


35 
	$add
–
c⁄fig
* 
c
, * 
«me
, * 
vÆue
 )

37 if–
c
->
ôem_cou¡
 >= 1024 ){

38 
	`DBG
("failedÅoádd config item:Åoo many.");

41 
i
 = 
c
->
ôem_cou¡
 ++;

42 
c
->
ôems
[
i
] = (
c⁄fig_ôem
*)
	`mÆloc
( (config_item) );

43 
	`°∫˝y
–
c
->
ôems
[
i
]->
«me
,Çame, 
CONFIG_NAME_LEN
 );

44 
	`°∫˝y
–
c
->
ôems
[
i
]->
vÆue
, vÆue, 
CONFIG_VALUE_LEN
 );

46 
	}
}

48 
	$∑r£
–
c⁄fig
*
c⁄f
, * 
buf
, 
Àn
 )

50 
PARSING
 
°©e
;

51 
°©e
 = 
NAME
;

52 
i
, 
j
;

53 
c
;

54 
«me
[
CONFIG_NAME_LEN
], 
vÆue
[
CONFIG_VALUE_LEN
];

55 
i
 = 
j
 = 0;

56 
buf
[
Àn
] = '\0';

57  
i
 <
Àn
 ){

58 
c
 = 
buf
[
i
];

59  
°©e
 ){

60 
NAME
:

61 if–
c
 == '\r' ){

63 }if–
c
 == '\n' ){

64 
j
 = 0;

65 }if–
c
 == '=' ){

66 
°©e
 = 
VALUE
;

67  
j
>0 && 
«me
[j-1] == ' ' )

68 
j
--;

69 
«me
[
j
] = '\0';

70 
j
 = 0;

71 }if–
c
 == '\\' ){

72 
i
 ++;

74 if–
j
==0 && 
c
 == ' ' )

76 
«me
[
j
++] = 
c
;

79 
VALUE
:

80 if–
c
 == '\r' ){

82 }if–
c
 == '\n' || c == '\0' ){

83 
°©e
 = 
NAME
;

84  
j
>0 && 
vÆue
[j-1] == ' ' )

85 
j
--;

86 
vÆue
[
j
] = '\0';

87 if–
«me
[0] != '#' ){

88 
	`add
–
c⁄f
, 
«me
, 
vÆue
 );

90 
j
 = 0;

91 }if–
c
 == '\\' ){

92 
i
 ++;

94 if–
j
==0 && 
c
 == ' ' )

96 
vÆue
[
j
++] = 
c
;

102 
i
 ++;

104 
	}
}

106 
	gdeÁu…_c⁄figs
[]="### Default Configuration ###\n"

124 
	$c⁄fig_›í
–
c⁄fig
* 
c
, * 
fûíame
 )

126 
FILE
* 
Â
;

127 
Â
 = 
	`f›í
 ( 
fûíame
, "r" );

128 if–
Â
 =
NULL
 ){

129 
	`DBG
("ÁûedÅÿ›í fûê%s", 
fûíame
 );

130 
Â
 = 
	`f›í
–
fûíame
, "w" );

131 if–
Â
 =
NULL
 )

133 
	`Âuts
–
deÁu…_c⁄figs
, 
Â
 );

134 
	`f˛o£
–
Â
 );

135 
Â
 = 
	`f›í
–
fûíame
, "r" );

136 if–
Â
 =
NULL
 )

139 * 
buf
;

140 
buf
 = (*Ë
	`mÆloc
–
	`KB
(32) );

141 
Àn
 = 
	`‰ód
–
buf
, 1, 
	`KB
(32), 
Â
 );

142 if–
Àn
 > 0 ){

143 
	`mem£t
–
c
, 0, (
c⁄fig
) );

144 
	`∑r£
–
c
, 
buf
, 
Àn
 );

146 
	`DBG
("ÁûedÅÿªad fûê%s", 
fûíame
 );

147 
	`f˛o£
–
Â
 );

150 
	`f˛o£
–
Â
 );

152 
	}
}

154 
	$c⁄fig_ªadöt
–
c⁄fig
*
c
, * 
«me
 )

156 
i
;

157  
i
=0; i<
c
->
ôem_cou¡
; i++ )

159 if–
	`°rcmp
–
c
->
ôems
[
i
]->
«me
,Çame ) == 0 )

161 if–
	`°ricmp
–
c
->
ôems
[
i
]->
vÆue
, "true" ) == 0 )

163 if–
	`°ricmp
–
c
->
ôems
[
i
]->
vÆue
, "false" ) == 0 )

165  
	`©ﬁ
–
c
->
ôems
[
i
]->
vÆue
 );

170 
	}
}

172 * 
	$c⁄fig_ªad°r
–
c⁄fig
*
c
, c⁄° * 
«me
 )

174 
i
;

175  
i
=0; i<
c
->
ôem_cou¡
; i++ )

177 if–
	`°rcmp
–
c
->
ôems
[
i
]->
«me
,Çame ) == 0 )

179  
c
->
ôems
[
i
]->
vÆue
;

183  
NULL
;

184 
	}
}

186 
	$c⁄fig_˛o£
–
c⁄fig
* 
c
 )

188 
i
;

189 if–!
c
 ) ;

190  
i
=0; i<
c
->
ôem_cou¡
; i++ )

191 
	`‰ì
–
c
->
ôems
[
i
] );

192 
c
->
ôem_cou¡
 = 0;

193 
	}
}

196 
c⁄fig
 *
	gg_c⁄f
;

197 
	$c⁄fig_öô
()

200 
c⁄fig
 
g_c⁄f_tmp
[(config)];

201 
	`mem£t
(
g_c⁄f_tmp
,0,(
c⁄fig
));

202 
g_c⁄f
 = 
g_c⁄f_tmp
;

203 if–!
g_c⁄f
 ) ;

204 if–
	`c⁄fig_›í
–
g_c⁄f
, "./qqconfig.txt" ) < 0 ){

205 
	`≥º‹
("can'tÇot open qqconfig.txt file.");

206 
	`exô
(-1);

208 * 
log_dú
 = 
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQLogDir" );

209 
uöt
 
log_ãrmöÆ
 = 
	`c⁄fig_ªadöt
–
g_c⁄f
, "QQTerminalLog" );

210 if–
log_ãrmöÆ
 ){

211 
	`debug_ãrm_⁄
();

213 
	`debug_ãrm_off
();

215 if–
log_dú
 =
NULL
 ){

216 
	`debug_fûe_off
();

218 
	`debug_£t_dú
–
log_dú
 );

219 
	`debug_fûe_⁄
();

221 
	}
}

223 
	$c⁄fig_íd
()

225 
	`c⁄fig_˛o£
–
g_c⁄f
 );

226 
	`DEL
–
g_c⁄f
 );

227 
	}
}

	@config.h

2 #i‚de‡
_CONFIG_H


3 
	#_CONFIG_H


	)

5 
	#CONFIG_NAME_LEN
 64

	)

6 
	#CONFIG_VALUE_LEN
 256

	)

9 
	sc⁄fig_ôem
{

10 
	m«me
[
CONFIG_NAME_LEN
];

11 
	mvÆue
[
CONFIG_VALUE_LEN
];

12 }
	tc⁄fig_ôem
;

14 
	scc⁄fig
{

15 
	môem_cou¡
;

16 
c⁄fig_ôem
 *
	môems
[1024];

17 }
	tc⁄fig
;

26 
c⁄fig_öô
();

27 
c⁄fig_íd
();

28 
c⁄fig
 *
g_c⁄f
;

	@crc32.c

15 
	~<°dio.h
>

16 
	~"qqdef.h
"

18 
uöt
 
	gCRC32
[256];

19 
	göô
 = 0;

21 
	$öô_èbÀ
()

23 
i
,
j
;

24 
uöt
 
¸c
;

25 
i
 = 0;i < 256;i++)

27 
¸c
 = 
i
;

28 
j
 = 0;j < 8;j++)

30 if(
¸c
 & 1){

31 
¸c
 = (crc >> 1) ^ 0xEDB88320;

33 
¸c
 = crc >> 1;

36 
CRC32
[
i
] = 
¸c
;

38 
	}
}

40 
uöt
 
	$¸c32
–
uch¨
 *
buf
, 
Àn
)

42 
uöt
 
ªt
 = 0xFFFFFFFF;

43 
i
;

44 if–!
öô
 ){

45 
	`öô_èbÀ
();

46 
öô
 = 1;

48 
i
 = 0; i < 
Àn
;i++)

50 
ªt
 = 
CRC32
[(‘ë & 0xFFË^ 
buf
[
i
])] ^ (ret >> 8);

52 
ªt
 = ~ret;

53  
ªt
;

54 
	}
}

	@crc32.h

1 #i‚de‡
_CRC32_H


2 
	#_CRC32_H


	)

4 
uöt
 
¸c32
–
uch¨
 *
buf
, 
Àn
);

	@debug.c

12 
	~<°dio.h
>

13 
	~<°d¨g.h
>

14 
	~<f˙é.h
>

15 
	~<°rög.h
>

16 #ifde‡
__WIN32__


17 
	~<io.h
>

19 
	~<time.h
>

20 
	~"debug.h
"

21 
	~"utû.h
"

22 
	~"qqdef.h
"

23 
	~"utf8.h
"

25 
	gdbg_ãrm
 = 0, 
	gdbg_fûe
 = 0, 
	glog_day
 = 0;

26 
FILE
* 
	gÂ_log
 = 
NULL
;

27 
	gdú
[128]={0,}, 
	gfûíame
[160];

28 
öô_fûe_∑th
();

30 
	$¥öt_îr‹
(* 
fûe
, * 
fun˘i⁄
, 
löe
, c⁄° *
fmt
, ...)

32 
va_li°
 
¨gs
;

33 
¥ötbuf
[512];

34 
i
;

35 if–!
dbg_ãrm
 && !
dbg_fûe
 )

37 
	`va_°¨t
(
¨gs
, 
fmt
);

38 
i
=
	`v•rötf
–
¥ötbuf
, 
fmt
, 
¨gs
 );

39 
¥ötbuf
[
i
] = 0;

40 
	`va_íd
(
¨gs
);

41 #ifde‡
__WIN32__


42 
	`utf8_to_gb
–
¥ötbuf
,Örötbuf, 
i
 );

44 if–
dbg_ãrm
 ){

45 
	`¥ötf
("%s(%d): %s\n", 
fun˘i⁄
, 
löe
, 
¥ötbuf
);

47 if–
dbg_fûe
 ){

48 
time_t
 
t
 = 
	`time
–
NULL
 );

49 
tm
* 
tm1
 = 
	`loˇ…ime
(&
t
);

50 if–!
tm1
 ) ;

51 if–
tm1
->
tm_mday
 !
log_day
 ){

52 
	`öô_fûe_∑th
();

54 
tmp
[16];

55 
	`°r·ime
–
tmp
, 15, "%X", 
tm1
 );

56 
	`Ârötf
–
Â_log
, "%†[%s]%s(%d): %s\n", 
tmp
, 
fûe
, 
fun˘i⁄
, 
löe
, 
¥ötbuf
);

57 
	`fÊush
–
Â_log
 );

59 
	}
}

61 * 
	$hex_°r
(*
buf
, 
Àn
, * 
out°r
 )

64 c⁄° *
£t
 = "0123456789abcdef";

65 *
tmp
;

66 *
íd
;

67 i‡(
Àn
 > 1024)

68 
Àn
 = 1024;

69 
íd
 = 
buf
 + 
Àn
;

70 
tmp
 = &
out°r
[0];

71 
buf
 < 
íd
)

73 *
tmp
++ = 
£t
[ (*
buf
) >> 4 ];

74 *
tmp
++ = 
£t
[ (*
buf
) & 0xF ];

75 *
tmp
++ = ' ';

76 
buf
 ++;

78 *
tmp
 = '\0';

79  
out°r
;

80 
	}
}

82 
	$hex_dump
–* 
buf
, 
Àn
 )

84 
°r
[
	`KB
(4)];

85 if–
dbg_ãrm
 )

86 
	`puts
–
	`hex_°r
–
buf
, 
Àn
, 
°r
 ) );

87 if–
dbg_fûe
 ){

88 
	`Âuts
–
	`hex_°r
–
buf
, 
Àn
, 
°r
 ), 
Â_log
 );

89 
	`Ârötf
–
Â_log
, "\n" );

90 
	`fÊush
–
Â_log
 );

93 
	}
}

95 
	$debug_ãrm_⁄
()

97 
dbg_ãrm
 = 1;

98 
	}
}

100 
	$debug_ãrm_off
()

102 
dbg_ãrm
 = 0;

103 
	}
}

105 
	$öô_fûe_∑th
()

107 
tmp
[64];

108 
time_t
 
t
 = 
	`time
–
NULL
 );

109 
tm
* 
tm1
 = 
	`loˇ…ime
(&
t
);

110 if–!
tm1
 ){

111 
	`≥º‹
("log.c init_file_path: ERROR GETTING SYSTEM TIME.");

113 
log_day
 = 
tm1
->
tm_mday
;

114 
	`°r·ime
–
tmp
, 64, "/%Y-%m-%d.txt", 
tm1
 );

115 if–
	`ac˚ss
–
dú
, 0 )!=0 ){

116 
	`mkdú_ªcursive
–
dú
 );

118 
	`°r˝y
–
fûíame
, 
dú
 );

119 
	`°rˇt
–
fûíame
, 
tmp
 );

120 if–
Â_log
 )

121 
	`f˛o£
–
Â_log
 );

122 
Â_log
 = 
	`f›í
–
fûíame
, "aw" );

124 
	}
}

126 
	$debug_fûe_⁄
()

128 if–
dbg_fûe
 )

130 
	`öô_fûe_∑th
();

131 
dbg_fûe
 = 1;

132 
	}
}

134 
	$debug_fûe_off
()

136 if–!
dbg_fûe
 )

138 
dbg_fûe
 = 0;

139 if–
Â_log
 )

140 
	`f˛o£
–
Â_log
 );

141 
	}
}

143 
	$debug_£t_dú
(* 
°r
)

145 
	`°r˝y
–
dú
, 
°r
 );

146 
	}
}

	@debug.h

1 #i‚de‡
_DEBUG_H


2 
	#_DEBUG_H


	)

4 
	~<°dio.h
>

5 
	~<î∫o.h
>

6 
	~<as£π.h
>

10 #i‚de‡
RELEASE


11 
	#DBG
(
¨gs
 ...) \

12 
	`¥öt_îr‹
–
__FILE__
, (*)
__func__
, 
__LINE__
, ##
¨gs
 )

	)

14 
	#DBG
(
¨gs
 ...)

	)

17 
	#MSG
 
¥ötf


	)

18 
¥öt_îr‹
(* 
fûe
, * 
fun˘i⁄
, 
löe
, c⁄° *
fmt
, ...);

19 
hex_dump
–* 
buf
, 
Àn
 );

20 
debug_ãrm_⁄
();

21 
debug_ãrm_off
();

22 
debug_fûe_⁄
();

23 
debug_fûe_off
();

24 
debug_£t_dú
(* 
°r
);

	@gMystar.cc

1 
	~"gMy°¨.h
"

2 
	~<±hªad.h
>

4 
My°¨
 *
	ggMy°¨
::
my°¨
;

5 
boﬁ
 
	ggMy°¨
::
Êag
;

6 
	gGlib
::
RefPå
<
Gtk
::
SètusIc⁄
> 
gMy°¨
::
°©us_ic⁄
;

7 
Wödow
 *
	ggMy°¨
::
MaöWödow
;

8 
CheckBuâ⁄
 *
	ggMy°¨
::
autﬁogö_checkbuâ⁄
;

9 
Buâ⁄
 *
	ggMy°¨
::
c⁄√˘_buâ⁄
;

10 
Labñ
 *
	ggMy°¨
::
°©us_œbñ
;

11 
	ggMy°¨
::
wödow_x
;

12 
	ggMy°¨
::
wödow_y
;

13 
	gsigc
::
c⁄√˘i⁄
 
gMy°¨
::
c
;

14 
	gNŸify
::
NŸifiˇti⁄
 *
gMy°¨
::
n
;

92 
	ggMy°¨
::
	$gMy°¨
()

94 
my°¨
 = 
√w
 
	`My°¨
();

95 
Êag
 = 
åue
;

98 
°©us_ic⁄
 = 
SètusIc⁄
::
	`¸óã_‰om_fûe
("/usr/share/gMystar/data/disconnect.png");

99 if(
°©us_ic⁄
)

101 
°©us_ic⁄
->
	`£t_toﬁtù
("Áî®gtkmmÂíågladeÂÅöÁöÑÈîêÊç∑ÂÆ¢Êà∑Á´Ø.");

102 
°©us_ic⁄
->
	`sig«l_a˘iv©e
().
	`c⁄√˘
(
sigc
::
	`mem_fun
(*
this
, &
gMy°¨
::
⁄_åay_˛icked
));

106 
cout
<<"createÅray iconÉrror!\n";

109 
ªfXml
 = 
Gnome
::
Gœde
::
Xml
::
	`¸óã
("/usr/share/gMystar/data/gMystar.glade","main_window");

110 if(!
ªfXml
)

111 
	`exô
(271);

113 
VBox
* 
maö_wödow
 = 
NULL
;

114 
maö_wödow
 = 
ªfXml
->
	`gë_widgë
("main_window", main_window);

116 
nick«me_íåy

NULL
;

117 
nick«me_íåy
 = 
ªfXml
->
	`gë_widgë
("nickname",Çickname_entry);

118 
nick«me_íåy
->
	`£t_ãxt
(
my°¨
->
u£r
.
	`gë_nick«me
());

120 
u£∫ame_íåy

NULL
;

121 
u£∫ame_íåy

ªfXml
->
	`gë_widgë
("username", username_entry);

122 
u£∫ame_íåy
->
	`£t_ãxt
(
my°¨
->
u£r
.
	`gë_u£∫ame
());

124 
∑ssw‹d_íåy

NULL
;

125 
∑ssw‹d_íåy

ªfXml
->
	`gë_widgë
("password",Öassword_entry);

126 
∑ssw‹d_íåy
->
	`£t_ãxt
(
my°¨
->
u£r
.
	`gë_∑ssw‹d
());

128 
ÁkeAddªss_íåy
 = 
NULL
;

129 
ÁkeAddªss_íåy
 = 
ªfXml
->
	`gë_widgë
("fakeAddress", fakeAddress_entry);

130 
ÁkeAddªss_íåy
->
	`£t_ãxt
(
my°¨
->
u£r
.
	`gë_ÁkeAddªss
());

132 
autﬁogö_checkbuâ⁄
 = 
NULL
;

133 
autﬁogö_checkbuâ⁄
 = 
ªfXml
->
	`gë_widgë
("autologin_checkbutton",autologin_checkbutton);

135 
c⁄√˘_buâ⁄
 = 
NULL
;

136 
c⁄√˘_buâ⁄
 = 
ªfXml
->
	`gë_widgë
("connect_button", connect_button);

137 if(
c⁄√˘_buâ⁄
)

139 
gMy°¨
::
c
 = 
c⁄√˘_buâ⁄
->
	`sig«l_˛icked
().
	`c⁄√˘
(
sigc
::
	`mem_fun
(*
this
, &gMy°¨::
⁄_c⁄√˘_buâ⁄_˛icked
));

143 
disc⁄√˘_buâ⁄
 = 
NULL
;

144 
disc⁄√˘_buâ⁄
 = 
ªfXml
->
	`gë_widgë
("disconnect_button", disconnect_button);

145 if(
disc⁄√˘_buâ⁄
)

147 
gMy°¨
::
c
 = 
disc⁄√˘_buâ⁄
->
	`sig«l_˛icked
().
	`c⁄√˘
(
sigc
::
	`mem_fun
(*
this
, &gMy°¨::
⁄_disc⁄√˘_buâ⁄_˛icked
));

150 
quô_buâ⁄
 = 
NULL
;

151 
quô_buâ⁄
 = 
ªfXml
->
	`gë_widgë
("quit_button", quit_button);

152 if(
quô_buâ⁄
)

154 
quô_buâ⁄
->
	`sig«l_˛icked
().
	`c⁄√˘
(
sigc
::
	`mem_fun
(*
this
, &
gMy°¨
::
⁄_quô_buâ⁄_˛icked
));

157 
°©us_œbñ
 = 
NULL
;

158 
°©us_œbñ
 = 
ªfXml
->
	`gë_widgë
("status",status_label);

199 
	`add
(*
maö_wödow
);

200 
	`show_Æl
();

202 if(
my°¨
->
autﬁogö
)

203 
	`⁄_c⁄√˘_buâ⁄_˛icked
();

204 
	}
}

205 
	ggMy°¨
::~
	$gMy°¨
()

207 
	}
}

208 
gMy°¨
::
	$⁄_quô_buâ⁄_˛icked
()

211 
	`hide
();

212 
	}
}

213 
	ggMy°¨
::
	$⁄_disc⁄√˘_buâ⁄_˛icked
()

215 
my°¨
->
	`logout
(
SIGINT
);

216 
°©us_œbñ
->
	`£t_œbñ
("logout...");

217 if(!
	`±hªad_ˇn˚l
(
authí_thªad
))

218 
cout
<<"ÂèñÊ∂àËÆ§ËØÅ„ÄÇ„ÄÇ„ÄÇ\n";

219 
	}
}

220 
	ggMy°¨
::
	$⁄_c⁄√˘_buâ⁄_˛icked
()

222 
cout
<<"Áî®‰∫éËøûÊé•ÁöÑË¥¶Âè∑‰ø°ÊÅØÊòØ:"<<
ídl
;

223 
°r
[20];

224 
	`°r˝y
(
°r
,
nick«me_íåy
->
	`gë_ãxt
().
	`c_°r
());

225 
my°¨
->
u£r
.
	`£t_nick«me
(
°r
);

227 
	`°r˝y
(
°r
,
u£∫ame_íåy
->
	`gë_ãxt
().
	`c_°r
());

228 
my°¨
->
u£r
.
	`£t_u£∫ame
(
°r
);

230 
	`°r˝y
(
°r
,
∑ssw‹d_íåy
->
	`gë_ãxt
().
	`c_°r
());

231 
my°¨
->
u£r
.
	`£t_∑ssw‹d
(
°r
);

233 
	`°r˝y
(
°r
,
ÁkeAddªss_íåy
->
	`gë_ãxt
().
	`c_°r
());

234 
my°¨
->
u£r
.
	`£t_ÁkeAddªss
(
°r
);

236 
ªs
 = 
	`±hªad_¸óã
(&
authí_thªad
, 
NULL
,
gMy°¨
::
ã°
, NULL);

237 if(
ªs
!=0)

239 
	`≥º‹
("Thread creation failed");

240 
	`exô
(
EXIT_FAILURE
);

243 
ªs2
 = 
	`±hªad_¸óã
(&
ch™ge_ui_thªad
, 
NULL
,
gMy°¨
::
ch™ge_ui
, NULL);

244 if(
ªs2
!=0)

246 
	`≥º‹
("Thread creation failed");

247 
	`exô
(
EXIT_FAILURE
);

249 
	}
}

250 
	ggMy°¨
::
	$hñp
()

252 
	`¥ötf
("to useÇo gui mode,ÖleaseÅype --nogui\n");

253 
	}
}

254 
	ggMy°¨
::
	$show_mesßge
(c⁄° *
mesßge
)

256 
cout
<<
mesßge
;

257 
°©us_œbñ
->
	`£t_ãxt
(
mesßge
);

258 
	}
}

259 
	ggMy°¨
::
	$⁄_åay_˛icked
()

261 if(
MaöWödow
->
	`is_visibÀ
())

262 
	`hide_wödow
();

264 
	`show_wödow
();

265 
	}
}

266 
	ggMy°¨
::
	$show_wödow
()

268 
MaöWödow
->
	`move
(
wödow_x
, 
wödow_y
);

269 
cout
<<"ªsumêthêposôi⁄("<<
wödow_x
<<","<<
wödow_y
<<")"<<
ídl
;

270 
MaöWödow
->
	`show
();

271 
	}
}

272 
	ggMy°¨
::
	$hide_wödow
()

277 
	}
}

278 *
gMy°¨
::
	$ã°
(*
a
)

280 
my°¨
->
	`authí
();

281 
	}
}

282 *
	ggMy°¨
::
	$ch™ge_ui
(*
a
)

284 
Êag
)

286 
°©us
 = 
my°¨
->
	`gë_°©us
();

287 
°©us
)

290 
°©us_œbñ
->
	`£t_œbñ
(">> Searching for server...\n");

293 
°©us_œbñ
->
	`£t_œbñ
(" Sending userÇame...");

296 
°©us_œbñ
->
	`£t_œbñ
(" SendingÖassword...");

299 
°©us_ic⁄
->
	`£t_‰om_fûe
("/usr/share/gMystar/data/connect.png");

300 
°©us_œbñ
->
	`£t_œbñ
("keep sendingÉcho...");

302 
NŸify
::
	`öô
("IconÅest");

303 
n
 = 
√w
 
NŸify
::
	`NŸifiˇti⁄
("gMystar", "ËøûÊé•ÊàêÂäü", "appointment-new");

304 
n
->
	`£t_timeout
(1000);

305 
n
->
	`show
();

307 
	`hide_wödow
();

308 if(
autﬁogö_checkbuâ⁄
->
	`gë_a˘ive
())

309 
my°¨
->
autﬁogö
=
åue
;

311 
my°¨
->
autﬁogö
=
Ál£
;

312 
my°¨
->
	`ßve_fûe
();

313 
Êag
=
Ál£
;

316 
n
 = 
√w
 
NŸify
::
	`NŸifiˇti⁄
("gMystar", "ÁΩëÁªúÊñ≠ÂºÄÔºåËØ∑Ê£ÄÊü•ÁΩëÁªú„ÄÇ„ÄÇ", "appointment-new");

317 
n
->
	`£t_timeout
(1000);

318 
n
->
	`show
();

319 
Êag
=
Ál£
;

321 
Êag
=
åue
;

325 
	}
}

326 
boﬁ
 
	ggMy°¨
::
	$⁄_key_¥ess_evít
(
GdkEvítKey
 *
ev
)

328 if(
ev
->
ty≥
!=
GDK_KEY_PRESS
)

329  
Wödow
::
	`⁄_key_¥ess_evít
(
ev
);

330 
ev
->
keyvÆ
)

332 
GDK_w
:

333 if(
ev
->
°©e
 & 
GDK_CONTROL_MASK
)

335 
	`hide
();

337  
Wödow
::
	`⁄_key_¥ess_evít
(
ev
);

339  
åue
;

340 
	}
}

	@gMystar.h

1 
	~"My°¨.h
"

2 
	~<gtkmm.h
>

3 
	~<libgœdemm.h
>

4 
	~<libnŸifymm.h
>

5 
	~<boo°/Àxiˇl_ˇ°.hµ
>

6 
usög
 
«me•a˚
 
	gGtk
;

8 ˛as†
	cgMy°¨
:
public
 
Wödow


10 
public
:

12 
gMy°¨
();

13 ~
gMy°¨
();

14 
hñp
();

15 
My°¨
 *
	mmy°¨
;

16 
	m¥Ÿe˘ed
:

17 
boﬁ
 
⁄_key_¥ess_evít
(
GdkEvítKey
 *);

18 
⁄_quô_buâ⁄_˛icked
();

19 
⁄_c⁄√˘_buâ⁄_˛icked
();

20 
⁄_disc⁄√˘_buâ⁄_˛icked
();

21 
⁄_åay_˛icked
();

22 
show_mesßge
(c⁄° *
mesßge
);

23 
show_wödow
();

24 
hide_wödow
();

26 *
ã°
(*);

27 *
ch™ge_ui
(*);

29 
	mGlib
::
RefPå
<
Gnome
::
Gœde
::
Xml
> 
ªfXml
;

30 
Wödow
 *
	mMaöWödow
;

31 
E¡ry
 *
	mu£∫ame_íåy
;

32 
E¡ry
 *
	m∑ssw‹d_íåy
;

33 
E¡ry
 *
	mÁkeAddªss_íåy
;

34 
E¡ry
 *
	mnick«me_íåy
;

35 
CheckBuâ⁄
 *
	mautﬁogö_checkbuâ⁄
;

36 
Buâ⁄
 *
	mc⁄√˘_buâ⁄
;

37 
Buâ⁄
 *
	mdisc⁄√˘_buâ⁄
;

38 
Buâ⁄
 *
	mquô_buâ⁄
;

39 
Labñ
 *
	m°©us_œbñ
;

40 
	mGlib
::
RefPå
<
Gtk
::
SètusIc⁄
> 
°©us_ic⁄
;

42 
±hªad_t
 
	mauthí_thªad
;

43 
±hªad_t
 
	mch™ge_ui_thªad
;

45 
boﬁ
 
	mÊag
;

47 
	mwödow_x
;

48 
	mwödow_y
;

49 
	msigc
::
c⁄√˘i⁄
 
c
;

50 
	mNŸify
::
NŸifiˇti⁄
 *
n
;

	@gmyqq.cc

1 
	~<±hªad.h
>

2 
	~"gmyqq.h
"

6 
	ggMyqq
::
	$gMyqq
()

20 
ªfXml
 = 
Gnome
::
Gœde
::
Xml
::
	`¸óã
("../data/gmyqq.glade","main_window");

21 if(!
ªfXml
)

22 
	`exô
(271);

33 
mesßge_ãxtvõw
=
NULL
;

34 
mesßge_ãxtvõw
 = 
ªfXml
->
	`gë_widgë
("message_textview",message_textview);

37 
maö_wödow
 = 
NULL
;

38 
maö_wödow
 = 
ªfXml
->
	`gë_widgë
("main_window", main_window);

40 
maö_wödow
->
	`£t_deÁu…_size
(800,600);

41 
maö_wödow
->
	`£t_tôÀ
("gmyqq");

44 
maö_wödow
->
	`£t_focus
(*
mesßge_ãxtvõw
);

45 
maö_wödow
->
	`show_Æl
();

70 
	}
}

71 
	ggMyqq
::~
	$gMyqq
()

73 
	}
}

74 
gMyqq
::
	$⁄_åay_˛icked
()

76 if(
maö_wödow
->
	`is_visibÀ
())

77 
	`hide_wödow
();

79 
	`show_wödow
();

80 
	}
}

81 
	ggMyqq
::
	$show_wödow
()

85 
maö_wödow
->
	`show
();

86 
	}
}

87 
	ggMyqq
::
	$hide_wödow
()

91 
maö_wödow
->
	`hide
();

92 
	}
}

93 
	ggMyqq
::
	$⁄_ãxtvõw_íãr_key_¥es£d
()

95 
	}
}

97 
myqq
(
¨gc
, ** 
¨gv
);

99 
	$maö
(
¨gc
, *
¨gv
[])

101 if(
¨gc
 == 2)

103 if(!
	`°rcmp
(
¨gv
[1],"--nogui"))

105 
	`myqq
(
¨gc
,
¨gv
);

107 if(!
	`°rcmp
(
¨gv
[1],"--help"))

110 if(!
	`°rcmp
(
¨gv
[1],"--test"))

112 
Myqq
 
myqq
;

114 if(!
	`°rcmp
(
¨gv
[1],"-s"))

119 
cout
<<"ußge: gMy°¨ --hñ∞f‹ m‹êdëaûs"<<
ídl
;

124 
Gtk
::
Maö
 
	`kô
(
¨gc
, 
¨gv
);

125 
gMyqq
 
gmyqq
;

126 
kô
.
	`run
();

129 
	}
}

	@gmyqq.h

1 
	~<gtkmm.h
>

2 
	~<libgœdemm.h
>

3 
	~<libnŸifymm.h
>

4 
	~<boo°/Àxiˇl_ˇ°.hµ
>

6 
	~"myqq.h
"

10 
usög
 
«me•a˚
 
	gGtk
;

12 ˛as†
	cgMyqq


14 
	mpublic
:

15 
gMyqq
();

16 ~
gMyqq
();

17 
	m¥Ÿe˘ed
:

18 
⁄_åay_˛icked
();

19 
show_wödow
();

20 
hide_wödow
();

21 
⁄_ãxtvõw_íãr_key_¥es£d
();

22 
TextVõw
 *
	mmesßge_ãxtvõw
;

23 
	mGlib
::
RefPå
<
Gnome
::
Gœde
::
Xml
> 
ªfXml
;

24 
	mGlib
::
RefPå
<
Gdk
::
Pixbuf
> 
ui_logo
;

25 
Wödow
 *
	mmaö_wödow
;

26 
E¡ry
 *
	mu£∫ame_íåy
;

27 
E¡ry
 *
	m∑ssw‹d_íåy
;

28 
E¡ry
 *
	mÁkeAddªss_íåy
;

29 
E¡ry
 *
	mnick«me_íåy
;

30 
CheckBuâ⁄
 *
	mautﬁogö_checkbuâ⁄
;

31 
Buâ⁄
 *
	mc⁄√˘_buâ⁄
;

32 
Buâ⁄
 *
	mdisc⁄√˘_buâ⁄
;

33 
Buâ⁄
 *
	mquô_buâ⁄
;

34 
Labñ
 *
	m°©us_œbñ
;

38 
±hªad_t
 
	mauthí_thªad
;

39 
±hªad_t
 
	mch™ge_ui_thªad
;

41 
	mwödow_x
;

42 
	mwödow_y
;

43 
	msigc
::
c⁄√˘i⁄
 
c
;

44 
	mNŸify
::
NŸifiˇti⁄
 *
n
;

	@group.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~"qq˛õ¡.h
"

18 
	~"mem‹y.h
"

19 
	~"debug.h
"

20 
	~"¥Ÿocﬁ.h
"

21 
	~"li°.h
"

22 
	~"group.h
"

24 
	$£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

26  ( ((
qqgroup
*)
p
)->
numbî
 =()
v
 );

27 
	}
}

29 
qqgroup
* 
	$group_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 )

31 if–!
numbî
 )

32  
NULL
;

33 
qqgroup
* 
g
;

34 
g
 = (
qqgroup
 *)
	`li°_£¨ch
–&
qq
->
group_li°
, (*)
numbî
, 
£¨chî
 );

36 if–!
g
 && 
¸óã
 ){

37 
	`NEW
–
g
, –
qqgroup
 ) ,qqgroup);

38 if–!
g
 ){

39 
	`DBG
("FatalÉrror: groupÇotállocated");

40  
g
;

42 
g
->
numbî
 =Çumber;

43 
	`•rötf
–
g
->
«me
, "%u", 
numbî
 );

44 if–
	`li°_≠≥nd
–&
qq
->
group_li°
, (*)
g
 )<0 ){

45 
	`DEL
–
g
 );

46 
	`DBG
("groupÜist is full.");

49  
g
;

50 
	}
}

52 
	$group_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

54 
qqgroup
* 
g
;

55 
g
 = (
qqgroup
 *)
	`li°_£¨ch
–&
qq
->
group_li°
, (*)
numbî
, 
£¨chî
 );

56 if–
g
 ){

57 
	`li°_ªmove
–&
qq
->
group_li°
, 
g
 );

59 
	}
}

61 
	$group_upd©e_li°
–
qq˛õ¡
* 
qq
 )

64 
	`¥Ÿ_group_dow∆ﬂd_œbñs
–
qq
, 0 );

65 
	}
}

67 
	$group_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqgroup
* 
g
 )

69 
	}
}

72 
	$group_put_evít
–
qq˛õ¡
* 
qq
 )

74 *
ãmp
;

75 
i
;

76 
qqgroup
* 
g
;

77 
	`NEW
–
ãmp
, 
	`KB
(1) ,);

78 if–!
ãmp
 ) ;

79 
	`°r˝y
–
ãmp
, "grouplist^$" );

80 
	`±hªad_muãx_lock
–&
qq
->
group_li°
.
muãx
 );

81  
i
=0; i<
qq
->
group_li°
.
cou¡
; i++ ){

82 
g
 = (
qqgroup
*)
qq
->
group_li°
.
ôems
[
i
];

83 
	`•rötf
–
ãmp
, "%s%u\t%s^@",Åemp, 
g
->
numbî
, g->
«me
 );

85 
	`±hªad_muãx_u∆ock
–&
qq
->
group_li°
.
muãx
 );

86 
	`qq˛õ¡_put_evít
–
qq
, 
ãmp
 );

87 
	`DEL
–
ãmp
 );

88 
	}
}

	@group.h

1 #i‚de‡
_GROUP_H


2 
	#_GROUP_H


	)

4 
	~"qqdef.h
"

6 
	sqqgroup
{

7 
uöt
 
	mnumbî
;

8 
	m«me
[
GROUPNAME_LEN
];

9 }
	tqqgroup
;

11 
	gqq˛õ¡
;

12 
qqgroup
* 
group_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 );

13 
group_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

14 
group_upd©e_li°
–
qq˛õ¡
* 
qq
 );

15 
group_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqgroup
* 
g
 );

16 
group_put_evít
–
qq˛õ¡
* 
qq
 );

	@list.c

14 
	~<°rög.h
>

15 
	~<°dlib.h
>

16 
	~<±hªad.h
>

17 
	~"qqdef.h
"

18 
	~"debug.h
"

19 
	~"mem‹y.h
"

20 
	~"li°.h
"

23 
	$li°_¸óã
–
li°
* 
l
, 
size
 )

25 
l
->
size
 = size;

26 
l
->
cou¡
 = 0;

27 
	`±hªad_muãx_öô
–&
l
->
muãx
, 
NULL
 );

28 
	`NEW
–
l
->
ôems
,Ü->
size
*(*) ,*);

29 
	`as£π
–
l
->
ôems
 );

31 
	}
}

33 
	$li°_≠≥nd
–
li°
* 
l
, * 
d©a
 )

35 
i
, 
ªt
 = 0;

36 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

37 if–
l
->
cou¡
 >l->
size
 ){

38 
	`DBG
("li° i†fuŒ. cou¡:%d", 
l
->
cou¡
);

39 
ªt
 = -1;

41 
i
 = 
l
->
cou¡
 ++;

42 
l
->
ôems
[
i
] = 
d©a
;

44 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

45  
ªt
;

46 
	}
}

48 
	$li°_ªmove
–
li°
* 
l
, * 
d©a
 )

50 
i
;

51 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

52  
i
=0; i<
l
->
cou¡
; i++ ){

53 if–
l
->
ôems
[
i
] =
d©a
 ){

54 
l
->
cou¡
 --;

55 if–
i
 !
l
->
cou¡
 )

56 
l
->
ôems
[
i
] =Ü->ôems[l->
cou¡
];

60 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

62 
	}
}

64 * 
	$li°_£¨ch
–
li°
* 
l
, * 
v
, 
£¨ch_func
 
£¨ch
 )

66 
i
;

67 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

68  
i
=0; i<
l
->
cou¡
; i++ ){

69 if–
	`£¨ch
–
l
->
ôems
[
i
], 
v
 ) )

72 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

73 if–
i
 < 
l
->
cou¡
 )

74  
l
->
ôems
[
i
];

75  
NULL
;

76 
	}
}

78 
	$li°_s‹t
–
li°
* 
l
, 
comp_func
 
comp
 )

80 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

81 if–
l
->
cou¡
 == 0 )

83 
	`qs‹t
–
l
->
ôems
,Ü->
cou¡
, (*), 
comp
 );

84 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

85 
	}
}

87 
	$li°_˛ónup
–
li°
* 
l
 )

89 
i
;

90 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

91 if–
l
->
cou¡
 > 0 ){

93  
i
=0; i<
l
->
cou¡
; i++ ){

94 
	`DEL
–
l
->
ôems
[
i
] );

97 
	`DEL
–
l
->
ôems
 );

98 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

99 
	`±hªad_muãx_de°roy
–&
l
->
muãx
 );

100 
	}
}

	@list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

4 
	~<±hªad.h
>

6 
	sli°
{

7 
±hªad_muãx_t
 
	mmuãx
;

8 
	msize
;

9 
	mcou¡
;

10 ** 
	môems
;

11 }
	tli°
;

13 (*
	tcomp_func
)(const *, const *);

14 (*
	t£¨ch_func
)(const *, const *);

16 
	`li°_¸óã
–
li°
* 
l
, 
size
 );

17 
	`li°_≠≥nd
–
li°
* 
l
, * 
d©a
 );

18 
	`li°_ªmove
–
li°
* 
l
, * 
d©a
 );

19 * 
	`li°_£¨ch
–
li°
* 
l
, *, 
£¨ch_func
 
£¨ch
 );

20 
	`li°_s‹t
–
li°
* 
l
, 
comp_func
 
comp
 );

21 
	`li°_˛ónup
–
li°
* 
l
 );

	@loop.c

14 
	~<°rög.h
>

15 
	~<°dlib.h
>

16 
	~<±hªad.h
>

17 
	~"qqdef.h
"

18 
	~"debug.h
"

19 
	~"mem‹y.h
"

20 
	~"lo›.h
"

23 
	$lo›_¸óã
–
lo›
* 
l
, 
size
, 
lo›_dñëe_func
 
dñ
 )

25 
l
->
size
 = size;

26 
l
->
hód
 =Ü->
èû
 = 0;

27 
l
->
dñ_func
 = 
dñ
;

28 
	`±hªad_muãx_öô
–&
l
->
muãx
, 
NULL
 );

29 
l
->
ôems
 = (**)
	`mÆloc
–l->
size
*(*) );

30 
	`as£π
–
l
->
ôems
 !
NULL
 );

32 
	}
}

35 
	$lo›_push_to_èû
–
lo›
* 
l
, * 
d©a
 )

37 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

38 if–(
l
->
èû
+1)%l->
size
 =l->
hód
 ){

40 if–
l
->
dñ_func
 )

41 
l
->
	`dñ_func
–l->
ôems
[l->
hód
] );

42 
l
->
hód
 = (l->hód+1)%l->
size
;

45 
l
->
ôems
[l->
èû
] = 
d©a
;

46 
l
->
èû
 = (l->èû+1)%l->
size
;

47 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

49 
	}
}

52 
	$lo›_push_to_hód
–
lo›
* 
l
, * 
d©a
 )

54 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

55 if–(
l
->
size
+l->
hód
-1)%l->sizê=l->
èû
 ){

56 
l
->
èû
 = (l->
size
+l->tail-1)%l->size;

57 
	`as£π
–
l
->
èû
 >= 0 );

58 if–
l
->
dñ_func
 )

59 
l
->
	`dñ_func
–l->
ôems
[l->
èû
] );

62 
l
->
hód
 = (l->
size
+l->head-1)%l->size;

63 
	`as£π
–
l
->
hód
 >= 0 );

64 
l
->
ôems
[l->
hód
] = 
d©a
;

65 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

67 
	}
}

69 * 
	$lo›_p›_‰om_hód
–
lo›
* 
l
 )

71 * 
p
 = 
NULL
;

72 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

73 if–
l
->
èû
 !l->
hód
 ){

74 
p
 = 
l
->
ôems
[l->
hód
];

75 
l
->
hód
 = (l->hód+1)%l->
size
;

76 
	`as£π
–
l
->
hód
 <Ü->
size
 );

78 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

79  
p
;

80 
	}
}

82 * 
	$lo›_p›_‰om_èû
–
lo›
* 
l
 )

84 * 
p
 = 
NULL
;

85 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

86 if–
l
->
èû
 !l->
hód
 ){

87 
l
->
èû
 = (l->
size
+l->tail-1)%l->size;

88 
	`as£π
–
l
->
èû
 >= 0 );

89 
p
 = 
l
->
ôems
[l->
èû
];

91 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

92  
p
;

93 
	}
}

95 
	$lo›_ªmove
–
lo›
* 
l
, * 
d©a
 )

97 
i
;

98 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

99  
i
=
l
->
hód
; i!ˆ->
èû
; i=(i+1)%l->
size
 )

101 if–
l
->
ôems
[
i
] =
d©a
 ){

102 
l
->
èû
 = (l->
size
+l->tail-1)%l->size;

103 
	`as£π
–
l
->
èû
 >= 0 );

105  ; 
i
!=
l
->
èû
; i=(i+1)%l->
size
 )

106 
l
->
ôems
[
i
] =Ü->ôems[(i+1)%l->
size
];

110 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

111 
	}
}

113 * 
	$lo›_£¨ch
–
lo›
* 
l
, * 
v
, 
lo›_£¨ch_func
 
£¨ch
 )

115 
i
;

116 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

117  
i
=
l
->
hód
; i!ˆ->
èû
; i=(i+1)%l->
size
 )

119 if–
	`£¨ch
–
l
->
ôems
[
i
], 
v
 ) )

122 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

123 if–
i
 !
l
->
èû
 )

124  
l
->
ôems
[
i
];

125  
NULL
;

126 
	}
}

128 
	$lo›_˛ónup
–
lo›
* 
l
 )

130 
i
;

131 
	`±hªad_muãx_lock
–&
l
->
muãx
 );

132 if–
l
->
dñ_func
 )

133  
i
=
l
->
hód
; i!ˆ->
èû
; i=(i+1)%l->
size
 )

134 
l
->
	`dñ_func
–l->
ôems
[
i
] );

135 
	`‰ì
–
l
->
ôems
 );

136 
	`±hªad_muãx_u∆ock
–&
l
->
muãx
 );

137 
	`±hªad_muãx_de°roy
–&
l
->
muãx
 );

138 
	}
}

140 
	$lo›_is_em±y
–
lo›
* 
l
 )

142 –
l
->
hód
 =l->
èû
 );

143 
	}
}

	@loop.h

1 #i‚de‡
_LOOP_H


2 
	#_LOOP_H


	)

4 
	~<±hªad.h
>

6 (*
	tlo›_£¨ch_func
)(const *, const *);

7 (*
	tlo›_dñëe_func
)(const *);

9 
	slo›
{

10 
±hªad_muãx_t
 
muãx
;

11 
size
;

12 
hód
;

13 
èû
;

14 
°r
[5];

15 ** 
ôems
;

16 
lo›_dñëe_func
 
dñ_func
;

17 }
	tlo›
;

19 
	`lo›_¸óã
–
lo›
* 
l
, 
size
, 
lo›_dñëe_func
 
dñ
 );

20 
	`lo›_≠≥nd
–
lo›
* 
l
, * 
d©a
 );

21 
	`lo›_r_≠≥nd
–
lo›
* 
l
, * 
d©a
 );

22 * 
	`lo›_p›_‰om_èû
–
lo›
* 
l
 );

23 * 
	`lo›_p›_‰om_hód
–
lo›
* 
l
 );

24 
	`lo›_push_to_hód
–
lo›
* 
l
, * 
d©a
 );

25 
	`lo›_push_to_èû
–
lo›
* 
l
, * 
d©a
 );

26 * 
	`lo›_£¨ch
–
lo›
* 
l
, *, 
lo›_£¨ch_func
 
£¨ch
 );

27 
	`lo›_˛ónup
–
lo›
* 
l
 );

28 
	`lo›_is_em±y
–
lo›
* 
l
 );

29 
	`lo›_ªmove
–
lo›
* 
l
, * 
d©a
 );

	@main.cc

1 
	~"gmyqq.h
"

2 
	#USERNAME
 1147071944

	)

3 
	$maö
(
¨gc
, *
¨gv
[])

5 if(
¨gc
 == 2)

7 if(!
	`°rcmp
(
¨gv
[1],"--nogui"))

11 if(!
	`°rcmp
(
¨gv
[1],"--help"))

15 if(!
	`°rcmp
(
¨gv
[1],"--test"))

18 if(!
	`°rcmp
(
¨gv
[1],"-s"))

28 
Gtk
::
Maö
 
	`kô
(
¨gc
, 
¨gv
);

29 
gMyQQ
 
gmyqq
;

30 
kô
.
	`run
();

33 
	}
}

	@md5.c

40 
	~"md5.h
"

41 
	~<°rög.h
>

43 #ifde‡
TEST


49 
	~<°rög.h
>

50 
	$maö
()

52 c⁄° *c⁄° 
ã°
[7] = {

62 
i
;

64 
i
 = 0; i < 7; ++i) {

65 
md5_°©e_t
 
°©e
;

66 
md5_byã_t
 
dige°
[16];

67 
di
;

69 
	`md5_öô
(&
°©e
);

70 
	`md5_≠≥nd
(&
°©e
, (c⁄° 
md5_byã_t
 *)
ã°
[
i
], 
	`°æí
(test[i]));

71 
	`md5_föish
(&
°©e
, 
dige°
);

72 
	`¥ötf
("MD5 (\"%s\"Ë", 
ã°
[
i
]);

73 
di
 = 0; di < 16; ++di)

74 
	`¥ötf
("%02x", 
dige°
[
di
]);

75 
	`¥ötf
("\n");

78 
	}
}

86 
	~<m©h.h
>

87 
	$maö
()

89 
i
;

90 
i
 = 1; i <= 64; ++i) {

91 
v
 = ()(4294967296.0 * 
	`Ábs
(
	`sö
(()
i
)));

92 
	`¥ötf
("#deföêT%d 0x%08lx\n", 
i
, 
v
);

95 
	}
}

100 
	#T1
 0xd76Ø478

	)

101 
	#T2
 0xe8c7b756

	)

102 
	#T3
 0x242070db

	)

103 
	#T4
 0xc1bd˚ì

	)

104 
	#T5
 0xf57c0Áf

	)

105 
	#T6
 0x4787c62a

	)

106 
	#T7
 0xa8304613

	)

107 
	#T8
 0xfd469501

	)

108 
	#T9
 0x698098d8

	)

109 
	#T10
 0x8b44f7af

	)

110 
	#T11
 0xffff5bb1

	)

111 
	#T12
 0x895cd7be

	)

112 
	#T13
 0x6b901122

	)

113 
	#T14
 0xfd987193

	)

114 
	#T15
 0xa679438e

	)

115 
	#T16
 0x49b40821

	)

116 
	#T17
 0xf61e2562

	)

117 
	#T18
 0xc040b340

	)

118 
	#T19
 0x265e5a51

	)

119 
	#T20
 0xe9b6c7Ø

	)

120 
	#T21
 0xd62f105d

	)

121 
	#T22
 0x02441453

	)

122 
	#T23
 0xd8a1e681

	)

123 
	#T24
 0xe7d3fbc8

	)

124 
	#T25
 0x21e1cde6

	)

125 
	#T26
 0xc33707d6

	)

126 
	#T27
 0xf4d50d87

	)

127 
	#T28
 0x455a14ed

	)

128 
	#T29
 0xa9e3e905

	)

129 
	#T30
 0xf˚Á3f8

	)

130 
	#T31
 0x676f02d9

	)

131 
	#T32
 0x8d2a4c8a

	)

132 
	#T33
 0xffÁ3942

	)

133 
	#T34
 0x8771f681

	)

134 
	#T35
 0x6d9d6122

	)

135 
	#T36
 0xfde5380c

	)

136 
	#T37
 0xa4bìa44

	)

137 
	#T38
 0x4bdecÁ9

	)

138 
	#T39
 0xf6bb4b60

	)

139 
	#T40
 0xbebfbc70

	)

140 
	#T41
 0x289b7ec6

	)

141 
	#T42
 0xóa127Á

	)

142 
	#T43
 0xd4ef3085

	)

143 
	#T44
 0x04881d05

	)

144 
	#T45
 0xd9d4d039

	)

145 
	#T46
 0xe6db99e5

	)

146 
	#T47
 0x1Á27cf8

	)

147 
	#T48
 0xc4ac5665

	)

148 
	#T49
 0xf4292244

	)

149 
	#T50
 0x432aff97

	)

150 
	#T51
 0xab9423a7

	)

151 
	#T52
 0xfc93a039

	)

152 
	#T53
 0x655b59c3

	)

153 
	#T54
 0x8f0ccc92

	)

154 
	#T55
 0xf„ff47d

	)

155 
	#T56
 0x85845dd1

	)

156 
	#T57
 0x6Á87e4f

	)

157 
	#T58
 0x„2˚6e0

	)

158 
	#T59
 0xa3014314

	)

159 
	#T60
 0x4e0811a1

	)

160 
	#T61
 0xf7537e82

	)

161 
	#T62
 0xbd3af235

	)

162 
	#T63
 0x2ad7d2bb

	)

163 
	#T64
 0xeb86d391

	)

166 
	$md5_¥o˚ss
(
md5_°©e_t
 *
pms
, c⁄° 
md5_byã_t
 *
d©a
 )

168 
md5_w‹d_t


169 
a
 = 
pms
->
abcd
[0], 
b
 =Öms->abcd[1],

170 
c
 = 
pms
->
abcd
[2], 
d
 =Öms->abcd[3];

171 
md5_w‹d_t
 
t
;

173 #i‚de‡
ARCH_IS_BIG_ENDIAN


174 
	#ARCH_IS_BIG_ENDIAN
 1

	)

176 #i‡
ARCH_IS_BIG_ENDIAN


182 
md5_w‹d_t
 
X
[16];

183 c⁄° 
md5_byã_t
 *
xp
 = 
d©a
;

184 
i
;

186 
i
 = 0; i < 16; ++i, 
xp
 += 4)

187 
X
[
i
] = 
xp
[0] + (xp[1] << 8) + (xp[2] << 16) + (xp[3] << 24);

195 
md5_w‹d_t
 
xbuf
[16];

196 c⁄° 
md5_w‹d_t
 *
X
;

198 i‡(!((
d©a
 - (c⁄° 
md5_byã_t
 *)0) & 3)) {

200 
X
 = (c⁄° 
md5_w‹d_t
 *)
d©a
;

203 
	`mem˝y
(
xbuf
, 
d©a
, 64);

204 
X
 = 
xbuf
;

208 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32 - (n))))

	)

213 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| (~(xË& (z)))

	)

214 
	#SET
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
Ti
)\

215 
t
 = 
a
 + 
	`F
(
b
,
c
,
d
Ë+ 
X
[
k
] + 
Ti
;\

216 
a
 = 
	`ROTATE_LEFT
(
t
, 
s
Ë+ 
b


	)

218 
	`SET
(
a
, 
b
, 
c
, 
d
, 0, 7, 
T1
);

219 
	`SET
(
d
, 
a
, 
b
, 
c
, 1, 12, 
T2
);

220 
	`SET
(
c
, 
d
, 
a
, 
b
, 2, 17, 
T3
);

221 
	`SET
(
b
, 
c
, 
d
, 
a
, 3, 22, 
T4
);

222 
	`SET
(
a
, 
b
, 
c
, 
d
, 4, 7, 
T5
);

223 
	`SET
(
d
, 
a
, 
b
, 
c
, 5, 12, 
T6
);

224 
	`SET
(
c
, 
d
, 
a
, 
b
, 6, 17, 
T7
);

225 
	`SET
(
b
, 
c
, 
d
, 
a
, 7, 22, 
T8
);

226 
	`SET
(
a
, 
b
, 
c
, 
d
, 8, 7, 
T9
);

227 
	`SET
(
d
, 
a
, 
b
, 
c
, 9, 12, 
T10
);

228 
	`SET
(
c
, 
d
, 
a
, 
b
, 10, 17, 
T11
);

229 
	`SET
(
b
, 
c
, 
d
, 
a
, 11, 22, 
T12
);

230 
	`SET
(
a
, 
b
, 
c
, 
d
, 12, 7, 
T13
);

231 
	`SET
(
d
, 
a
, 
b
, 
c
, 13, 12, 
T14
);

232 
	`SET
(
c
, 
d
, 
a
, 
b
, 14, 17, 
T15
);

233 
	`SET
(
b
, 
c
, 
d
, 
a
, 15, 22, 
T16
);

234 #unde‡
SET


239 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& ~(z)))

	)

240 
	#SET
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
Ti
)\

241 
t
 = 
a
 + 
	`G
(
b
,
c
,
d
Ë+ 
X
[
k
] + 
Ti
;\

242 
a
 = 
	`ROTATE_LEFT
(
t
, 
s
Ë+ 
b


	)

244 
	`SET
(
a
, 
b
, 
c
, 
d
, 1, 5, 
T17
);

245 
	`SET
(
d
, 
a
, 
b
, 
c
, 6, 9, 
T18
);

246 
	`SET
(
c
, 
d
, 
a
, 
b
, 11, 14, 
T19
);

247 
	`SET
(
b
, 
c
, 
d
, 
a
, 0, 20, 
T20
);

248 
	`SET
(
a
, 
b
, 
c
, 
d
, 5, 5, 
T21
);

249 
	`SET
(
d
, 
a
, 
b
, 
c
, 10, 9, 
T22
);

250 
	`SET
(
c
, 
d
, 
a
, 
b
, 15, 14, 
T23
);

251 
	`SET
(
b
, 
c
, 
d
, 
a
, 4, 20, 
T24
);

252 
	`SET
(
a
, 
b
, 
c
, 
d
, 9, 5, 
T25
);

253 
	`SET
(
d
, 
a
, 
b
, 
c
, 14, 9, 
T26
);

254 
	`SET
(
c
, 
d
, 
a
, 
b
, 3, 14, 
T27
);

255 
	`SET
(
b
, 
c
, 
d
, 
a
, 8, 20, 
T28
);

256 
	`SET
(
a
, 
b
, 
c
, 
d
, 13, 5, 
T29
);

257 
	`SET
(
d
, 
a
, 
b
, 
c
, 2, 9, 
T30
);

258 
	`SET
(
c
, 
d
, 
a
, 
b
, 7, 14, 
T31
);

259 
	`SET
(
b
, 
c
, 
d
, 
a
, 12, 20, 
T32
);

260 #unde‡
SET


265 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

266 
	#SET
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
Ti
)\

267 
t
 = 
a
 + 
	`H
(
b
,
c
,
d
Ë+ 
X
[
k
] + 
Ti
;\

268 
a
 = 
	`ROTATE_LEFT
(
t
, 
s
Ë+ 
b


	)

270 
	`SET
(
a
, 
b
, 
c
, 
d
, 5, 4, 
T33
);

271 
	`SET
(
d
, 
a
, 
b
, 
c
, 8, 11, 
T34
);

272 
	`SET
(
c
, 
d
, 
a
, 
b
, 11, 16, 
T35
);

273 
	`SET
(
b
, 
c
, 
d
, 
a
, 14, 23, 
T36
);

274 
	`SET
(
a
, 
b
, 
c
, 
d
, 1, 4, 
T37
);

275 
	`SET
(
d
, 
a
, 
b
, 
c
, 4, 11, 
T38
);

276 
	`SET
(
c
, 
d
, 
a
, 
b
, 7, 16, 
T39
);

277 
	`SET
(
b
, 
c
, 
d
, 
a
, 10, 23, 
T40
);

278 
	`SET
(
a
, 
b
, 
c
, 
d
, 13, 4, 
T41
);

279 
	`SET
(
d
, 
a
, 
b
, 
c
, 0, 11, 
T42
);

280 
	`SET
(
c
, 
d
, 
a
, 
b
, 3, 16, 
T43
);

281 
	`SET
(
b
, 
c
, 
d
, 
a
, 6, 23, 
T44
);

282 
	`SET
(
a
, 
b
, 
c
, 
d
, 9, 4, 
T45
);

283 
	`SET
(
d
, 
a
, 
b
, 
c
, 12, 11, 
T46
);

284 
	`SET
(
c
, 
d
, 
a
, 
b
, 15, 16, 
T47
);

285 
	`SET
(
b
, 
c
, 
d
, 
a
, 2, 23, 
T48
);

286 #unde‡
SET


291 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

292 
	#SET
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
Ti
)\

293 
t
 = 
a
 + 
	`I
(
b
,
c
,
d
Ë+ 
X
[
k
] + 
Ti
;\

294 
a
 = 
	`ROTATE_LEFT
(
t
, 
s
Ë+ 
b


	)

296 
	`SET
(
a
, 
b
, 
c
, 
d
, 0, 6, 
T49
);

297 
	`SET
(
d
, 
a
, 
b
, 
c
, 7, 10, 
T50
);

298 
	`SET
(
c
, 
d
, 
a
, 
b
, 14, 15, 
T51
);

299 
	`SET
(
b
, 
c
, 
d
, 
a
, 5, 21, 
T52
);

300 
	`SET
(
a
, 
b
, 
c
, 
d
, 12, 6, 
T53
);

301 
	`SET
(
d
, 
a
, 
b
, 
c
, 3, 10, 
T54
);

302 
	`SET
(
c
, 
d
, 
a
, 
b
, 10, 15, 
T55
);

303 
	`SET
(
b
, 
c
, 
d
, 
a
, 1, 21, 
T56
);

304 
	`SET
(
a
, 
b
, 
c
, 
d
, 8, 6, 
T57
);

305 
	`SET
(
d
, 
a
, 
b
, 
c
, 15, 10, 
T58
);

306 
	`SET
(
c
, 
d
, 
a
, 
b
, 6, 15, 
T59
);

307 
	`SET
(
b
, 
c
, 
d
, 
a
, 13, 21, 
T60
);

308 
	`SET
(
a
, 
b
, 
c
, 
d
, 4, 6, 
T61
);

309 
	`SET
(
d
, 
a
, 
b
, 
c
, 11, 10, 
T62
);

310 
	`SET
(
c
, 
d
, 
a
, 
b
, 2, 15, 
T63
);

311 
	`SET
(
b
, 
c
, 
d
, 
a
, 9, 21, 
T64
);

312 #unde‡
SET


317 
pms
->
abcd
[0] +
a
;

318 
pms
->
abcd
[1] +
b
;

319 
pms
->
abcd
[2] +
c
;

320 
pms
->
abcd
[3] +
d
;

321 
	}
}

324 
	$md5_öô
(
md5_°©e_t
 *
pms
)

326 
pms
->
cou¡
[0] =Öms->count[1] = 0;

327 
pms
->
abcd
[0] = 0x67452301;

328 
pms
->
abcd
[1] = 0xefcdab89;

329 
pms
->
abcd
[2] = 0x98badcfe;

330 
pms
->
abcd
[3] = 0x10325476;

331 
	}
}

334 
	$md5_≠≥nd
(
md5_°©e_t
 *
pms
, c⁄° 
md5_byã_t
 *
d©a
, 
nbyãs
)

336 c⁄° 
md5_byã_t
 *
p
 = 
d©a
;

337 
À·
 = 
nbyãs
;

338 
off£t
 = (
pms
->
cou¡
[0] >> 3) & 63;

339 
md5_w‹d_t
 
nbôs
 = (md5_w‹d_t)(
nbyãs
 << 3);

341 i‡(
nbyãs
 <= 0)

345 
pms
->
cou¡
[1] +
nbyãs
 >> 29;

346 
pms
->
cou¡
[0] +
nbôs
;

347 i‡(
pms
->
cou¡
[0] < 
nbôs
)

348 
pms
->
cou¡
[1]++;

351 i‡(
off£t
) {

352 
c›y
 = (
off£t
 + 
nbyãs
 > 64 ? 64 - offset :Çbytes);

354 
	`mem˝y
(
pms
->
buf
 + 
off£t
, 
p
, 
c›y
);

355 i‡(
off£t
 + 
c›y
 < 64)

357 
p
 +
c›y
;

358 
À·
 -
c›y
;

359 
	`md5_¥o˚ss
(
pms
,Öms->
buf
);

363 ; 
À·
 >64; 
p
 += 64,Üeft -= 64)

364 
	`md5_¥o˚ss
(
pms
, 
p
);

367 i‡(
À·
)

368 
	`mem˝y
(
pms
->
buf
, 
p
, 
À·
);

369 
	}
}

372 
	$md5_föish
(
md5_°©e_t
 *
pms
, 
md5_byã_t
 
dige°
[16])

374 c⁄° 
md5_byã_t
 
∑d
[64] = {

380 
md5_byã_t
 
d©a
[8];

381 
i
;

384 
i
 = 0; i < 8; ++i)

385 
d©a
[
i
] = (
md5_byã_t
)(
pms
->
cou¡
[i >> 2] >> ((i & 3) << 3));

387 
	`md5_≠≥nd
(
pms
, 
∑d
, ((55 - (pms->
cou¡
[0] >> 3)) & 63) + 1);

389 
	`md5_≠≥nd
(
pms
, 
d©a
, 8);

390 
i
 = 0; i < 16; ++i)

391 
dige°
[
i
] = (
md5_byã_t
)(
pms
->
abcd
[i >> 2] >> ((i & 3) << 3));

392 
	}
}

	@md5.h

42 #i‚de‡
md5_INCLUDED


43 
	#md5_INCLUDED


	)

53 
	tmd5_byã_t
;

54 
	tmd5_w‹d_t
;

57 
	smd5_°©e_s
 {

58 
md5_w‹d_t
 
	mcou¡
[2];

59 
md5_w‹d_t
 
	mabcd
[4];

60 
md5_byã_t
 
	mbuf
[64];

61 } 
	tmd5_°©e_t
;

63 #ifde‡
__˝lu•lus


69 #ifde‡
P1


70 
md5_öô
(
P1
(
md5_°©e_t
 *
pms
));

72 
md5_öô
(
md5_°©e_t
 *
pms
);

76 #ifde‡
P3


77 
md5_≠≥nd
(
P3
(
md5_°©e_t
 *
pms
, c⁄° 
md5_byã_t
 *
d©a
, 
nbyãs
));

79 
md5_≠≥nd
(
md5_°©e_t
 *
pms
, c⁄° 
md5_byã_t
 *
d©a
, 
nbyãs
);

83 #ifde‡
P2


84 
md5_föish
(
P2
(
md5_°©e_t
 *
pms
, 
md5_byã_t
 
dige°
[16]));

86 
md5_föish
(
md5_°©e_t
 *
pms
, 
md5_byã_t
 
dige°
[16]);

89 #ifde‡
__˝lu•lus


	@memory.c

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<time.h
>

20 
	~"debug.h
"

21 
	~"mem‹y.h
"

23 
mem_dëaû
* 
	gg_md
;

25 
	$mem‹y_öô
()

27 if–!
g_md
 ){

28 
g_md
 = (
mem_dëaû
*)
	`mÆloc
((mem_detail));

29 
	`mem£t
–
g_md
, 0, (
mem_dëaû
) );

30 
	`±hªad_muãx_öô
–&
g_md
->
muãx_mem
, 
NULL
 );

32 
	}
}

34 
	$mem‹y_√w_dëaû
–** 
p
, 
size
, * 
fûe
, * 
fun˘i⁄
, 
löe
, * 
«me
 )

36 
ãmp
[128];

37 
	`•rötf
–
ãmp
, "[%s]%s(%dË%s", 
fûe
, 
fun˘i⁄
, 
löe
, 
«me
 );

38 
	`mem‹y_√w
–
p
, 
size
, 
ãmp
 );

39 
	}
}

41 
	$mem‹y_√w
–** 
p
, 
size
, * 
memo
 )

43 if–!
g_md
 )

44 
	`mem‹y_öô
();

45 *
p
 = 
NULL
;

46 if–
g_md
->
ôem_cou¡
 >
MAX_ALLOCATION
 )

48 
	`DBG
("no moreállocations."); ;

50 *
p
 = 
	`mÆloc
(
size
);

51 
	`mem£t
–*
p
, 0, 
size
 );

52 if–*
p
 =
NULL
 ){

53 
	`DBG
("noÉnough memory.");

54 
	`exô
(-1);

56 
	`±hªad_muãx_lock
–&
g_md
->
muãx_mem
 );

57 
i
 = 
g_md
->
ôem_cou¡
 ++;

58 
g_md
->
ôems
[
i
] = (
Æloˇti⁄
*)
	`mÆloc
((allocation));

60 
g_md
->
ôems
[
i
]->
poöãr
 = *
p
;

61 
g_md
->
ôems
[
i
]->
size
 = size;

62 
	`°∫˝y
–
g_md
->
ôems
[
i
]->
memo
, memo, 
MEMO_LEN
 );

63 
g_md
->
ôems
[
i
]->
time_Æloc
 = 
	`time
–
NULL
 );

64 
	`±hªad_muãx_u∆ock
–&
g_md
->
muãx_mem
 );

66 
	}
}

69 
	$mem‹y_dñëe
–* 
p
 )

71 
i
;

72 if–
p
 =
NULL
 ) ;

73 
	`±hªad_muãx_lock
–&
g_md
->
muãx_mem
 );

74  
i
=0; i<
g_md
->
ôem_cou¡
; i++ )

76 if–
g_md
->
ôems
[
i
]->
poöãr
 =
p
 )

78 
	`‰ì
–
p
 );

79 
	`‰ì
–
g_md
->
ôems
[
i
] );

80 
g_md
->
ôem_cou¡
 --;

81 if–
i
!=
g_md
->
ôem_cou¡
 )

82 
g_md
->
ôems
[
i
] = g_md->ôems[g_md->
ôem_cou¡
];

83 
g_md
->
ôems
[g_md->
ôem_cou¡
] = 
NULL
;

84 
	`±hªad_muãx_u∆ock
–&
g_md
->
muãx_mem
 );

88 
	`DBG
("nŸ foundÖoöã∏%x", 
p
 );

89 
	`±hªad_muãx_u∆ock
–&
g_md
->
muãx_mem
 );

90 
	}
}

92 
	$mem‹y_íd
(){

93 if–!
g_md
 ) ;

94 
	`DBG
("g_md->ôem_cou¡ = %d", 
g_md
->
ôem_cou¡
 );

95 if–
g_md
->
ôem_cou¡
>0 ){

96 
	`mem‹y_¥öt
();

98 
	`±hªad_muãx_de°roy
–&
g_md
->
muãx_mem
 );

99 
	}
}

101 
	$mem‹y_¥öt
(){

102 if–!
g_md
 ) ;

103 
	`DBG
("#mem‹y infÿdumpög (ôem_cou¡: %dË", 
g_md
->
ôem_cou¡
 );

104 
i
;

105 
	`±hªad_muãx_lock
–&
g_md
->
muãx_mem
 );

106  
i
=0; i<
g_md
->
ôem_cou¡
; i++ )

108 
time°r
[10];

109 
tm
* 
t
 = 
	`loˇ…ime
–& 
g_md
->
ôems
[
i
]->
time_Æloc
);

110 
	`°r·ime
–
time°r
, 10, "%X", 
t
 );

111 
	`DBG
("[%d] 0x%x(%d)\t%s\t%s", 
i
, 
g_md
->
ôems
[i]->
poöãr
, g_md->ôems[i]->
size
,

112 
g_md
->
ôems
[
i
]->
memo
, 
time°r
 );

114 
	`±hªad_muãx_u∆ock
–&
g_md
->
muãx_mem
 );

115 
	}
}

	@memory.h

1 #i‚de‡
_MEMORY_H


2 
	#_MEMORY_H


	)

4 
	~<time.h
>

5 
	~<±hªad.h
>

7 
	#MEMO_LEN
 64

	)

8 
	#MAX_ALLOCATION
 4096

	)

10 
	sÆloˇti⁄
{

11 * 
	mpoöãr
;

12 
time_t
 
	mtime_Æloc
;

13 
	msize
;

14 
	mmemo
[
MEMO_LEN
];

15 }
	tÆloˇti⁄
;

17 
	smem_dëaû
{

18 
	môem_cou¡
;

19 
Æloˇti⁄
* 
	môems
[
MAX_ALLOCATION
];

20 
±hªad_muãx_t
 
	mmuãx_mem
;

21 }
	tmem_dëaû
;

25 
	#NEW
–
p
, 
size
 ,
ty≥
Ë{Ö =—y≥*Ë
	`mÆloc
(size); 
	`mem£t
–p, 0, sizê); }

	)

26 
	#DEL
–
p
 ) { 
	`‰ì
((*Ì);Ö = 
NULL
; }

	)

34 
mem‹y_öô
();

35 
mem‹y_√w
–** 
p
, 
size
, * 
memo
 );

36 
mem‹y_√w_dëaû
–** 
p
, 
size
, * 
fûe
, * 
fun˘i⁄
, 
löe
, * 
«me
 );

37 
mem‹y_dñëe
–* 
p
 );

38 
mem‹y_íd
();

39 
mem‹y_¥öt
();

	@myqq.cc

1 
	~"myqq.h
"

3 #i‚de‡
__WIN32__


4 
	$ªad_∑ssw‹d
(*
löïå
 )

6 
ãrmios
 
ﬁd
, 
√w_
;

7 
ƒód
;

9 i‡(
	`tcgë©å
 (
	`fûío
 (
°dout
), &
ﬁd
) != 0)

11 
√w_
 = 
ﬁd
;

12 
√w_
.
c_lÊag
 &~
ECHO
;

13 i‡(
	`tc£èâr
 (
	`fûío
 (
°dout
), 
TCSAFLUSH
, &
√w_
) != 0)

16 
ƒód
 = 
	`sˇnf
 ("%31s", 
löïå
);

18 (Ë
	`tc£èâr
 (
	`fûío
 (
°dout
), 
TCSAFLUSH
, &
ﬁd
);

19  
ƒód
;

20 
	}
}

22 
	$buddy_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, 
time_t
 
t
, * 
msg
 )

24 
	`ch¨cﬁ‹
–
CCOL_LIGHTBLUE
 );

25 
time°r
[12];

26 
msg°r
[64];

27 
tm
 * 
timeöfo
;

29 c⁄° * 
nick
 = 
	`myqq_gë_buddy_«me
–
qq
, 
uid
 );

30 
timeöfo
 = 
	`loˇ…ime
 ( &
t
 );

31 
	`°r·ime
–
time°r
, 12, "%H:%M:%S", 
timeöfo
 );

32 
tmp
[20], *
p
;

33 
	`•rötf
–
tmp
, "%-16d", 
uid
 );

34 
p
 = 
	`°r°r
–
buddy_buf
, 
tmp
 );

35 if–
p
 )

37 
p
 -= 8;

38 if–
p
>=
buddy_buf
 )

40 
 
;

41 
	`ssˇnf
–
p
, "%d", &
 
 );

42 
	`•rötf
–
msg°r
, "\n%d)%s[", 
 
, 
time°r
 );

43 
	`°rˇt
–
msg°r
, 
nick
 );

44 
	`°rˇt
–
msg°r
, "]\n\t" );

45 
	`MSG
("%s", 
	`_TEXT
–
msg°r
 ) );

46 
	`puts
–
	`_TEXT
–
msg
 ) );

47 
RESET_INPUT


52 
	`•rötf
–
msg°r
, "\n%s[", 
time°r
 );

53 
	`°rˇt
–
msg°r
, 
nick
 );

54 
	`°rˇt
–
msg°r
, "]\n\t" );

55 
	`MSG
("%s", 
	`_TEXT
–
msg°r
 ) );

56 
	`puts
–
	`_TEXT
–
msg
 ) );

57 
RESET_INPUT


59 
	}
}

60 
	$qun_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, uöà
öt_uid
, 
time_t
 
t
, * 
msg
 )

62 
	`ch¨cﬁ‹
–
CCOL_REDGREEN
 );

63 
time°r
[12];

64 
msg°r
[64];

65 c⁄° * 
qun_«me
 = 
	`myqq_gë_qun_«me
–
qq
, 
öt_uid
 );

66 c⁄° * 
nick
 = 
	`myqq_gë_qun_membî_«me
–
qq
, 
öt_uid
, 
uid
 );

67 
tm
 * 
timeöfo
;

68 
timeöfo
 = 
	`loˇ…ime
 ( &
t
 );

69 
	`°r·ime
–
time°r
, 12, "%H:%M:%S", 
timeöfo
 );

70 
tmp
[20], *
p
;

71 
	`•rötf
–
tmp
, "%-16d", 
öt_uid
 );

72 
p
 = 
	`°r°r
–
qun_buf
, 
tmp
 );

73 if–
p
 )

75 
p
 -= 8;

76 if–
p
>=
qun_buf
 )

78 
 
;

79 
	`ssˇnf
–
p
, "%d", &
 
 );

80 
	`•rötf
–
msg°r
, "\n%d)%s{", 
 
, 
time°r
 );

81 
	`°rˇt
–
msg°r
, 
qun_«me
 );

82 
	`°rˇt
–
msg°r
, "}[" );

83 
	`°rˇt
–
msg°r
, 
nick
 );

84 
	`°rˇt
–
msg°r
, "]\n\t" );

85 
	`MSG
("%s", 
	`_TEXT
–
msg°r
 ) );

86 
	`puts
–
	`_TEXT
–
msg
 ) );

87 
RESET_INPUT


92 
	`•rötf
–
msg°r
, "\n%s{", 
time°r
 );

93 
	`°rˇt
–
msg°r
, 
qun_«me
 );

94 
	`°rˇt
–
msg°r
, "}[" );

95 
	`°rˇt
–
msg°r
, 
nick
 );

96 
	`°rˇt
–
msg°r
, "]\n\t" );

97 
	`MSG
("%s", 
	`_TEXT
–
msg°r
 ) );

98 
	`puts
–
	`_TEXT
–
msg
 ) );

99 
RESET_INPUT


101 
	}
}

105 
	#FONTCOLOR
 
COLOR_BLACK


	)

106 
	#NUMBERCOLOR
 
COLOR_RED


	)

107 
	#SYSCOL
 4

	)

108 
	#SYSROW
 2

	)

109 
	#FONTCOLOR1
 
COLOR_BLACK


	)

110 
	#FONTCOLOR2
 
COLOR_RED


	)

111 
	grow
, 
	gcﬁ
;

112 
	gfûe_row
, 
	gfûe_cﬁ
;

114 
	$Àn
(
löío
)

116 
löñí
 = 
COLS
 - 1;

118 
löñí
 >0 && 
	`mvöch
(
löío
,Üinelen) == ' ')

119 
löñí
--;

120  
löñí
 + 1;

121 
	}
}

123 
	gMyqq
::
	$Myqq
()

125 if(!
	`öô
())

127 
°©us
=0;

128 !
°©us
)

129 
	`logö
();

132 
	`cur£s_öô
();

133 
°©us
)

135 
comm™d
[256];

136 *
ãmp
=
comm™d
;

137 
	`gë_comm™d
(
ãmp
);

138 
	`∑r£_comm™d
(
comm™d
);

140 
	}
}

141 
boﬁ
 
	gMyqq
::
	$logö
()

143 if(
accou¡
==0)

145 
cout
<<"QQË¥¶Âè∑Ôºö";

146 
cö
>>
accou¡
;

148 if(!
∑ssw‹d
.
	`c_°r
() )

150 
cout
<<"QQÂØÜÁ†ÅÔºö";

151 #ifde‡
__WIN32__


152 
uöt
 
pwi
;

153 
pswd
;

154 
pwi
=0;pwi<=32;pwi++)

156 
pswd
 = 
	`gëch
();

157 if(
pswd
 == '\x0d')

159 
∑ssw‹d
.
	`c_°r
()[
pwi
] ='\0';

162 if(
pswd
 == '\x08')

164 if–
pwi
>0 )Öwi=-1;

165 
	`MSG
("%s",
	`_TEXT
("\nËØ∑ÈáçËæìQQÂØÜÁ†Å:"));

168 
	`¥ötf
("*");

169 
∑ssw‹d
.
	`c_°r
()[
pwi
] =
pswd
;

172 
	`ªad_∑ssw‹d
–
∑ssw‹d
.
	`c_°r
() );

175 
cout
<<
ídl
<<"ÊòØÂê¶ÈöêË∫´ÁôªÈôÜÔºü(y/n)";

176 
cö
>>
öput
;

177 
	`qq˛õ¡_¸óã
–
qq
, 
accou¡
, 
∑ssw‹d
 );

178 
qq
->
mode
 = *
öput
=='y' ? 
QQ_HIDDEN
 : 
QQ_ONLINE
;

179 
	`qq˛õ¡_logö
(
qq
);

180 
	`sˇnf
("%c", 
öput
 );

190 
cout
<<"ÁôªÈôÜ‰∏≠..."<<
ídl
;

191  
qq
->
¥o˚ss
 =
P_LOGGING
 )

192 
	`qq˛õ¡_waô
–
qq
, 1 );

193  
qq
->
¥o˚ss
 =
P_VERIFYING
 )

195 
ãmp
[32];

196 
	`•rötf
(
ãmp
,"%d",
accou¡
);

197 
°rög
 
	`accou¡_°r
(
ãmp
);

198 
°rög
 
	`comm™d
("eog ./verify/");

199 
comm™d
 +="*.png&";

200 
cout
<<
comm™d
.
	`c_°r
();

201 
	`sy°em
(
comm™d
.
	`c_°r
());

202 
cout
<<"ËØ∑ËæìÂÖ•È™åËØÅÁ†ÅÔºàÈ™åËØÅÁ†ÅÁõÆÂΩï‰∏ãÔºâ: ";

203 
	`sˇnf
–"%s", 
öput
 );

204 
	`qq˛õ¡_vîify
–
qq
, *(
uöt
*)
öput
 );

205  
qq
->
¥o˚ss
 =
P_LOGGING
 )

206 
	`qq˛õ¡_waô
–
qq
, 1 );

208 if–
qq
->
¥o˚ss
 !
P_LOGIN
 )

210  
qq
->
¥o˚ss
 )

212 
P_ERROR
:

213 
cout
<<"ÁΩëÁªúÈîôËØØ.\n";

214  
Ál£
;

215 
P_DENIED
:

216 
cout
<<"ÊÇ®ÁöÑQQÈúÄË¶ÅÊøÄÊ¥ª(http://jihuo.qq.com).\n";

217 #ifde‡
__WIN32__


218 
	`ShñlExecuã
(
NULL
,"›í","hâp://jihuo.qq.com/",NULL,NULL,
SW_SHOWNORMAL
);

220  
Ál£
;

221 
P_WRONGPASS
:

222 
	`MSG
("%s",
	`_TEXT
("ÊÇ®ÁöÑÂØÜÁ†ÅÈîôËØØ.\n"));

223  
Ál£
;

225 
cout
<<"now wû»logout..."<<
ídl
;

226 
	`qq˛õ¡_logout
–
qq
 );

227 
	`qq˛õ¡_˛ónup
–
qq
 );

228  
Ál£
;

230 
cout
<<"suc˚ss!"<<
ídl
;

231 
°©us
=1;

232  
åue
;

233 
	}
}

234 
boﬁ
 
	gMyqq
::
	$authí
()

236 if(
åue
)

238 
cout
<<"ÁôªÂΩïÂ§±Ë¥•ÔºÅËØ∑ÈáçÊñ∞ÁôªÂΩï"<<
ídl
;

239  
Ál£
;

242  
åue
;

243 
	}
}

244 
	gMyqq
::
	$wñcome_mesßge
()

246 
cout
<<"Ê¨¢Ëøé‰ΩøÁî® MyQQ2009 beta1 ‰∏≠ÊñáÁâà\n"

251 
	}
}

252 
	gMyqq
::
	$hñp
()

254 
cout
<<"add/a: Ê∑ªÂä†Â•ΩÂèã.ádd+QQÂè∑Á†Å.\n"

270 
	}
}

271 
	gMyqq
::
	$gë_comm™d
(*
comm™d
)

278 
	`move
(
LINES
-1,11);

279 
	`˛π€ﬁ
();

281 
posi
=1;

283 
c
;

284 
i
=0;

287 
c
=
	`gëch
();

288 i‡(
c
 == 27)

291 
	`˛π€ﬁ
();

294 i‡(
c
 == 13)

296 
comm™d_°r
[
COLS
];

297 
n
 = 
	`Àn
(
LINES
-1);

298 
i
;

299 
i
=0;i<
n
;i++)

300 
comm™d_°r
[
i
] = 
	`mvöch
(
LINES
-1,i+1Ë& 
A_CHARTEXT
;

301 
comm™d_°r
[
n
]='\0';

303 
comm™d_°r
[0])

306 
	`∑r£_comm™d
(
comm™d_°r
);

309 
	`£nd_mesßge_to_buddy
();

314 if(
c
 =
KEY_BACKSPACE
)

316 if(
posi
>1)

318 
posi
--;

319 
	`move
(
LINES
-1,
posi
);

320 
	`dñch
();

327 if(
posi
<
COLS
-1)

329 
	`addch
(
c
);

330 
posi
++;

334 
	}
}

335 
	gMyqq
::
	$∑r£_comm™d
(*
comm™d
)

338 if(!
	`°rcmp
(
comm™d
,"ls"))

339 
	`li°_⁄löe_buddõs
();

340 if(!
	`°rcmp
(
comm™d
,"la"))

341 
	`li°_Æl
();

342 if(!
	`°rcmp
(
comm™d
,"lg"))

343 
	`li°_groups
();

344 if(!
	`°rcmp
(
comm™d
,"t"))

345 
	`begö_èlk_to_buddy
();

346 if(!
	`°rcmp
(
comm™d
,"status"))

347 
	`ch™ge_°©us
();

348 if(!
	`°rcmp
(
comm™d
,"s"))

349 
	`£nd_mesßge_to_buddy
();

350 if(!
	`°rcmp
(
comm™d
,"a"))

351 
	`add_buddy
();

352 if(!
	`°rcmp
(
comm™d
,"logout"))

353 
	`logout
();

354 if(!
	`°rcmp
(
comm™d
,"h"))

355 
	`hñp
();

356 if(!
	`°rcmp
(
comm™d
,"exit") || !strcmp(command,"quit"))

357 
	`quô
();

359 
cout
<<"unknow¿comm™d '"<<
comm™d
<<"',Åy≥ 'hñp' f‹ m‹êöf‹m©i⁄"<<
ídl
;

360 
	}
}

361 *
	gMyqq
::
	$gë_⁄löe_buddõs
()

363 
	}
}

364 *
Myqq
::
	$gë_Æl
()

366 
	}
}

367 *
Myqq
::
	$gë_groups
()

369 
	}
}

370 
Myqq
::
	$li°_⁄löe_buddõs
()

372 
cout
<<"li°áŒ buddõ†ex˚±Åhêhiddí o√s."<<
ídl
;

373 
	`myqq_gë_buddy_li°
–
qq
, 
buddy_buf
, 
QUN_BUF_SIZE
, 1 );

374 
cout
<<
buddy_buf
;

376 
	`myqq_gë_qun_membî_li°
–
qq
, 
qun_öt_uid
, 
buddy_buf
, 
QUN_BUF_SIZE
, 1 );

377 
cout
<<
buddy_buf
;

378 
	}
}

379 
	gMyqq
::
	$li°_Æl
()

381 
cout
<<"li°áŒ buddõs"<<
ídl
;

383 
	`myqq_gë_qun_membî_li°
–
qq
, 
qun_öt_uid
, 
buddy_buf
, 
BUDDY_BUF_SIZE
, 0 );

384 
cout
<<
buddy_buf
;

386 
	`myqq_gë_buddy_li°
–
qq
, 
buddy_buf
, 
BUDDY_BUF_SIZE
, 0 );

387 
cout
<<
buddy_buf
;

388 
	}
}

389 
	gMyqq
::
	$li°_groups
()

391 
cout
<<"li°Åhêgroups"<<
ídl
;

392 
	`myqq_gë_qun_li°
–
qq
, 
qun_buf
, 
QUN_BUF_SIZE
 );

393 
cout
<<
qun_buf
;

394 
	}
}

395 
	gMyqq
::
	$begö_èlk_to_buddy
()

426 
	}
}

427 
Myqq
::
	$£nd_mesßge_to_buddy
()

458 
	}
}

459 
Myqq
::
	$ch™ge_°©us
()

468 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_ONLINE
 );

469 
	}
}

470 
	gMyqq
::
	$add_buddy
()

478 
	}
}

479 
Myqq
::
	$logout
()

481 
°©us
 = 0;

482 
	`qq˛õ¡_logout
–
qq
 );

483 
	`qq˛õ¡_˛ónup
–
qq
 );

484 
	`c⁄fig_íd
();

485 
	`DEL
–
qq
 );

486 
	`MSG
("%s",
	`_TEXT
("Á¶ªÂºÄ.\n"));

487 
	`DEL
–
qun_buf
 );

488 
	`DEL
–
buddy_buf
 );

489 
	`DEL
–
¥öt_buf
 );

490 
	`£tcﬁ‹
–
CCOL_NONE
 );

491 
	`mem‹y_íd
();

492 
	}
}

493 
	gMyqq
::
	$quô
()

495 
cout
<<"waôög f‹Éxô..."<<
ídl
;

496 
°©us
 = 0;

497 
	`qq˛õ¡_logout
–
qq
 );

498 
cout
<<"qq˛õ¡Üogout"<<
ídl
;

499 
	`qq˛õ¡_˛ónup
–
qq
 );

500 
cout
<<"qq˛õ¡ cÀ™up"<<
ídl
;

501 
	`c⁄fig_íd
();

502 
cout
<<"c⁄figÉnd..."<<
ídl
;

503 
	`DEL
–
qq
 );

504 
cout
<<"dñ qq "<<
ídl
;

505 
cout
<<"Á¶ªÂºÄ.\n";

506 
	`DEL
–
qun_buf
 );

507 
cout
<<"del groups buffer";

508 
	`DEL
–
buddy_buf
 );

509 
cout
<<"del buddies buffer";

510 
	`DEL
–
¥öt_buf
 );

511 
cout
<<"delÖrint buffer";

512 
	`£tcﬁ‹
–
CCOL_NONE
 );

513 
cout
<<"setcolor ...";

514 
	`mem‹y_íd
();

515 
cout
<<"mem‹yÉnd..."<<
ídl
;

516 
	}
}

517 
	gMyqq
::~
	$Myqq
()

519 
	}
}

520 
boﬁ
 
Myqq
::
	$öô
()

522 
accou¡
 = 0;

523 
∑ssw‹d
 = 
NULL
;

524 
c⁄fig_fûe
 = "~/.gmyqq/gmyqqrc.xml";

525 
cmdid
, 
œ°cmd
=-1, 
Àn
;

526 
cmd
[16], 
¨g
[1008];

527 
	`§™d
(
	`time
(
NULL
));

529 
	`c⁄fig_öô
();

530 
	`checkAndSëC⁄fig
();

531 
	`qqsockë_öô
();

532 
	`NEW
–
qun_buf
, 
QUN_BUF_SIZE
, );

533 
	`NEW
–
buddy_buf
, 
BUDDY_BUF_SIZE
 ,);

534 
	`NEW
–
¥öt_buf
, 
PRINT_BUF_SIZE
, );

535 
	`NEW
–
qq
, (
qq˛õ¡
), qqclient);

537 if–!
qun_buf
 || !
buddy_buf
 || !
¥öt_buf
 || !
qq
 )

539 
cout
<<"noÉnough memory.";

540  
Ál£
;

542  
åue
;

543 
	}
}

545 
	gMyqq
::
	$cur£s_öô
()

547 
	`öôs¸
();

548 if(
	`has_cﬁ‹s
())

550 
	`°¨t_cﬁ‹
();

551 
	`öô_∑ú
(1, 
FONTCOLOR
, 
COLOR_WHITE
);

552 
	`©å⁄
(
	`COLOR_PAIR
(1));

553 
	`©å⁄
(
A_BOLD
);

555 
	`cbªak
();

556 
	`n⁄l
();

557 
	`n€cho
();

558 
	`öåÊush
(
°ds¸
, 
FALSE
);

559 
	`key∑d
(
°ds¸
, 
TRUE
);

563 
	`£t_°©usb¨
(
NULL
);

564 
cﬁ
=
SYSCOL
;

565 
	}
}

566 
	gMyqq
::
	$£t_°©usb¨
(*
°r
)

568 
mesßge
[
COLS
];

569 
time_t
 
t
 = 
	`time
(
NULL
);

570 
tm
 *
loˇl
 = 
	`loˇ…ime
(&
t
);

571 
	`mv¥ötw
(
LINES
-
SYSROW
,1,"[%d:%d] [%d]",
loˇl
->
tm_hour
,loˇl->
tm_mö
,
accou¡
);

572 
	`mv¥ötw
(
LINES
-1,0,"[(status)]");

574 
	}
}

576 
	$myqq
(
¨gc
, ** 
¨gv
)

579 
cmdid
, 
œ°cmd
=-1, 
Àn
;

580 
cmd
[16], 
¨g
[1008];

581 
	`§™d
(
	`time
(
NULL
));

583 
	`c⁄fig_öô
();

584 
	`qqsockë_öô
();

585 
	`NEW
–
qun_buf
, 
QUN_BUF_SIZE
, );

586 
	`NEW
–
buddy_buf
, 
BUDDY_BUF_SIZE
 ,);

587 
	`NEW
–
¥öt_buf
, 
PRINT_BUF_SIZE
, );

588 
	`NEW
–
qq
, (
qq˛õ¡
), qqclient);

590 if–!
qun_buf
 || !
buddy_buf
 || !
¥öt_buf
 || !
qq
 )

592 
	`MSG
("%s","noÉnough memory.");

596 
œb
:if(
¨gc
<3)

598 
uöt
 
uid
;

600 
∑ssw‹d
[32];

601 
	`MSG
("%s",
	`_TEXT
("QQË¥¶Âè∑:"));

602 
	`sˇnf
("%u", &
uid
 );

603 
	`MSG
("%s",
	`_TEXT
("QQÂØÜÁ†Å:"));

604 #ifde‡
__WIN32__


605 
uöt
 
pwi
;

606 
pswd
;

607 
pwi
=0;pwi<=32;pwi++)

609 
pswd
 = 
	`gëch
();

610 if(
pswd
 == '\x0d')

612 
∑ssw‹d
[
pwi
] ='\0';

615 if(
pswd
 == '\x08')

617 if–
pwi
>0 )Öwi=-1;

618 
	`MSG
("%s",
	`_TEXT
("\nËØ∑ÈáçËæìQQÂØÜÁ†Å:"));

621 
	`¥ötf
("*");

622 
∑ssw‹d
[
pwi
] =
pswd
;

625 
	`ªad_∑ssw‹d
–
∑ssw‹d
 );

627 
	`MSG
("%s",
	`_TEXT
("\nÊòØÂê¶ÈöêË∫´ÁôªÈôÜÔºü(y/n)"));

628 
	`sˇnf
("%s", 
öput
 );

629 
	`qq˛õ¡_¸óã
–
qq
, 
uid
, 
∑ssw‹d
 );

630 
qq
->
mode
 = *
öput
=='y' ? 
QQ_HIDDEN
 : 
QQ_ONLINE
;

631 
	`qq˛õ¡_logö
–
qq
 );

632 
	`sˇnf
("%c", 
öput
 );

636 
	`qq˛õ¡_¸óã
–
qq
, 
	`©oi
(
¨gv
[1]),árgv[2] );

637 if–
¨gc
 > 3 )

638 
qq
->
mode
 = 
	`©oi
(
¨gv
[3])!=0 ? 
QQ_HIDDEN
 : 
QQ_ONLINE
;

639 
	`qq˛õ¡_logö
–
qq
 );

641 
	`MSG
("%s",
	`_TEXT
("ÁôªÈôÜ‰∏≠...\n"));

642  
qq
->
¥o˚ss
 =
P_LOGGING
 )

643 
	`qq˛õ¡_waô
–
qq
, 1 );

644  
qq
->
¥o˚ss
 =
P_VERIFYING
 )

651 
	`MSG
("%s",
	`_TEXT
("ËØ∑ËæìÂÖ•È™åËØÅÁ†ÅÔºàÈ™åËØÅÁ†ÅÁõÆÂΩï‰∏ãÔºâ: "));

652 
	`sˇnf
–"%s", 
öput
 );

653 
	`qq˛õ¡_vîify
–
qq
, *(
uöt
*)
öput
 );

654  
qq
->
¥o˚ss
 =
P_LOGGING
 )

655 
	`qq˛õ¡_waô
–
qq
, 1 );

657 if–
qq
->
¥o˚ss
 !
P_LOGIN
 )

659  
qq
->
¥o˚ss
 )

661 
P_ERROR
:

662 
	`MSG
("%s",
	`_TEXT
("ÁΩëÁªúÈîôËØØ.\n"));

663 
œb
;

664 
P_DENIED
:

665 
	`MSG
("%s",
	`_TEXT
("ÊÇ®ÁöÑQQÈúÄË¶ÅÊøÄÊ¥ª(http://jihuo.qq.com).\n"));

666 #ifde‡
__WIN32__


667 
	`ShñlExecuã
(
NULL
,"›í","hâp://jihuo.qq.com/",NULL,NULL,
SW_SHOWNORMAL
);

669 
œb
;

670 
P_WRONGPASS
:

671 
	`MSG
("%s",
	`_TEXT
("ÊÇ®ÁöÑÂØÜÁ†ÅÈîôËØØ.\n"));

672 
œb
;

674 
	`qq˛õ¡_logout
–
qq
 );

675 
	`qq˛õ¡_˛ónup
–
qq
 );

679 
	`MSG
("%s", 
	`_TEXT
(
hñp_msg
) );

680  
qq
->
¥o˚ss
 !
P_INIT
 )

682 
RESET_INPUT


683 
Àn
 = 
	`_gëlöe
–
öput
, 1023 );

684 if–
Àn
 < 1 ) ;

685 * 
•
 = 
	`°rchr
–
öput
, ' ' );

686 if–
•
 )

688 *
•
 = '\0';

689 
	`°∫˝y
–
cmd
, 
öput
, 16-1 );

690 
	`°∫˝y
–
¨g
, 
•
+1, 1008-1 );

691 *
•
 = ' ';

695 
	`°∫˝y
–
cmd
, 
öput
, 16-1 );

696 
¨g
[0] = '\0';

698 
√ed_ª£t
 = 1;

699  
cmdid
=0; cmdid<(
comm™ds
)/16; cmdid++ )

700 if–
	`°rcmp
–
comm™ds
[
cmdid
], 
cmd
 )==0 )

702 
SELECT_CMD
:

703  
cmdid
 )

705 
CMD_TO
:

706 
CMD_TO2
:

708 if–
íãr
 )

710 
	`MSG
("%s",
	`_TEXT
("ÊÇ®Âú®‰∏Ä‰∏™Áæ§‰∏≠, ‰Ω†ÂèØ‰ª•Âíå‰ªª‰Ωï‰∫∫Ë∞àËØù.\n"));

713 
n
 = 
	`©oi
–
¨g
 );

714 if–
n
 < 0xFFFF )

716 *
p
;

717 
p
 = 
	`skù_löe
–
buddy_buf
, 
n
-1 );

718 if–
p
 )

720 
	`ssˇnf
–
p
, "%u%u", &
n
, &
to_uid
 );

721 
	`•rötf
–
¥öt_buf
, "ÊÇ®Â∞ÜÂíå %†ËøõË°åË∞àËØù\n", 
	`myqq_gë_buddy_«me
(
qq
, 
to_uid
) );

722 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

728 
to_uid
 = 
n
;

729 
	`•rötf
–
¥öt_buf
, "ÊÇ®Â∞ÜÂíå %†ËøõË°åË∞àËØù\n", 
	`myqq_gë_buddy_«me
(
qq
, 
to_uid
) );

730 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

733 
	`•rötf
–
¥öt_buf
, "to: %†Ê≤°ÊúâÊâæÂà∞.\n", 
¨g
 );

734 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

737 
CMD_SAY
:

738 
CMD_SAY2
:

740 if–
íãr
 )

742 #ifdef 
__WIN32__


743 if–
	`myqq_£nd_im_to_qun
–
qq
, 
qun_öt_uid
, 
	`to_utf8
(
¨g
), 1 ) < 0 )

745 if–
	`myqq_£nd_im_to_qun
–
qq
, 
qun_öt_uid
, 
¨g
, 1 ) < 0 )

748 
	`MSG
("%s",
	`_TEXT
("Ë∂ÖÊó∂: ÊÇ®ÁöÑÊ∂àÊÅØÂèëÈÄÅÂ§±Ë¥•.\n"));

753 if–
to_uid
 == 0 )

755 
	`MSG
("%s",
	`_TEXT
("say: ÂíåË∞ÅË∞àËØù?\n"));

758 #ifdef 
__WIN32__


759 if–
	`myqq_£nd_im_to_buddy
–
qq
, 
to_uid
, 
	`to_utf8
(
¨g
), 1 ) < 0 )

761 if–
	`myqq_£nd_im_to_buddy
–
qq
, 
to_uid
, 
¨g
, 1 ) < 0 )

764 
	`MSG
("%s",
	`_TEXT
("Ë∂ÖÊó∂: ÊÇ®ÁöÑÊ∂àÊÅØÂèëÈÄÅÂ§±Ë¥•.\n"));

769 
CMD_EXIT
:

770 
CMD_EXIT2
:

772 
íd
;

773 
CMD_HELP
:

774 
	`MSG
("%s", 
	`_TEXT
(
hñp_msg
) );

776 
CMD_STATUS
:

777 if–
	`°rcmp
–
¨g
, "away") == 0 )

778 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_AWAY
 );

779 if–
	`°rcmp
–
¨g
, "online") == 0 )

780 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_ONLINE
 );

781 if–
	`°rcmp
–
¨g
, "hidden") == 0 )

782 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_HIDDEN
 );

783 if–
	`°rcmp
–
¨g
, "killme") == 0 )

784 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_KILLME
 );

785 if–
	`°rcmp
–
¨g
, "busy") == 0 )

786 
	`qq˛õ¡_ch™ge_°©us
–
qq
, 
QQ_BUSY
 );

789 
	`MSG
("%s",
	`_TEXT
("Êú™Áü•Áä∂ÊÄÅ\n") );

792 
CMD_ENTER
:

793 
CMD_ENTER2
:

795 
n
 = 
	`©oi
–
¨g
 );

796 if–
n
 < 0xFFFF )

798 *
p
;

799 
p
 = 
	`skù_löe
–
qun_buf
, 
n
-1 );

800 if–
p
 )

802 
	`ssˇnf
–
p
, "%u%u", &
n
, &
qun_öt_uid
 );

803 
	`•rötf
–
¥öt_buf
, "ÊÇ®Âú® %†Áæ§‰∏≠\n", 
	`myqq_gë_qun_«me
–
qq
, 
qun_öt_uid
) );

804 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

805 
íãr
 = 1;

811 
qun_öt_uid
 = 
n
;

812 
	`•rötf
–
¥öt_buf
, "ÊÇ®Âú® %†Áæ§‰∏≠\n", 
	`myqq_gë_qun_«me
–
qq
, 
qun_öt_uid
) );

813 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

814 
íãr
 = 1;

817 
	`•rötf
–
¥öt_buf
, "íãr: %†Ê≤°ÊúâÊâæÂà∞.\n", 
¨g
 );

818 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

821 
CMD_LEAVE
:

822 
CMD_LEAVE2
:

823 if–!
íãr
 )

825 
	`MSG
("%s",
	`_TEXT
("ÊÇ®Ê≤°ÊúâËøõÂÖ•Áæ§.\n"));

828 
íãr
 = 0;

829 
	`•rötf
–
¥öt_buf
, "Á¶ªÂºÄ %s. ÊÇ®Â∞ÜÂíå %s ËøõË°åË∞àËØù\n",

830 
	`myqq_gë_qun_«me
–
qq
, 
qun_öt_uid
 ), 
	`myqq_gë_buddy_«me
–qq, 
to_uid
 ) );

831 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

833 
CMD_QUN
:

834 
CMD_QUN2
:

836 
	`myqq_gë_qun_li°
–
qq
, 
qun_buf
, 
QUN_BUF_SIZE
 );

837 
	`MSG
("%s", 
	`_TEXT
–
qun_buf
 ) );

840 
CMD_UPDATE
:

841 
CMD_UPDATE2
:

842 
	`qun_upd©e_Æl
–
qq
 );

843 
	`buddy_upd©e_li°
–
qq
 );

844 
	`group_upd©e_li°
–
qq
 );

845 
	`MSG
("%s",
	`_TEXT
("Êõ¥Êñ∞‰∏≠...\n"));

846 if–
	`qq˛õ¡_waô
–
qq
, 20 )<0 )

848 
	`MSG
("%s",
	`_TEXT
("Êõ¥Êñ∞Ë∂ÖÊó∂.\n"));

851 
CMD_INFO
:

852 
CMD_INFO2
:

854 if–!
íãr
 )

856 if–
to_uid
==0 )

858 
	`MSG
("%s",
	`_TEXT
("ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™Â•ΩÂèã.\n"));

862 * 
buf
 = (*)
	`mÆloc
(1024*4);

863 if–
	`myqq_gë_buddy_öfo
–
qq
, 
to_uid
, 
buf
, 1024*4 ) < 0 )

865 
	`•rötf
–
¥öt_buf
, "Ëé∑Âèñ %†ÁöÑ‰ø°ÊÅØÂ§±Ë¥•\n", 
	`myqq_gë_buddy_«me
–
qq
, 
to_uid
 ) );

866 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

870 
	`MSG
("%s", 
	`_TEXT
–
buf
 ) );

872 
	`‰ì
(
buf
);

877 * 
buf
 = (*)
	`mÆloc
(1024*4);

878 if–
	`myqq_gë_qun_öfo
–
qq
, 
qun_öt_uid
, 
buf
, 1024*4 ) < 0 )

880 
	`•rötf
–
¥öt_buf
, "Ëé∑Âèñ %†ÁöÑ‰ø°ÊÅØÂ§±Ë¥•\n", 
	`myqq_gë_qun_«me
–
qq
, 
qun_öt_uid
 ) );

881 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

885 
	`MSG
–"%s",
	`_TEXT
–
buf
 ) );

887 
	`‰ì
(
buf
);

891 
CMD_VIEW
:

892 
CMD_VIEW2
:

893 if–
íãr
 )

895 
	`myqq_gë_qun_membî_li°
–
qq
, 
qun_öt_uid
, 
buddy_buf
,

896 
BUDDY_BUF_SIZE
, 0 );

897 
	`MSG
("%s", 
	`_TEXT
–
buddy_buf
 ) );

901 
	`myqq_gë_buddy_li°
–
qq
, 
buddy_buf
, 
BUDDY_BUF_SIZE
, 0 );

902 
	`MSG
("%s", 
	`_TEXT
–
buddy_buf
 ) );

905 
CMD_WHO
:

906 
CMD_WHO2
:

907 if–
íãr
 )

909 
	`myqq_gë_qun_membî_li°
–
qq
, 
qun_öt_uid
, 
buddy_buf
,

910 
QUN_BUF_SIZE
, 1 );

911 
	`MSG
("%s", 
	`_TEXT
–
buddy_buf
 ) );

915 
	`myqq_gë_buddy_li°
–
qq
, 
buddy_buf
, 
QUN_BUF_SIZE
, 1 );

916 
	`MSG
("%s", 
	`_TEXT
–
buddy_buf
 ) );

919 
CMD_CHANGE
:

920 
CMD_CHANGE2
:

921 
	`qq˛õ¡_logout
–
qq
 );

922 
	`qq˛õ¡_˛ónup
–
qq
 );

923 
	`myqq
–0, 
NULL
 );

924 
íd
;

925 
CMD_VERIFY
:

926 
CMD_VERIFY2
:

927 
	`qq˛õ¡_vîify
–
qq
, *((
uöt
*)
¨g
) );

929 
CMD_ADD
:

930 
CMD_ADD2
:

932 
	`•rötf
–
¥öt_buf
, "Ê∑ªÂä†[%d]ÁöÑÈôÑË®ÄÔºàÈªòËÆ§Á©∫ÔºâÔºö", 
	`©oi
(
¨g
) );

933 
	`MSG
("%s", 
	`_TEXT
(
¥öt_buf
) );

934 
	`_gëlöe
–
öput
, 50 );

935 
	`qq˛õ¡_add
–
qq
, 
	`©oi
(
¨g
), 
öput
 );

938 
CMD_DEL
:

939 
	`qq˛õ¡_dñ
–
qq
, 
	`©oi
(
¨g
) );

943 if–
œ°cmd
 && *
öput
 )

945 
cmdid
 = 
œ°cmd
;

946 
	`°∫˝y
–
¨g
, 
öput
, 1008-1 );

947 *
öput
 = 0;

948 
SELECT_CMD
;

952 
œ°cmd
 = 
cmdid
;

954 
íd
:

955 
	`qq˛õ¡_logout
–
qq
 );

956 
	`qq˛õ¡_˛ónup
–
qq
 );

957 
	`c⁄fig_íd
();

958 
	`DEL
–
qq
 );

959 
	`MSG
("%s",
	`_TEXT
("Á¶ªÂºÄ.\n"));

960 
	`DEL
–
qun_buf
 );

961 
	`DEL
–
buddy_buf
 );

962 
	`DEL
–
¥öt_buf
 );

963 
	`£tcﬁ‹
–
CCOL_NONE
 );

964 
	`mem‹y_íd
();

966 
	}
}

	@myqq.h

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~<time.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<io°ªam
>

28 #ifde‡
__WIN32__


29 
	~<c⁄io.h
>

30 
	~<wösock.h
>

31 
	~<wööë.h
>

32 
	~<wödows.h
>

35 
	~<ãrmios.h
>

36 
	~<sys/sockë.h
>

37 
	~<¨∑/öë.h
>

38 
	~<√tdb.h
>

40 
	~<cur£s.h
>

41 
	~<°rög
>

42 
	~<time.h
>

47 
	~"qq˛õ¡.h
"

48 
	~"buddy.h
"

49 
	~"qun.h
"

50 
	~"group.h
"

51 
	~"mem‹y.h
"

52 
	~"utf8.h
"

53 
	~"c⁄fig.h
"

54 
	~"qqsockë.h
"

57 
usög
 
«me•a˚
 
°d
;

59 
	#MSG
 
√ed_ª£t
 = 1; 
	`£tcﬁ‹
–
cﬁ‹_ödex
 ); 
¥ötf


	)

61 
	#QUN_BUF_SIZE
 80*100

	)

62 
	#BUDDY_BUF_SIZE
 80*500

	)

63 
	#PRINT_BUF_SIZE
 80*500*3

	)

66 * 
	gqun_buf
, *
	gbuddy_buf
, *
	g¥öt_buf
;

67 
uöt
 
	gto_uid
 = 0;

68 
uöt
 
	gqun_öt_uid
;

69 
	göput
[1024];

70 
	gíãr
 = 0;

71 
qq˛õ¡
* 
	gqq
;

72 
	g√ed_ª£t
;

75 
	mCMD_EXIT
 = 0, 
	mCMD_EXIT2
,

76 
	mCMD_SAY
, 
	mCMD_SAY2
,

77 
	mCMD_TO
, 
	mCMD_TO2
,

78 
	mCMD_HELP
,

79 
	mCMD_STATUS
,

80 
	mCMD_ENTER
, 
	mCMD_ENTER2
,

81 
	mCMD_LEAVE
, 
	mCMD_LEAVE2
,

82 
	mCMD_WHO
, 
	mCMD_WHO2
,

83 
	mCMD_VIEW
, 
	mCMD_VIEW2
,

84 
	mCMD_QUN
, 
	mCMD_QUN2
,

85 
	mCMD_INFO
, 
	mCMD_INFO2
,

86 
	mCMD_UPDATE
, 
	mCMD_UPDATE2
,

87 
	mCMD_CHANGE
, 
	mCMD_CHANGE2
,

88 
	mCMD_TEST
,

89 
	mCMD_VERIFY
, 
	mCMD_VERIFY2
,

90 
	mCMD_ADD
, 
	mCMD_ADD2
,

91 
	mCMD_DEL


93 
	gcomm™ds
[][16]=

114 
	ghñp_msg
[]=

135 #ifde‡
__WIN32__


136 
	#CCOL_GREEN
 
FOREGROUND_GREEN


	)

137 
	#CCOL_LIGHTBLUE
 
FOREGROUND_BLUE
 | 
FOREGROUND_GREEN


	)

138 
	#CCOL_REDGREEN
 
FOREGROUND_RED
 | 
FOREGROUND_GREEN


	)

139 
	#CCOL_NONE
 
FOREGROUND_RED
 | 
FOREGROUND_GREEN
 | 
FOREGROUND_BLUE


	)

140 
	gcﬁ‹_ödex
 = 
CCOL_NONE
;

141 
	$ch¨cﬁ‹
–
cﬁ
 )

143 
cﬁ‹_ödex
 = 
cﬁ
;

144 
	}
}

145 
	$£tcﬁ‹
–
cﬁ
 )

147 
	`SëC⁄sﬁeTextAâribuã
(
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
),
FOREGROUND_INTENSITY
 | 
cﬁ
);

148 
	}
}

151 
	#CCOL_NONE
 "\033[0m"

	)

152 
	#CCOL_BLACK
 "\033[0;30m"

	)

153 
	#CCOL_DARKGRAY
 "\033[1;30m"

	)

154 
	#CCOL_BLUE
 "\033[0;34m"

	)

155 
	#CCOL_LIGHTBLUE
 "\033[1;34m"

	)

156 
	#CCOL_GREEN
 "\033[0;32m"

	)

157 
	#CCOL_LIGHTGREEN
 "\033[1;32m"

	)

158 
	#CCOL_CYAN
 "\033[0;36m"

	)

159 
	#CCOL_LIGHTCYAN
 "\033[1;36m"

	)

160 
	#CCOL_RED
 "\033[0;31m"

	)

161 
	#CCOL_LIGHTRED
 "\033[1;31m"

	)

162 
	#CCOL_PURPLE
 "\033[0;35m"

	)

163 
	#CCOL_LIGHTPURPLE
 "\033[1;35m"

	)

164 
	#CCOL_LIGHTBROWN
 "\033[0;33m"

	)

165 
	#CCOL_YELLOW
 "\033[1;33m"

	)

166 
	#CCOL_LIGHTGRAY
 "\033[0;37m"

	)

167 
	#CCOL_WHITE
 "\033[1;37m"

	)

168 
	#CCOL_REDGREEN
 
CCOL_YELLOW


	)

170 c⁄° * 
	gcﬁ‹_ödex
 = 
CCOL_NONE
;

171 
	$ch¨cﬁ‹
–c⁄° * 
cﬁ
 )

173 
cﬁ‹_ödex
 = (*)
cﬁ
;

174 
	}
}

175 
	$£tcﬁ‹
–c⁄° * 
cﬁ
 )

177 
	`¥ötf
("%s", 
cﬁ
 );

178 
	}
}

183 
	#RESET_INPUT
 \

184 if–
√ed_ª£t
 )\

185 { 
	`ch¨cﬁ‹
–
CCOL_NONE
 );\

186 if–
íãr
 ){ \

187 
	`MSG
("I¿{%s}> ", 
	`_TEXT
–
	`myqq_gë_qun_«me
–
qq
, 
qun_öt_uid
 ) ) ); \

189 
	`MSG
("Tÿ[%s]> ", 
	`_TEXT
–
	`myqq_gë_buddy_«me
–
qq
, 
to_uid
 ) ) );} \

190 
	`fÊush
–
°dout
 ); \

191 
√ed_ª£t
 = 0;\

192 }

	)

195 #ifde‡
__WIN32__


196 
	#_TEXT
 
to_gb_f‹˚


	)

197 * 
	$to_gb_f‹˚
–* 
s
 )

200 
	`utf8_to_gb
–
s
, 
¥öt_buf
, 
PRINT_BUF_SIZE
-1 );

201  
¥öt_buf
;

202 
	}
}

203 * 
	$to_utf8
–* 
s
 )

206 
	`gb_to_utf8
–
s
, 
¥öt_buf
, 
PRINT_BUF_SIZE
-1 );

207  
¥öt_buf
;

208 
	}
}

211 
	#_TEXT


	)

218 
	$_gëlöe
(*
s
, 
lim
)

220 *
t
;

221 
c
;

223 
t
 = 
s
;

224 --
lim
>1 && (
c
=
	`gëch¨
()Ë!
EOF
 && c != '\n')

225 *
s
++ = 
c
;

226 *
s
 = '\0';

227  
s
 - 
t
;

228 
	}
}

231 c⁄° * 
	$mode_°rög
–
mode
 )

233  
mode
 )

235 
QQ_ONLINE
:

237 
QQ_AWAY
:

239 
QQ_BUSY
:

241 
QQ_OFFLINE
:

243 
QQ_HIDDEN
:

245 
QQ_KILLME
:

247 
QQ_QUIET
:

251 
	}
}

252 * 
	$skù_löe
–* 
p
, 
 
 )

254  *
p
 && 
 
-- )

256 
p
 ++;

257  *
p
 && *p!='\n' )Ö++;

259  
p
;

260 
	}
}

262 c⁄° * 
	$myqq_gë_buddy_«me
–
qq˛õ¡
* 
qq
, 
uöt
 
uid
 )

264 
tmp
[16];

265 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
uid
, 0 );

266 if–
b
 )

267  
b
->
nick«me
;

268 if–
uid
 == 10000 )

270 if–
uid
 != 0 )

272 
	`•rötf
–
tmp
, "%u" , 
uid
 );

273  
tmp
;

276 
	}
}

277 c⁄° * 
	$myqq_gë_qun_«me
–
qq˛õ¡
* 
qq
, 
uöt
 
uid
 )

279 
tmp
[16];

280 
qqqun
* 
q
 = 
	`qun_gë
–
qq
, 
uid
, 0 );

281 if–
q
 )

282  
q
->
«me
;

283 if–
uid
 != 0 )

285 
	`•rötf
–
tmp
, "%u" , 
uid
 );

286  
tmp
;

289 
	}
}

290 c⁄° * 
	$myqq_gë_qun_membî_«me
–
qq˛õ¡
* 
qq
, 
uöt
 
öt_uid
, uöà
uid
 )

292 
tmp
[16];

293 
qqqun
* 
q
 = 
	`qun_gë
–
qq
, 
öt_uid
, 0 );

294 if–
q
 )

296 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, 
uid
, 0 );

297 if–
m
 )

298  
m
->
nick«me
;

299 if–
uid
 != 0 )

301 
	`•rötf
–
tmp
, "%u" , 
uid
 );

302  
tmp
;

307 
	}
}

308 
	$myqq_£nd_im_to_qun
–
qq˛õ¡
* 
qq
, 
uöt
 
öt_uid
, * 
msg
, 
waô
 )

310 
	`qun_£nd_mesßge
–
qq
, 
öt_uid
, 
msg
 );

311 if–
waô
 )

313 if–
	`qq˛õ¡_waô
–
qq
, 15 ) < 0 )

317 
	}
}

318 
	$myqq_£nd_im_to_buddy
–
qq˛õ¡
* 
qq
, 
uöt
 
öt_uid
, * 
msg
, 
waô
 )

320 
	`buddy_£nd_mesßge
–
qq
, 
öt_uid
, 
msg
 );

321 if–
waô
 )

323 if–
	`qq˛õ¡_waô
–
qq
, 15 ) < 0 )

327 
	}
}

328 
	$myqq_gë_buddy_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
uid
, * 
buf
, 
size
 )

330 
qqbuddy
 *
b
 = 
	`buddy_gë
–
qq
, 
uid
, 0 );

331 if–
size
 < 256 )

333 if–
b
 =
NULL
 )

335 
Àn
, 
ù
 = 
	`ht⁄l
(
b
->ip);

336 
Àn
 = 
	`•rötf
–
buf
, "Â•ΩÂèãÊòµÁß∞\t%-32s\n"

344 
b
->
nick«me
, b->
numbî
, 
	`öë_¡ﬂ
–*(
ö_addr
*)&
ù
 ), b->
p‹t
, b->
Á˚
, b->
age
,

345 (
b
->
£x
==0x00)?"MÆe": (b->£x==0x01)?"FemÆe":"A£xuÆ", 
	`mode_°rög
(b->
°©us
) );

346  
Àn
;

347 
	}
}

352 * 
	$utû_esˇ≥
–* 
°r
 )

354 * 
ch
;

355 
ch
 = (*)
°r
;

356  *
ch
 )

358 if–*
ch
 < 0x80 )

360 if–!
	`i•röt
(*
ch
) )

361 *
ch
 = ' ';

362 
ch
 ++;

366 
ch
 +=2;

369  
°r
;

370 
	}
}

378 
	$myqq_gë_buddy_li°
–
qq˛õ¡
* 
qq
, * 
buf
, 
size
, 
⁄löe
 )

380 
i
, 
Àn
 = 0;

382 
buf
[0] = 0;

383 
	`±hªad_muãx_lock
–&
qq
->
buddy_li°
.
muãx
 );

384 
 
 = 1;

385  
i
=0; i<
qq
->
buddy_li°
.
cou¡
; i++ )

387 
qqbuddy
 * 
b
 = (qqbuddy*)
qq
->
buddy_li°
.
ôems
[
i
];

388 if–
⁄löe
 && 
b
->
°©us
 =
QQ_OFFLINE
 ) ;

389 
Àn
 = 
	`•rötf
–
buf
, "%s%-8d%-16d%-16s%-16.64s\n", buf, 
 
 ++, 
b
->
numbî
,

390 
	`mode_°rög
–(Ë
b
->
°©us
 ), 
	`utû_esˇ≥
–b->
nick«me
 ) );

391 if–
Àn
 + 80 > 
size
 ) ;

393 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

394  
Àn
;

395 
	}
}

403 
	$myqq_gë_qun_li°
–
qq˛õ¡
* 
qq
, * 
buf
, 
size
 )

405 
i
, 
Àn
 = 0, 
 
=1;

407 
buf
[0] = 0;

408 
	`±hªad_muãx_lock
–&
qq
->
qun_li°
.
muãx
 );

409  
i
=0; i<
qq
->
qun_li°
.
cou¡
; i++ )

411 
qqqun
 * 
q
 = (qqqu¿*)
qq
->
qun_li°
.
ôems
[
i
];

412 
Àn
 = 
	`•rötf
–
buf
, "%s%-8d%-16d%-16d%-16.64s\n", buf, 
 
 ++, 
q
->
numbî
,

413 
q
->
ext_numbî
, 
	`utû_esˇ≥
–q->
«me
 ) );

414 if–
Àn
 + 80 > 
size
 ) ;

416 
	`±hªad_muãx_u∆ock
–&
qq
->
qun_li°
.
muãx
 );

417  
Àn
;

418 
	}
}

426 
	$myqq_gë_qun_membî_li°
–
qq˛õ¡
* 
qq
, 
uöt
 
öt_uid
, * 
buf
, 
size
, 
⁄löe
 )

428 
qqqun
 * 
q
 = 
	`qun_gë
–
qq
, 
öt_uid
, 0 );

429 if–!
q
 ) 0;

431 
i
, 
Àn
 = 0, 
 
 = 1;

432 
buf
[0] = 0;

433 
	`±hªad_muãx_lock
–&
q
->
membî_li°
.
muãx
 );

434  
i
=0; i<
q
->
membî_li°
.
cou¡
; i++ )

436 
qunmembî
 * 
m
 = (qunmembî *)
q
->
membî_li°
.
ôems
[
i
];

437 if–
⁄löe
 && 
m
->
°©us
 =
QQ_OFFLINE
 ) ;

438 
Àn
 = 
	`•rötf
–
buf
, "%s%-8d%-16d%-16s%-16.64s\n", buf, 
 
++, 
m
->
numbî
,

439 (
m
->
rﬁe
&1)?"Admö":"Fñlow", 
	`utû_esˇ≥
–m->
nick«me
 ) );

440 if–
Àn
 + 80 > 
size
 )

443 
	`±hªad_muãx_u∆ock
–&
q
->
membî_li°
.
muãx
 );

444  
Àn
;

445 
	}
}

450 
	$myqq_gë_qun_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
öt_uid
, * 
buf
, 
size
 )

453 
ˇã_°r
[4][10] = {"Classmate", "Friend", "Workmate", "Other" };

454 
qqqun
 *
q
 = 
	`qun_gë
–
qq
, 
öt_uid
, 0 );

455 if–!
q
 ) 0;

456 
Àn
;

457 if–
size
 < 256 )

460 if–
q
 =
NULL
 )

462 
Àn
 = 
	`•rötf
–
buf
, "ÂêçÁß∞\t\t%-32s\n"

472 
q
->
«me
, q->
numbî
, q->
ext_numbî
, (q->
ty≥
==0x01)?"Normal":"Special",

473 (
q
->
auth_ty≥
==0x01)?"No": (q->auth_type==0x02)?"Yes":

474 (
q
->
auth_ty≥
==0x03)?"RejectAll":"Unknown",

475 
q
->
ˇãg‹y
 > 3 ? 
ˇã_°r
[3] : cate_str[()q->category],

476 
q
->
ow√r
, q->
membî_li°
.
cou¡
, q->
öåo
, q->
™n
 );

477  
Àn
;

478 
	}
}

568 #i‚de‡
__WIN32__


573 ˛as†
	cMyqq


575 
	mpublic
:

576 
Myqq
();

577 ~
Myqq
();

578 
	m¥Ÿe˘ed
:

579 
boﬁ
 
logö
();

580 
wñcome_mesßge
();

581 
hñp
();

582 
boﬁ
 
authí
();

583 
gë_comm™d
(*);

584 
∑r£_comm™d
(*);

586 
boﬁ
 
öô
();

587 
cur£s_öô
();

588 
£t_°©usb¨
(*);

591 
checkAndSëC⁄fig
();

592 
öô_fûe
();

593 
ßve_fûe
();

595 *
gë_⁄löe_buddõs
();

596 *
gë_Æl
();

597 *
gë_groups
();

598 
li°_⁄löe_buddõs
();

599 
li°_Æl
();

600 
li°_groups
();

601 
begö_èlk_to_buddy
();

602 
£nd_mesßge_to_buddy
();

603 
ch™ge_°©us
();

604 
add_buddy
();

605 
logout
();

606 
boﬁ
 
£nd_mesßge
();

607 
quô
();

608 
	m¥iv©e
:

610 
uöt
 
accou¡
;

611 
°rög
 
	m∑ssw‹d
;

612 
	m°©us
;

613 
°rög
 
	mc⁄fig_fûe
;

	@packetmgr.c

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<time.h
>

18 #ifde‡
__WIN32__


19 
	~<wösock.h
>

20 
	~<wööë.h
>

22 
	~<sys/sockë.h
>

23 
	~<¨∑/öë.h
>

24 
	~<√tdb.h
>

27 
	~"qqdef.h
"

28 
	~"mem‹y.h
"

29 
	~"debug.h
"

30 
	~"qq˛õ¡.h
"

31 
	~"qq∑ckë.h
"

32 
	~"qqsockë.h
"

33 
	~"∑ckëmgr.h
"

34 
	~"¥Ÿocﬁ.h
"

37 
	$dñëe_func
(c⁄° *
p
)

39 
	`DEL
–((
qq∑ckë
*)
p
)->
buf
 ); DEL(Ö );

40 
	}
}

42 
qq∑ckë
* 
	$∑ckëmgr_√w_∑ckë
–
qq˛õ¡
* 
qq
 )

44 
qq∑ckë
* 
p
;

46 
	`NEW
–
p
, (
qq∑ckë
) ,qqpacket);

47 if–!
p
 ){

48 
	`DBG
("Error: NoÉnough memory.");

49  
NULL
;

51 
p
->
time_¸óã
 =Ö->
time_Æive
 = 
	`time
–
NULL
 );

52 
	`NEW
–
p
->
buf
, (
byãbuf„r
) ,bytebuffer);

53 if–!
p
->
buf
 ){

54 
	`DBG
("Error: NoÉnough memory.");

55  
NULL
;

57 
p
->
buf
->
size
 = 
PACKET_SIZE
;

58 
p
->
buf
->
pos
 = 0;

59 
p
->
√ed_ack
 = 1;

60 
p
->
m©ch
 = 
NULL
;

61  
p
;

62 
	}
}

64 
qq∑ckë
* 
	$∑ckëmgr_√w_£nd
–
qq˛õ¡
* 
qq
, 
cmd
 )

67 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_∑ckë
–
qq
 );

68 if–!
p
 ){

69 
	`DBG
("Error: NoÖacketállocated.");

70  
NULL
;

72 
p
->
hód
 = 0x02;

73 
p
->
èû
 = 0x03;

74 
p
->
comm™d
 = 
cmd
;

75 
p
->
vîsi⁄
 = 
qq
->version;

76 
p
->
£qno
 = 
qq
->seqno;

77 
	`∑ckëmgr_öc_£qno
–
qq
 );

78 
p
->
buf
->
pos
 = 0;

79  
p
;

80 
	}
}

82 
	$∑ckëmgr_öc_£qno
–
qq˛õ¡
* 
qq
 )

84 
qq
->
£qno
 ++;

85 
	}
}

87 
	$∑ckëmgr_√w_£qno
–
qq˛õ¡
* 
qq
 )

89 
qq
->
£qno
 = (
	`ønd
()&0xF)<<3;

90 
	}
}

92 
	$∑ckëmgr_dñ_∑ckë
–
qq∑ckëmgr
* 
mgr
, 
qq∑ckë
* 
p
 )

94 if–
p
->
m©ch
 ){

95 
	`lo›_ªmove
–&
mgr
->
£¡_lo›
, 
p
->
m©ch
 );

96 
	`dñëe_func
–
p
->
m©ch
 );

98 
	`dñëe_func
–
p
 );

99 
	}
}

101 
	$check_ªady_∑ckës
–
qq˛õ¡
* 
qq
 )

103 
qq∑ckëmgr
* 
mgr
 = &
qq
->
∑ckëmgr
;

104 if–!
	`lo›_is_em±y
(&
mgr
->
£¡_lo›
Ë||Üo›_is_em±y(&mgr->
ªady_lo›
) )

107 if–
	`lo›_is_em±y
(&
mgr
->
£¡_lo›
) )

109 
qq∑ckë
* 
p
 =(qq∑ckë *Ë
	`lo›_p›_‰om_hód
–&
mgr
->
ªady_lo›
 );

110 if–
p
 &&Ö->
buf
 ){

112 if–
p
->
hód
!=0x02 ||Ö->
èû
 !=0x03 ){

113 
	`DBG
("F©ÆÉº‹:Ö->comm™d=%xÖ->hód: %xÖ->èû: %x", 
p
->
comm™d
,Ö->
hód
,

114 
p
->
èû
 );

115 
	`dñëe_func
–
p
 );

118 
ªt
 = 
	`qqsockë_£nd
–
qq
->
sockë
, 
p
->
buf
->
d©a
,Ö->buf->
Àn
 );

120 if–
ªt
 !
p
->
buf
->
Àn
 ){

121 
	`DBG
("£ndÖackë faûed.Ñë(%d)!ı->Àn(%d)", 
ªt
, 
p
->
buf
->
Àn
 );

122 
	`dñëe_func
–
p
 );

123 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_ERROR
 );

125 if–
p
->
√ed_ack
 ){

126 
p
->
time_Æive
 = 
	`time
(
NULL
);

127 
	`lo›_push_to_èû
–&
mgr
->
£¡_lo›
, 
p
 );

129 
	`dñëe_func
–
p
 );

133 
	`DBG
("noÖacket. ");

136 
	}
}

138 
	$∑ckëmgr_put
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

141  
	`∑ckëmgr_put_urge
–
qq
, 
p
, 0 );

142 
	}
}

145 
	$∑ckëmgr_put_urge
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
urge
 )

147 
qq∑ckëmgr
* 
mgr
 = &
qq
->
∑ckëmgr
;

148 
p
->
time_Æive
 = 
	`time
(
NULL
);

149 
p
->
£nd_times
 ++;

151 if–
	`±hªad_equÆ
–
	`±hªad_£lf
(), 
mgr
->
thªad_ªcv
 ) ){

153 
	`lo›_push_to_èû
–&
mgr
->
ãmp_lo›
, 
p
 );

155 
	`lo›_push_to_èû
–&
mgr
->
ªady_lo›
, 
p
 );

156 
	`check_ªady_∑ckës
–
qq
 );

159 
	}
}

162 
	$m©ch_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

164  ( ((
qq∑ckë
*)
p
)->
comm™d
 =((qq∑ckë*)
v
)->command &&

165 ((
qq∑ckë
*)
p
)->
£qno
 =((qq∑ckë*)
v
)->seqno );

166 
	}
}

167 
qq∑ckë
* 
	$m©ch_∑ckë
–
qq∑ckëmgr
* 
mgr
, 
qq∑ckë
* 
p
 )

169 
qq∑ckë
* 
m
;

170 
m
 =(
qq∑ckë
 *Ë
	`lo›_£¨ch
–&
mgr
->
£¡_lo›
, (*)
p
, 
m©ch_£¨chî
 );

171  
m
;

172 
	}
}

175 
	$ª≥©_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

177  ( 
p
 =
v
 );

178 
	}
}

179 
	$h™dÀ_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
uch¨
* 
d©a
, 
Àn
 )

181 
qq∑ckëmgr
* 
mgr
 = &
qq
->
∑ckëmgr
;

182 
mgr
->
ªcv_∑ckës
 ++;

183 
byãbuf„r
* 
buf
;

184 
	`NEW
–
buf
, –
byãbuf„r
 ) ,bytebuffer);

185 if–!
buf
 ){

186 
	`DBG
("Error:ÇoÉnough memoryÅoállocate buf.");

189 
buf
->
pos
 = 0;

190 
buf
->
Àn
 = buf->
size
 =Üen;

191 
	`mem˝y
–
buf
->
d©a
, d©a, buf->
Àn
 );

193 if–
qq
->
√tw‹k
 =
TCP
 )

194 
	`gë_w‹d
–
buf
 );

195 
p
->
hód
 = 
	`gë_byã
–
buf
 );

196 
p
->
èû
 = 
buf
->
d©a
[buf->
Àn
-1];

197 if–
p
->
hód
 !0x02 ||Ö->
èû
!=0x03 || 
buf
->
Àn
 > 2000 ){

198 
	`DBG
("[%u] wr⁄gÖackë.Üí=%d hód: %dÅaû: %d", 
qq
->
numbî
, 
buf
->
Àn
, 
p
->
hód
,Ö->
èû
 );

199 
	`DEL
–
buf
 );

202 
p
->
vîsi⁄
 = 
	`gë_w‹d
–
buf
 );

203 
p
->
comm™d
 = 
	`gë_w‹d
–
buf
 );

204 
p
->
£qno
 = 
	`gë_w‹d
–
buf
 );

205 
uöt
 
chk_ª≥©
 = (
p
->
£qno
<<16)|p->
comm™d
;

207 if–
	`lo›_£¨ch
–&
mgr
->
ªcv_lo›
, (*)
chk_ª≥©
, 
ª≥©_£¨chî
 ) =
NULL
 ){

208 
	`lo›_push_to_èû
–&
mgr
->
ªcv_lo›
, (*)
chk_ª≥©
 );

209 
p
->
m©ch
 = 
	`m©ch_∑ckë
–
mgr
,Ö );

210 
p
->
time_Æive
 = 
	`time
(
NULL
);

212 i‡–!
p
->
buf
 ){

213 
	`DBG
("%u: Eº‹ impossibÀ.Ö->buf: %xÖ->comm™d: %x", 
qq
->
numbî
, 
p
->
buf
,Ö->
comm™d
 );

216 
	`¥o˚ss_∑ckë
–
qq
, 
p
, 
buf
 );

217 
qq∑ckë
* 
t
;

218  (
t
 =(
qq∑ckë
 *Ë
	`lo›_p›_‰om_èû
–&
mgr
->
ãmp_lo›
 )) ){

219 
	`lo›_push_to_hód
–&
mgr
->
ªady_lo›
, 
t
 );

221 if–
p
->
m©ch
 ){

222 
	`lo›_ªmove
–&
mgr
->
£¡_lo›
, 
p
->
m©ch
 );

223 
	`dñëe_func
–
p
->
m©ch
 );

225 
p
->
m©ch
 = 
NULL
;

226 
mgr
->
Áûed_∑ckës
 = 0;

230 
	`DEL
–
buf
 );

231 
	`check_ªady_∑ckës
–
qq
 );

233 
	}
}

234 * 
	$∑ckëmgr_ªcv
–* 
d©a
 )

236 
ªt
;

237 
qq∑ckë
* 
p
;

238 
qq˛õ¡
* 
qq
 = (qq˛õ¡*)
d©a
;

239 
qq∑ckëmgr
* 
mgr
 = &
qq
->
∑ckëmgr
;

240 
uch¨
* 
ªcv_buf
;

241 
pos
;

242 
	`NEW
–
ªcv_buf
, 
PACKET_SIZE
 ,
uch¨
);

243 
p
 = 
	`∑ckëmgr_√w_∑ckë
–
qq
 );

244 if–!
p
 || !
ªcv_buf
 ){

245 
	`DBG
("Eº‹:Ö=%x buf=%x", 
p
, 
ªcv_buf
 );

246 
	`DEL
–
p
 ); DEL–
ªcv_buf
 );

247  
NULL
;

249 
pos
 = 0;

250  
qq
->
¥o˚ss
 !
P_INIT
 ){

251 
ªt
 = 
	`qqsockë_ªcv
–
qq
->
sockë
, 
ªcv_buf
, 
PACKET_SIZE
-
pos
 );

252 if–
ªt
 <= 0 ){

253 if–
qq
->
¥o˚ss
 !
P_INIT
 ){

255 
	`SLEEP
(1);

261 
pos
 +
ªt
;

263 if–
qq
->
√tw‹k
 =
TCP
 ){

264 i‡–
pos
 > 2 ){

265 
Àn
 = 
	`¡ohs
(*(
ush‹t
*)
ªcv_buf
);

266 if–
pos
 >
Àn
 )

268 if–
	`h™dÀ_∑ckë
–
qq
, 
p
, 
ªcv_buf
, 
Àn
 ) < 0 ) {

269 
pos
 = 0;

272 
pos
 -
Àn
;

274 if–
pos
 > 0 ){

275 
	`memmove
–
ªcv_buf
,Ñecv_buf+
Àn
, 
pos
 );

277 }if–
pos
 =
PACKET_SIZE
 ){

278 
	`DBG
("îr‹:Öos: %x ", 
pos
 );

279 
pos
 = 0;

283 
	`h™dÀ_∑ckë
–
qq
, 
p
, 
ªcv_buf
, 
ªt
 );

284 
pos
 = 0;

287 
	`DEL
–
ªcv_buf
 );

288 
	`∑ckëmgr_dñ_∑ckë
–
mgr
, 
p
 );

289 
	`DBG
("end.");

290  
NULL
;

291 
	}
}

293 
	$∑ckëmgr_°¨t
–
qq˛õ¡
* 
qq
 )

295 
ªt
;

296 
qq∑ckëmgr
 *
mgr
 = &
qq
->
∑ckëmgr
;

297 
	`mem£t
–
mgr
, 0, (
qq∑ckëmgr
) );

298 
	`lo›_¸óã
–&
mgr
->
ªcv_lo›
, 
MAX_LOOP_PACKET
, 
NULL
 );

299 
	`lo›_¸óã
–&
mgr
->
ªady_lo›
, 128, 
dñëe_func
 );

300 
	`lo›_¸óã
–&
mgr
->
ãmp_lo›
, 64, 
dñëe_func
 );

301 
	`lo›_¸óã
–&
mgr
->
£¡_lo›
, 32, 
dñëe_func
 );

302 
ªt
 = 
	`±hªad_¸óã
–&
mgr
->
thªad_ªcv
, 
NULL
, 
∑ckëmgr_ªcv
, (*)
qq
 );

304 
	}
}

307 
	$∑ckëmgr_íd
–
qq˛õ¡
* 
qq
 )

309 
qq∑ckëmgr
 *
mgr
 = &
qq
->
∑ckëmgr
;

310 
	`±hªad_joö
–
mgr
->
thªad_ªcv
, 
NULL
 );

311 
	`DBG
("removingÖackets.");

312 
	`lo›_˛ónup
–&
mgr
->
ªcv_lo›
 );

313 
	`lo›_˛ónup
–&
mgr
->
£¡_lo›
 );

314 
	`lo›_˛ónup
–&
mgr
->
ªady_lo›
 );

315 
	`lo›_˛ónup
–&
mgr
->
ãmp_lo›
 );

316 
	`DBG
("packetmgr_end");

317 
	}
}

319 
	$timeout_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

321 if–(
time_t
)
v
-((
qq∑ckë
*)
p
)->
time_Æive
 > 0 ){

326 
	}
}

327 
	$∑ckëmgr_check_∑ckë
–
qq˛õ¡
* 
qq
, 
timeout
 )

329 
qq∑ckëmgr
 *
mgr
 = &
qq
->
∑ckëmgr
;

330 
qq∑ckë
* 
p
;

331 
time_t
 
timeout_time
 = 
	`time
(
NULL
Ë- 
timeout
;

334 
p
 = (
qq∑ckë
 *)
	`lo›_£¨ch
–&
mgr
->
£¡_lo›
, (*)
timeout_time
, 
timeout_£¨chî
 );

335 if–
p
 ){

336 
	`lo›_ªmove
–&
mgr
->
£¡_lo›
, 
p
 );

338 if–
p
 ){

339 if–
p
->
£nd_times
 >= 3 ){

340 
	`MSG
("ÂèëÈÄÅÊï∞ÊçÆÂåÖÂ§±Ë¥•. comm™d: %x\n", 
p
->
comm™d
 );

341 
	`dñëe_func
–
p
 );

342 
mgr
->
Áûed_∑ckës
 ++;

343 if–
mgr
->
Áûed_∑ckës
 > 2 || 
qq
->
¥o˚ss
 !
P_LOGIN
 ){

344 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_ERROR
 );

347 
	`DBG
("ª£ndÖackë cmd: %x", 
p
->
comm™d
 );

348 
	`∑ckëmgr_put_urge
–
qq
, 
p
, 1 );

351 } 0 && 
p
 );

352 
	`check_ªady_∑ckës
(
qq
);

354 
	}
}

	@packetmgr.h

1 #i‚de‡
_PACKETMGR_H


2 
	#_PACKETMGR_H


	)

4 
	~<±hªad.h
>

5 
	~"qqdef.h
"

6 
	~"lo›.h
"

8 
	~"qq∑ckë.h
"

9 
	gqq˛õ¡
;

10 
	sqq∑ckëmgr
{

11 
	mªcv_∑ckës
;

12 
	mÁûed_∑ckës
;

13 
±hªad_t
 
	mthªad_ªcv
;

15 
lo›
 
	mªady_lo›
;

16 
lo›
 
	mãmp_lo›
;

17 
lo›
 
	m£¡_lo›
;

20 
lo›
 
	mªcv_lo›
;

21 }
	tqq∑ckëmgr
;

23 
qq∑ckë
* 
∑ckëmgr_√w_∑ckë
–
qq˛õ¡
* 
qq
 );

24 
qq∑ckë
* 
∑ckëmgr_√w_£nd
–
qq˛õ¡
* 
qq
, 
cmd
 );

25 
∑ckëmgr_dñ_∑ckë
–
qq∑ckëmgr
* 
mgr
, 
qq∑ckë
* 
p
 );

26 
∑ckëmgr_öc_£qno
–
qq˛õ¡
* 
qq
 );

27 
∑ckëmgr_√w_£qno
–
qq˛õ¡
* 
qq
 );

28 
∑ckëmgr_put
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

29 
∑ckëmgr_put_urge
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
urge
 );

30 
∑ckëmgr_°¨t
–
qq˛õ¡
* 
qq
 );

31 
∑ckëmgr_íd
–
qq˛õ¡
* 
qq
 );

32 
∑ckëmgr_check_∑ckë
–
qq˛õ¡
* 
qq
, 
timeout
 );

	@prot_buddy.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"qq˛õ¡.h
"

19 
	~"mem‹y.h
"

20 
	~"debug.h
"

21 
	~"qq∑ckë.h
"

22 
	~"∑ckëmgr.h
"

23 
	~"¥Ÿocﬁ.h
"

24 
	~"buddy.h
"

26 
	$¥Ÿ_buddy_upd©e_li°
–
qq˛õ¡
* 
qq
, 
ush‹t
 
pos
 )

28 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_BUDDY_LIST
 );

29 if–!
p
 ) ;

30 
byãbuf„r
 *
buf
 = 
p
->buf;

31 
	`put_byã
–
buf
, 01 );

32 
	`put_öt
–
buf
, 00000000 );

33 
	`put_öt
–
buf
, 00000000 );

34 
	`put_byã
–
buf
, 02 );

35 
	`put_w‹d
–
buf
, 
pos
 );

36 
	`put_w‹d
–
buf
, 0 );

37 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

38 
	}
}

40 
	$¥Ÿ_buddy_upd©e_li°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

42 
byãbuf„r
 *
buf
 = 
p
->buf;

43 
buf
->
pos
 += 10;

44 
ush‹t
 
√xt_pos
 = 
	`gë_w‹d
–
buf
 );

45 
buf
->
pos
 += 5;

46 
uöt
 
numbî
;

47 
qqbuddy
* 
b
;

48  
buf
->
pos
 < buf->
Àn
-5 ){

49 
numbî
 = 
	`gë_öt
–
buf
 );

50 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 1 );

51 if–
b
 =
NULL
 ){

52 
	`DBG
("Error: failedÅoállocate buddy.");

55 
b
->
Á˚
 = 
	`gë_w‹d
–
buf
 );

56 
b
->
age
 = 
	`gë_byã
–
buf
 );

57 
b
->
£x
 = 
	`gë_byã
–
buf
 );

58 
uch¨
 
«me_Àn
 = 
	`gë_byã
–
buf
 );

59 
	`gë_d©a
–
buf
, (
uch¨
*)
b
->
nick«me
, 
«me_Àn
 );

60 
b
->
nick«me
[
«me_Àn
] = 0;

61 
buf
->
pos
 += 27;

63 if–
√xt_pos
 != 0xffff ){

64 
	`¥Ÿ_buddy_upd©e_li°
–
qq
, 
√xt_pos
 );

66 
	`DBG
("buddy_cou¡: %d", 
qq
->
buddy_li°
.
cou¡
 );

67 
	`buddy_£t_Æl_off
–
qq
 );

68 #i‚de‡
NO_BUDDY_DETAIL_INFO


69 
	`¥Ÿ_buddy_upd©e_signôuª
–
qq
, 0 );

70 
	`¥Ÿ_buddy_upd©e_accou¡
–
qq
, 0 );

71 
	`¥Ÿ_buddy_upd©e_Æüs
–
qq
 );

73 
	`buddy_put_evít
–
qq
 );

75 
	}
}

78 
	$¥Ÿ_buddy_upd©e_⁄löe
–
qq˛õ¡
* 
qq
, 
uöt
 
√xt_numbî
 )

80 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_BUDDY_ONLINE
 );

81 if–!
p
 ) ;

82 
byãbuf„r
 *
buf
 = 
p
->buf;

83 
	`put_byã
–
buf
, 0x02 );

84 
	`put_öt
–
buf
, 
√xt_numbî
 );

85 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

86 
	}
}

88 
	$¥Ÿ_buddy_upd©e_⁄löe_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

90 
byãbuf„r
 *
buf
 = 
p
->buf;

91 
uch¨
 
√xt_‹dî
 = 
	`gë_byã
–
buf
 );

92 
uöt
 
numbî
;

93 
qqbuddy
* 
b
;

94 
uöt
 
max_numbî
 = 0;

95  
buf
->
pos
 < buf->
Àn
 ){

96 
numbî
 = 
	`gë_öt
–
buf
 );

97 if–
numbî
 > 
max_numbî
 )

98 
max_numbî
 = 
numbî
;

99 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

100 if–!
b
 ){

101 
	`DBG
("buddy_gë(%dËÁûed.", 
numbî
 );

104 
	`gë_byã
–
buf
 );

105 
b
->
ù
 = 
	`gë_öt
–
buf
 );

106 
b
->
p‹t
 = 
	`gë_w‹d
–
buf
 );

107 
	`gë_byã
–
buf
 );

108 
b
->
°©us
 = 
	`gë_byã
–
buf
 );

109 
b
->
vîsi⁄
 = 
	`gë_w‹d
–
buf
 );

110 
	`gë_d©a
–
buf
, 
b
->
£ssi⁄_key
, 16 );

111 
buf
->
pos
 += 11;

113 if–
√xt_‹dî
 != 0xff ){

114 
	`¥Ÿ_buddy_upd©e_⁄löe
–
qq
, 
max_numbî
 );

116 
	`buddy_put_evít
–
qq
 );

119 
	}
}

122 
	$¥Ÿ_buddy_°©us
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

124 
byãbuf„r
 *
buf
 = 
p
->buf;

125 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

126 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

127 if–
b
 ){

128 
	`gë_byã
–
buf
 );

129 
b
->
ù
 = 
	`gë_öt
–
buf
 );

130 
b
->
p‹t
 = 
	`gë_w‹d
–
buf
 );

131 
	`gë_byã
–
buf
 );

132 
b
->
°©us
 = 
	`gë_byã
–
buf
 );

133 
	`DBG
("°©u†tÿ%x", 
b
->
°©us
 );

134 
b
->
vîsi⁄
 = 
	`gë_w‹d
–
buf
 );

135 
	`gë_d©a
–
buf
, 
b
->
£ssi⁄_key
, 16 );

136 
evít
[64];

137 
	`•rötf
–
evít
, "buddy°©us^$%u^$%s", 
numbî
, 
	`buddy_°©us_°rög
(
b
->
°©us
) );

138 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

140 
	}
}

143 
	$¥Ÿ_buddy_upd©e_signôuª
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 )

145 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_BUDDY_SIGN
 );

146 if–!
p
 ) ;

147 
byãbuf„r
 *
buf
 = 
p
->buf;

149 
	`buddy_s‹t_li°
–
qq
 );

150 
	`put_byã
–
buf
, 0x83 );

151 
	`put_byã
–
buf
, 0x00 );

153 
i
, 
j
, 
cou¡
=1;

154 
	`±hªad_muãx_lock
–&
qq
->
buddy_li°
.
muãx
 );

155  
i
=0; i<
qq
->
buddy_li°
.
cou¡
; i++ )

156 if–((
qqbuddy
*)
qq
->
buddy_li°
.
ôems
[
i
])->
numbî
 >
pos
 )

158 
cou¡
 = 
	`MIN
–50, 
qq
->
buddy_li°
.cou¡-
i
 );

159 if–
cou¡
 == 0 ){

160 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

161 
	`DBG
("signiture finished.");

162 
	`∑ckëmgr_dñ_∑ckë
–&
qq
->
∑ckëmgr
, 
p
 );

166 
	`put_byã
–
buf
, 
cou¡
 );

167  
j
=
i
; j<i+
cou¡
; j++ ){

168 
	`put_öt
–
buf
, ((
qqbuddy
*)
qq
->
buddy_li°
.
ôems
[
j
])->
numbî
 );

169 
	`put_öt
–
buf
, 0 );

171 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

172 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

173 
	}
}

175 #i‚de‡
NO_BUDDY_DETAIL_INFO


176 
	$¥Ÿ_buddy_upd©e_signôuª_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

178 
byãbuf„r
 *
buf
 = 
p
->buf;

179 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

180  
cmd
 ){

183 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

184 if–
ªsu…
!=0 ){

185 
	`DBG
("ªu¶à%d", 
ªsu…
 );

188 
uöt
 
√xt_pos
;

189 
√xt_pos
 = 
	`gë_öt
–
buf
 );

190  
buf
->
pos
 < buf->
Àn
 ){

191 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

192 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

193 if–!
b
 ){

194 
	`DBG
("buddy_gë(%dËÁûed", 
numbî
);

197 
b
->
sign_time
 = 
	`gë_öt
–
buf
 );

198 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

200 
	`gë_d©a
–
buf
, (
uch¨
*)
b
->
signôuª
, 
Àn
 );

201 
b
->
signôuª
[
Àn
] = 0;

204 if–
√xt_pos
 != 0 &&Çext_pos != 0xffffffff ){

206 
	`¥Ÿ_buddy_upd©e_signôuª
–
qq
, 
√xt_pos
 );

211 
	`DBG
("unknow¿cmd = %x", 
cmd
 );

213 
	}
}

215 
	$¥Ÿ_buddy_upd©e_accou¡
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 )

217 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_ACCOUNT
 );

218 if–!
p
 ) ;

219 
byãbuf„r
 *
buf
 = 
p
->buf;

221 
	`buddy_s‹t_li°
–
qq
 );

222 
	`put_byã
–
buf
, 0x01 );

223 
	`put_öt
–
buf
, 
qq
->
numbî
 );

225 
i
, 
j
, 
cou¡
;

226 
	`±hªad_muãx_lock
–&
qq
->
buddy_li°
.
muãx
 );

227  
i
=0; i<
qq
->
buddy_li°
.
cou¡
; i++ )

228 if–((
qqbuddy
*)
qq
->
buddy_li°
.
ôems
[
i
])->
numbî
 >
pos
 )

230 
cou¡
 = 
	`MIN
–50, 
qq
->
buddy_li°
.cou¡-
i
 );

231 if–
cou¡
 == 0 ){

232 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

233 
	`DBG
("account finished.");

234 
	`∑ckëmgr_dñ_∑ckë
–&
qq
->
∑ckëmgr
, 
p
 );

237 
	`put_byã
–
buf
, 
cou¡
 );

238  
j
=
i
; j<i+
cou¡
; j++ ){

239 
	`put_öt
–
buf
, ((
qqbuddy
*)
qq
->
buddy_li°
.
ôems
[
j
])->
numbî
 );

241 
	`±hªad_muãx_u∆ock
–&
qq
->
buddy_li°
.
muãx
 );

242 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

243 
	}
}

245 
	$¥Ÿ_buddy_upd©e_accou¡_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

247 
byãbuf„r
 *
buf
 = 
p
->buf;

248 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

249  
cmd
 ){

252 
	`gë_öt
(
buf
 );

253 
ush‹t
 
ªsu…
 = 
	`gë_w‹d
–
buf
 );

254 if–
ªsu…
!=0x0001 ){

255 
	`DBG
("ªu¶à%d", 
ªsu…
 );

258 
uöt
 
√xt_pos
;

259 
√xt_pos
 = 
	`gë_öt
–
buf
 );

260 
cou¡
;

261 
cou¡
 = 
	`gë_w‹d
–
buf
 );

262  
buf
->
pos
 < buf->
Àn
 ){

263 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

264 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

265 if–!
b
 ){

266 
	`DBG
("b==NULL");

269 
b
->
accou¡_Êag
 = 
	`gë_öt
–
buf
 );

270 if–
b
->
accou¡_Êag
 > 0 ){

271 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

272 
Àn
 = 
	`MIN
–Àn, 
ACCOUNT_LEN
-1 );

273 
	`gë_d©a
–
buf
, (
uch¨
*)
b
->
accou¡
, 
Àn
 );

274 
b
->
accou¡
[
Àn
] = 0;

278 if–
√xt_pos
 != 0 &&Çext_pos != 0xffffffff ){

280 
	`¥Ÿ_buddy_upd©e_accou¡
–
qq
, 
√xt_pos
 );

286 
uch¨
 
ty≥
, 
ªsu…
;

287 
uöt
 
numbî
;

288 
ty≥
 = 
	`gë_byã
–
buf
 );

289 
numbî
 = 
	`gë_öt
–
buf
 );

290 
ªsu…
 = 
	`gë_byã
–
buf
 );

291 if–
ªsu…
 != 00 ){

292 
	`DBG
("failedÅo verifyádding buddy msg.");

294 
	`DBG
("vîifõdáddög buddy msg %uÑesu…: %d", 
numbî
, 
ªsu…
 );

298 
	`DBG
("unknow¿cmd = %x", 
cmd
 );

300 
	}
}

303 
	$¥Ÿ_buddy_upd©e_Æüs
–
qq˛õ¡
* 
qq
 )

305 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_BUDDY_ALIAS
 );

306 if–!
p
 ) ;

307 
byãbuf„r
 *
buf
 = 
p
->buf;

308 
	`put_byã
–
buf
, 0x68 );

309 
	`put_byã
–
buf
, 0x00 );

310 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

311 
	}
}

313 
	$¥Ÿ_buddy_upd©e_Æüs_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

315 
byãbuf„r
 *
buf
 = 
p
->buf;

316 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

317  
cmd
 ){

320 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

321 if–
ªsu…
!=0x01 ){

322 
	`DBG
("ªu¶à%d", 
ªsu…
 );

325  
buf
->
pos
 < buf->
Àn
 ){

326 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

327 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

328 if–!
b
 ){

329 
	`DBG
("b==NULL");

332 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

333 
Àn
 = 
	`MIN
–Àn, 
ALIAS_LEN
-1 );

334 
	`gë_d©a
–
buf
, (
uch¨
*)
b
->
Æüs
, 
Àn
 );

335 
b
->
Æüs
[
Àn
] = 0;

338 
	`buddy_put_evít
–
qq
 );

342 
	`DBG
("unknow¿cmd = %x", 
cmd
 );

344 
	}
}

347 
	$¥Ÿ_buddy_ªque°_addbuddy
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

349 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_ADDBUDDY_REQUEST
 );

350 if–!
p
 ) ;

351 
byãbuf„r
 *
buf
 = 
p
->buf;

352 
	`put_öt
–
buf
, 
numbî
 );

353 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

354 
	}
}

356 
	$¥Ÿ_buddy_ªque°_addbuddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

358 
byãbuf„r
 *
buf
 = 
p
->buf;

359 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

360 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

361 
uch¨
 
Êag
 = 
	`gë_byã
–
buf
 );

362 if–
ªsu…
 == 0 ){

363 
qq
->
d©a
.
›î©ög_numbî
 = 
numbî
;

364 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
 , 1 );

365 if–
b
 ){

366 
b
->
vîify_Êag
 = 
Êag
;

368  
Êag
 ){

370 
	`¥Ÿ_u£r_ªque°_tokí
–
qq
, 
numbî
, 
OP_ADDBUDDY
, 1, 0 );

373 
	`¥Ÿ_u£r_ªque°_tokí
–
qq
, 
numbî
, 
OP_ADDBUDDY
, 1, 0 );

377 
msg
[128];

378 
	`•rötf
–
msg
, "[%u]ÊãíÁªùË¢´‰ªª‰Ωï‰∫∫Âä†‰∏∫Â•ΩÂèã„ÄÇ", 
numbî
 );

379 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
msg
 );

384 
msg
[128];

385 
	`•rötf
–
msg
, "[%u]ÈúÄË¶ÅÂõûÁ≠îÈóÆÈ¢òÊâçËÉΩÂä†‰∏∫Â•ΩÂèã„ÄÇ", 
numbî
 );

386 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
msg
 );

390 
	`DBG
("Unknow¿Êag = %x", 
Êag
 );

393 
	}
}

395 
	$¥Ÿ_buddy_vîify_addbuddy
–
qq˛õ¡
* 
qq
, 
uch¨
 
cmd
, 
uöt
 
numbî
 )

397 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_ADDBUDDY_VERIFY
 );

398 if–!
p
 ) ;

399 
byãbuf„r
 *
buf
 = 
p
->buf;

400 
	`put_byã
–
buf
, 
cmd
 );

401 
	`put_öt
–
buf
, 
numbî
 );

402 
	`put_w‹d
–
buf
, 0x0000 );

403  
cmd
 ){

405 
	`put_byã
–
buf
, 0x00 );

408 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
u£r_tokí
.
Àn
 );

409 
	`put_d©a
–
buf
, 
qq
->
d©a
.
u£r_tokí
.d©a, qq->d©a.u£r_tokí.
Àn
 );

410 
	`put_byã
–
buf
, 1 );

411 
	`put_byã
–
buf
, 0 );

412 
	`put_byã
–
buf
, 
	`°æí
(
qq
->
d©a
.
addbuddy_°r
) );

413 
	`put_d©a
–
buf
, (
uch¨
*)
qq
->
d©a
.
addbuddy_°r
, 
	`°æí
(qq->data.addbuddy_str) );

416 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
u£r_tokí
.
Àn
 );

417 
	`put_d©a
–
buf
, 
qq
->
d©a
.
u£r_tokí
.d©a, qq->d©a.u£r_tokí.
Àn
 );

418 
	`put_byã
–
buf
, 0x00 );

421 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
u£r_tokí
.
Àn
 );

422 
	`put_d©a
–
buf
, 
qq
->
d©a
.
u£r_tokí
.d©a, qq->d©a.u£r_tokí.
Àn
 );

423 
	`put_byã
–
buf
, 1 );

424 
	`put_byã
–
buf
, 0 );

427 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

428 
	}
}

430 
	$¥Ÿ_buddy_vîify_addbuddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

432 
byãbuf„r
 *
buf
 = 
p
->buf;

433 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

434 
uöt
 
numbî
;

435 
numbî
 = 
	`gë_öt
–
buf
 );

436  
cmd
 ){

444 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

445 if–
ªsu…
 == 0x00 ){

446 
msg
[128];

447 
	`DBG
("add buddy %u ok!! [cmd=%x]", 
numbî
, 
cmd
 );

448 
	`•rötf
–
msg
, "‰Ω†Â∑≤ÁªèÊää[%u]Ê∑ªÂä†‰∏∫Â•ΩÂèã„ÄÇ", 
numbî
 );

449 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
msg
 );

451 
	`buddy_upd©e_li°
–
qq
 );

453 
	`DBG
("ÁûedÅÿadd buddy %uÑesu…=%d", 
numbî
, 
ªsu…
 );

458 
	`DBG
("unknow¿cmd = %x", 
cmd
 );

460 
	}
}

462 
	$¥Ÿ_buddy_dñ_buddy
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

464 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_DEL_BUDDY
 );

465 if–!
p
 ) ;

466 
byãbuf„r
 *
buf
 = 
p
->buf;

467 
	`put_byã
–
buf
, 
qq
->
d©a
.
u£r_tokí
.
Àn
 );

468 
	`put_d©a
–
buf
, 
qq
->
d©a
.
u£r_tokí
.d©a, qq->d©a.u£r_tokí.
Àn
 );

469 
s
[16];

470 
	`•rötf
–
s
, "%u", 
numbî
 );

471 
	`put_d©a
–
buf
, (
uch¨
*)
s
, 
	`°æí
(s) );

472 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

473 
	}
}

475 
	$¥Ÿ_buddy_dñ_buddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

477 
byãbuf„r
 *
buf
 = 
p
->buf;

478 if–
	`gë_byã
–
buf
 ) != 0 ){

479 
	`DBG
("FaûedÅÿdñ buddy %u.", 
qq
->
d©a
.
›î©ög_numbî
 );

481 
msg
[128];

482 
	`buddy_ªmove
–
qq
, qq->
d©a
.
›î©ög_numbî
 );

483 
	`•rötf
–
msg
, "Âà†Èô§Â•ΩÂèã[%u]ÊàêÂäü„ÄÇ", 
qq
->
d©a
.
›î©ög_numbî
 );

484 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
msg
 );

486 
	}
}

	@prot_group.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"qq˛õ¡.h
"

19 
	~"mem‹y.h
"

20 
	~"debug.h
"

21 
	~"qq∑ckë.h
"

22 
	~"∑ckëmgr.h
"

23 
	~"¥Ÿocﬁ.h
"

24 
	~"qun.h
"

25 
	~"group.h
"

26 
	~"utf8.h
"

78 
	$¥Ÿ_group_dow∆ﬂd_œbñs
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 )

80 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GROUP_LABEL
 );

81 if–!
p
 ) ;

82 
byãbuf„r
 *
buf
 = 
p
->buf;

83 
	`put_byã
–
buf
, 0x1F );

84 
	`put_byã
–
buf
, 0x01 );

85 
	`put_öt
–
buf
, 
pos
 );

86 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

87 
	}
}

89 
	$¥Ÿ_group_dow∆ﬂd_œbñs_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

91 
byãbuf„r
 *
buf
 = 
p
->buf;

92 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

93 if–
cmd
 == 0x1F ){

94 
uöt
 
√xt_pos
 = 
	`gë_öt
–
buf
 );

95 if–
√xt_pos
 == 0x1000000 ){

98 if–
√xt_pos
 != 0x00 ){

99 
	`DBG
("√xt_po†=0x%x", 
√xt_pos
 );

101 
	`gë_byã
–
buf
 );

102 
	`gë_w‹d
–
buf
 );

103 
uch¨
 
Àn
;

104  
buf
->
pos
 < buf->
Àn
 ){

105 
uch¨
 
numbî
 = 
	`gë_byã
–
buf
 );

106 
	`gë_byã
–
buf
 );

107 
Àn
 = 
	`gë_byã
–
buf
 );

109 
qqgroup
 *
g
 = 
	`group_gë
–
qq
, 
numbî
, 1 );

110 if–
g
 =
NULL
 )

112 
	`mem£t
–
g
->
«me
, 0, 
NICKNAME_LEN
 );

113 
	`gë_d©a
–
buf
, (
uch¨
*)
g
->
«me
, 
Àn
 );

116 
	`group_put_evít
–
qq
 );

117 
	`buddy_put_evít
–
qq
 );

119 
	`DBG
("unknow¿cmd=%x", 
cmd
 );

121 
	}
}

	@prot_im.c

15 
	~<time.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 #ifde‡
__WIN32__


19 
	~<wösock.h
>

20 
	~<wööë.h
>

23 
	~<sys/sockë.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√tdb.h
>

28 
	~"qq˛õ¡.h
"

29 
	~"mem‹y.h
"

30 
	~"debug.h
"

31 
	~"qq∑ckë.h
"

32 
	~"∑ckëmgr.h
"

33 
	~"qq¸y±.h
"

34 
	~"md5.h
"

35 
	~"buddy.h
"

36 
	~"¥Ÿocﬁ.h
"

37 
	~"utf8.h
"

38 
	~"utû.h
"

41 
	$¥Ÿ_im_£nd_msg
–
qq˛õ¡
* 
qq
, 
uöt
 
to
, * 
msg
 )

43 
Àn
 = 
	`°æí
–
msg
 );

44 if–
Àn
 > 700 ){

48 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_SEND_IM
 );

49 if–!
p
 ) ;

50 
byãbuf„r
 *
buf
 = 
p
->buf;

51 
	`put_öt
–
buf
, 
qq
->
numbî
 );

52 
	`put_öt
–
buf
, 
to
 );

53 
	`put_w‹d
–
buf
, 
qq
->
vîsi⁄
 );

54 
	`put_öt
–
buf
, 
qq
->
numbî
 );

55 
	`put_öt
–
buf
, 
to
 );

56 
	`put_d©a
–
buf
, 
qq
->
d©a
.
im_key
, 16 );

57 
	`put_w‹d
–
buf
, 
QQ_NORMAL_IM_TEXT
 );

58 
	`put_w‹d
–
buf
, 
p
->
£qno
 );

59 
	`put_öt
–
buf
, 
p
->
time_¸óã
 );

60 
	`put_w‹d
–
buf
, 0x008D );

61 
	`put_öt
–
buf
, 1 );

62 
	`put_byã
–
buf
, 1 );

63 
	`put_byã
–
buf
, 0 );

64 
	`put_byã
–
buf
, 0 );

65 
	`put_byã
–
buf
, 0 );

66 
	`put_byã
–
buf
, 
QQ_IM_TEXT
 );

67 
	`put_öt
–
buf
, 0x4D534700 );

68 
	`put_öt
–
buf
, 0x00000000 );

69 
	`put_öt
–
buf
, 
p
->
time_¸óã
 );

70 
	`put_öt
–
buf
, 
	`ønd
() );

71 
	`put_öt
–
buf
, 0x00000000 );

72 
	`put_öt
–
buf
, 0x09008600 );

73 
f⁄t_«me
[] = "ÂÆã‰Ωì";

74 
	`put_w‹d
–
buf
, 
	`°æí
(
f⁄t_«me
) );

75 
	`put_d©a
–
buf
, (
uch¨
*)
f⁄t_«me
, 
	`°æí
( font_name) );

76 
	`put_w‹d
–
buf
, 0x0000 );

77 
	`put_byã
–
buf
, 0x01 );

78 
	`put_w‹d
–
buf
, 
Àn
+3 );

79 
	`put_byã
–
buf
, 1 );

80 
	`put_w‹d
–
buf
, 
Àn
 );

82 
	`put_d©a
–
buf
, (
uch¨
*)
msg
, 
Àn
 );

83 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

84 
	}
}

86 
	$¥Ÿ_im_ack_ªcv
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
¥e
 )

88 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_RECV_IM
 );

89 if–!
p
 ) ;

90 
byãbuf„r
 *
buf
 = 
p
->buf;

91 
p
->
£qno
 = 
¥e
->seqno;

92 
	`put_d©a
–
buf
, 
¥e
->buf->
d©a
, 16 );

93 
p
->
√ed_ack
 = 0;

94 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

95 
	}
}

97 
	$∑r£_mesßge_09
–
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
, * 
tmp
, 
ouéí
 )

99 
byãbuf„r
 *
buf
 = 
p
->buf;

100 
i
 = 0;

101 
ush‹t
 
Àn
;

102 
buf
->
pos
 += 8;

103 
msg
->
msg_time
 = 
	`gë_öt
–
buf
 );

104 
buf
->
pos
 += 12;

105 
Àn
 = 
	`gë_w‹d
–
buf
 );

106 
buf
->
pos
 +
Àn
;

107 
	`gë_w‹d
–
buf
 );

108  
buf
->
pos
 < buf->
Àn
 ){

109 
uch¨
 
ty≥
 = 
	`gë_byã
(
buf
);

110 
Àn
 = 
	`gë_w‹d
(
buf
);

111 
	`gë_byã
(
buf
);

112 
ush‹t
 
Àn_°r
;

113  
ty≥
 ){

115 
Àn_°r
 = 
	`gë_w‹d
–
buf
 );

116 
Àn_°r
 = 
	`MIN
÷í_°r, 
ouéí
-
i
);

117 
	`gë_d©a
–
buf
, (
uch¨
*)&
tmp
[
i
], 
Àn_°r
 );

118 
i
 +
Àn_°r
;

121 
Àn_°r
 = 
	`gë_w‹d
–
buf
 );

122 
buf
->
pos
 +
Àn_°r
;

123 
	`gë_byã
–
buf
 );

124 
Àn_°r
 = 
	`gë_w‹d
–
buf
 );

125 if–
Àn_°r
 == 2 ){

126 
	`gë_byã
–
buf
 );

127 if–
ouéí
-
i
 > 15 )

128 
i
 +
	`•rötf
–&
tmp
[i], "[Á˚:%d]", 
	`gë_byã
–
buf
 ) );

130 
buf
->
pos
 +
Àn_°r
;

134 
Àn_°r
 = 
	`gë_w‹d
–
buf
 );

135 
buf
->
pos
 +
Àn_°r
;

136 
	`gë_byã
–
buf
 );

137 
tokí
 
tok_pic
;

138 
	`gë_tokí
–
buf
, &
tok_pic
 );

139 if–
ouéí
-
i
 > 10 )

140 
i
 +
	`•rötf
–&
tmp
[i], "[image]" );

142 
Àn
 = 0;

144 
tmp
[
i
] = 0;

145 
	}
}

147 
	$¥o˚ss_buddy_im_ãxt
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
 )

149 
byãbuf„r
 *
buf
 = 
p
->buf;

150 
tmp
[
MSG_CONTENT_LEN
];

151 
	`gë_w‹d
–
buf
 );

152 
msg
->
msg_time
 = 
	`gë_öt
–
buf
 );

153 
	`gë_w‹d
–
buf
 );

154 
buf
->
pos
 += 4;

156 
msg
->
¶i˚_cou¡
 = 
	`gë_byã
–
buf
 );

157 
msg
->
¶i˚_no
 = 
	`gë_byã
–
buf
 );

158 
msg
->
msg_id
 = 
	`gë_w‹d
–
buf
 );

159 
msg
->
auto_ª∂y
 = 
	`gë_byã
–
buf
 );

160  
msg
->
im_ty≥
 ){

161 
QQ_RECV_IM_BUDDY_09
:

162 
	`∑r£_mesßge_09
–
p
, 
msg
, 
tmp
, 
MSG_CONTENT_LEN
 );

163 
	`°r˝y
–
msg
->
msg_c⁄ã¡
, 
tmp
 );

165 
QQ_RECV_IM_BUDDY_0801
:

166 
	`gë_°rög
–
buf
, 
tmp
, 
MSG_CONTENT_LEN
 );

167 
	`gb_to_utf8
–
tmp
,Åmp, 
MSG_CONTENT_LEN
-1 );

168 
	`å™s_Á˚s
–
tmp
, 
msg
->
msg_c⁄ã¡
, 
MSG_CONTENT_LEN
 );

170 
QQ_RECV_IM_BUDDY_0802
:

171 
buf
->
pos
 += 8;

172 
	`gë_°rög
–
buf
, 
tmp
, 
MSG_CONTENT_LEN
 );

173 
	`gb_to_utf8
–
tmp
,Åmp, 
MSG_CONTENT_LEN
-1 );

174 
	`å™s_Á˚s
–
tmp
, 
msg
->
msg_c⁄ã¡
, 
MSG_CONTENT_LEN
 );

179 if–
qq
->
auto_ª∂y
[0]!='\0' ){

180 
	`¥Ÿ_im_£nd_msg
–
qq
, 
msg
->
‰om
, qq->
auto_ª∂y
 );

182 
	`buddy_msg_ˇŒback
–
qq
, 
msg
->
‰om
, msg->
msg_time
, msg->
msg_c⁄ã¡
 );

183 
	}
}

185 
	$¥o˚ss_buddy_im
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
 )

187 
byãbuf„r
 *
buf
 = 
p
->buf;

188 
	`gë_w‹d
–
buf
 );

189 
msg
->
‰om
 = 
	`gë_öt
–
buf
 );

190 if–
	`gë_öt
–
buf
 ) !
qq
->
numbî
 ){

191 
	`DBG
("nothing butÅhis is impossible!!");

194 
	`buddy_gë
–
qq
, 
msg
->
‰om
, 1 );

196 
uch¨
 
key
[16];

197 
	`gë_d©a
–
buf
, 
key
, 16 );

198 
ush‹t
 
c⁄ã¡_ty≥
 = 
	`gë_w‹d
–
buf
 );

199  
c⁄ã¡_ty≥
 ){

200 
QQ_NORMAL_IM_TEXT
:

202 
	`¥o˚ss_buddy_im_ãxt
–
qq
, 
p
, 
msg
 );

204 
QQ_NORMAL_IM_FILE_REQUEST_TCP
:

205 
	`DBG
("QQ_NORMAL_IM_FILE_REQUEST_TCP");

207 
QQ_NORMAL_IM_FILE_APPROVE_TCP
:

208 
	`DBG
("QQ_NORMAL_IM_FILE_APPROVE_TCP");

210 
QQ_NORMAL_IM_FILE_REJECT_TCP
:

211 
	`DBG
("QQ_NORMAL_IM_FILE_REJECT_TCP");

213 
QQ_NORMAL_IM_FILE_REQUEST_UDP
:

214 
	`DBG
("QQ_NORMAL_IM_FILE_REQUEST_UDP");

216 
QQ_NORMAL_IM_FILE_APPROVE_UDP
:

217 
	`DBG
("QQ_NORMAL_IM_FILE_APPROVE_UDP");

219 
QQ_NORMAL_IM_FILE_REJECT_UDP
:

220 
	`DBG
("QQ_NORMAL_IM_FILE_REJECT_UDP");

222 
QQ_NORMAL_IM_FILE_NOTIFY
:

223 
	`DBG
("QQ_NORMAL_IM_FILE_NOTIFY");

225 
QQ_NORMAL_IM_FILE_PASV
:

226 
	`DBG
("QQ_NORMAL_IM_FILE_PASV");

228 
QQ_NORMAL_IM_FILE_CANCEL
:

229 
	`DBG
("QQ_NORMAL_IM_FILE_CANCEL");

231 
QQ_NORMAL_IM_FILE_EX_REQUEST_UDP
:

234 
QQ_NORMAL_IM_FILE_EX_REQUEST_ACCEPT
:

235 
	`DBG
("QQ_NORMAL_IM_FILE_EX_REQUEST_ACCEPT");

237 
QQ_NORMAL_IM_FILE_EX_REQUEST_CANCEL
:

238 
	`DBG
("QQ_NORMAL_IM_FILE_EX_REQUEST_CANCEL");

240 
QQ_NORMAL_IM_FILE_EX_NOTIFY_IP
:

241 
	`DBG
("QQ_NORMAL_IM_FILE_EX_NOTIFY_IP");

244 
	`DBG
("UNKNOWNÅy≥: %x", 
c⁄ã¡_ty≥
 );

247 
	}
}

249 
	$¥o˚ss_sys_im
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
 )

251 
byãbuf„r
 *
buf
 = 
p
->buf;

252 
msg
->
msg_time
 = 
	`time
(
NULL
);

253 
uch¨
 
c⁄ã¡_ty≥
;

254 
c⁄ã¡_ty≥
 = 
	`gë_byã
–
buf
 );

255 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

256 
	`gë_d©a
–
buf
, (
uch¨
*)
msg
->
msg_c⁄ã¡
, 
Àn
 );

257 
msg
->
msg_c⁄ã¡
[
Àn
] = 0;

258 
	`buddy_msg_ˇŒback
–
qq
, 
msg
->
‰om
, msg->
msg_time
, msg->
msg_c⁄ã¡
 );

259 if–
	`°r°r
–
msg
->
msg_c⁄ã¡
, "Âè¶‰∏ÄÂú∞ÁÇπÁôªÂΩï" ) !
NULL
 ){

260 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_BUSY
 );

262 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_ERROR
 );

265 
	}
}

267 
	$¥o˚ss_qun_im
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
 )

269 
byãbuf„r
 *
buf
 = 
p
->buf;

270 
tmp
[
MSG_CONTENT_LEN
];

271 
	`gë_öt
–
buf
 );

272 
	`gë_byã
–
buf
 );

273 
msg
->
‰om
 = 
	`gë_öt
–
buf
 );

274 if–
msg
->
‰om
 =
qq
->
numbî
 )

276 
	`gë_w‹d
–
buf
 );

277 
msg
->
msg_id
 = 
	`gë_w‹d
–
buf
 );

278 
msg
->
msg_time
 = 
	`gë_öt
–
buf
 );

279  
msg
->
im_ty≥
 ){

280 
QQ_RECV_IM_QUN_IM_09
:

281 
buf
->
pos
 += 16;

282 
	`∑r£_mesßge_09
–
p
, 
msg
, 
tmp
, 
MSG_CONTENT_LEN
 );

283 
	`°r˝y
–
msg
->
msg_c⁄ã¡
, 
tmp
 );

285 
QQ_RECV_IM_QUN_IM
:

286 
buf
->
pos
 += 16;

287 
	`gë_°rög
–
buf
, 
tmp
, 
MSG_CONTENT_LEN
 );

288 
	`gb_to_utf8
–
tmp
,Åmp, 
MSG_CONTENT_LEN
-1 );

289 
	`å™s_Á˚s
–
tmp
, 
msg
->
msg_c⁄ã¡
, 
MSG_CONTENT_LEN
 );

295 
	`qun_msg_ˇŒback
–
qq
, 
msg
->
‰om
, msg->
qun_numbî
, msg->
msg_time
, msg->
msg_c⁄ã¡
 );

296 
	}
}

298 
	$¥o˚ss_qun_membî_im
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqmesßge
* 
msg
 )

300 
byãbuf„r
 *
buf
 = 
p
->buf;

301 
tokí
 
tok_unknown
;

302 
buf
->
pos
 += 14;

303 
	`gë_tokí
–
buf
, &
tok_unknown
 );

304 
buf
->
pos
 += 8;

305 
	`gë_öt
–
buf
 );

306 
	`gë_öt
–
buf
 );

307 
msg
->
‰om
 = 
	`gë_öt
–
buf
 );

308 
	`gë_öt
–
buf
 );

309 
	`gë_öt
–
buf
 );

310 
msg
->
msg_time
 = 
	`gë_öt
–
buf
 );

311 
msg
->
qun_numbî
 = 
	`gë_öt
–
buf
 );

312 
	`gë_öt
–
buf
 );

313 
buf
->
pos
 += 15;

314 
	`¥o˚ss_buddy_im
–
qq
, 
p
, 
msg
 );

315 
	`DBG
("¥o˚ss_qun_membî_im: qun_numbî: %u", 
msg
->
qun_numbî
 );

316 
	}
}

319 
	$¥Ÿ_im_ªcv_msg
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

321 
byãbuf„r
 *
buf
 = 
p
->buf;

322 
uöt
 
‰om
, 
‰om_ù
;

323 
ush‹t
 
‰om_p‹t
;

324 
ush‹t
 
im_ty≥
;

325 
qqmesßge
 *
msg
;

326 if–!
qq
->
logö_föish
 ){

327 
	`DBG
("Early message ... Abandoned.");

330 
	`NEW
–
msg
, –
qqmesßge
 ) ,qqmessage);

331 if–!
msg
 )

334 
‰om
 = 
	`gë_öt
–
buf
 );

335 if–
	`gë_öt
–
buf
 ) !
qq
->
numbî
 ){

336 
	`DBG
("qq->number isÇotÉqualÅo yours");

338 
	`gë_öt
–
buf
 );

339 
‰om_ù
 = 
	`gë_öt
–
buf
 );

340 
‰om_p‹t
 = 
	`gë_w‹d
–
buf
 );

341 
im_ty≥
 = 
	`gë_w‹d
–
buf
 );

342 
msg
->
im_ty≥
 = im_type;

343  
im_ty≥
 ){

344 
QQ_RECV_IM_BUDDY_0801
:

345 
	`DBG
("QQ_RECV_IM_BUDDY_0801");

346 
msg
->
msg_ty≥
 = 
MT_BUDDY
;

347 
	`¥o˚ss_buddy_im
–
qq
, 
p
, 
msg
 );

349 
QQ_RECV_IM_BUDDY_0802
:

350 
	`DBG
("QQ_RECV_IM_BUDDY_0802");

351 
msg
->
msg_ty≥
 = 
MT_BUDDY
;

352 
	`¥o˚ss_buddy_im
–
qq
, 
p
, 
msg
 );

354 
QQ_RECV_IM_BUDDY_09
:

355 
	`DBG
("QQ_RECV_IM_BUDDY_09");

356 
msg
->
msg_ty≥
 = 
MT_BUDDY
;

357 
p
->
buf
->
pos
 += 7;

358 
	`¥o˚ss_buddy_im
–
qq
, 
p
, 
msg
 );

359 
QQ_RECV_IM_WRITING
:

362 
QQ_RECV_IM_QUN_IM
:

363 
QQ_RECV_IM_QUN_IM_09
:

364 
msg
->
msg_ty≥
 = 
MT_QUN
;

365 
msg
->
qun_numbî
 = 
‰om
;

366 
	`¥o˚ss_qun_im
–
qq
, 
p
, 
msg
 );

368 
QQ_RECV_IM_TO_UNKNOWN
:

369 
	`DBG
("QQ_RECV_IM_TO_UNKNOWN");

371 
QQ_RECV_IM_NEWS
:

372 
	`DBG
("QQ_RECV_IM_NEWS");

374 
QQ_RECV_IM_UNKNOWN_QUN_IM
:

375 
	`DBG
("QQ_RECV_IM_UNKNOWN_QUN_IM");

377 
QQ_RECV_IM_ADD_TO_QUN
:

378 
	`DBG
("QQ_RECV_IM_ADD_TO_QUN");

380 
QQ_RECV_IM_DEL_FROM_QUN
:

381 
	`DBG
("QQ_RECV_IM_DEL_FROM_QUN");

383 
QQ_RECV_IM_APPLY_ADD_TO_QUN
:

384 
	`DBG
("QQ_RECV_IM_APPLY_ADD_TO_QUN");

386 
QQ_RECV_IM_APPROVE_APPLY_ADD_TO_QUN
:

387 
	`DBG
("QQ_RECV_IM_APPROVE_APPLY_ADD_TO_QUN");

389 
QQ_RECV_IM_REJCT_APPLY_ADD_TO_QUN
:

390 
	`DBG
("QQ_RECV_IM_REJCT_APPLY_ADD_TO_QUN");

392 
QQ_RECV_IM_CREATE_QUN
:

393 
	`DBG
("QQ_RECV_IM_CREATE_QUN");

395 
QQ_RECV_IM_TEMP_QUN_IM
:

396 
	`DBG
("QQ_RECV_IM_TEMP_QUN_IM");

397 
QQ_RECV_IM_SYS_NOTIFICATION
:

398 
msg
->
msg_ty≥
 = 
MT_SYSTEM
;

399 
	`¥o˚ss_sys_im
–
qq
, 
p
, 
msg
 );

401 
QQ_RECV_IM_QUN_MEMBER_IM
:

402 
msg
->
msg_ty≥
 = 
MT_QUN_MEMBER
;

403 
	`¥o˚ss_qun_membî_im
–
qq
, 
p
, 
msg
 );

406 
	`DBG
("Unknow¿mesßgêty≥ : %x", 
im_ty≥
 );

409 
	`¥Ÿ_im_ack_ªcv
–
qq
, 
p
 );

410 
	`DEL
–
msg
 );

411 
	}
}

	@prot_login.c

16 
	~<time.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 #ifde‡
__WIN32__


20 
	~<wösock.h
>

21 
	~<wööë.h
>

23 
	~<sys/sockë.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√tdb.h
>

28 
	~"qq˛õ¡.h
"

29 
	~"mem‹y.h
"

30 
	~"debug.h
"

31 
	~"qq∑ckë.h
"

32 
	~"∑ckëmgr.h
"

33 
	~"qq¸y±.h
"

34 
	~"md5.h
"

35 
	~"¸c32.h
"

36 
	~"¥Ÿocﬁ.h
"

37 
	~"group.h
"

38 
	~"buddy.h
"

39 
	~"qun.h
"

41 
	#RANDOM


	)

42 #ifde‡
RANDOM


44 
	$ønd2
()

47 
	}
}

48 
	$øndkey
(
uch¨
* 
key
)

50 
i
;

51  
i
=0; i<16; i++ )

52 
key
[
i
] = 
	`ønd2
();

53 
	}
}

55 
	$ª°‹e_vîsi⁄_d©a
–
qq˛õ¡
* 
qq
 )

57 
uch¨
 
QQ09_LOCALE
[] = {0x00,0x00,0x08,0x04,0x01,0xE0};

58 
uch¨
 
QQ09_VERSION_SPEC
[] = {0x00,0x00,0x02,0x00,0x00,

60 
uch¨
 
QQ09_EXE_HASH
[] = {0x62,0x0C,0x12,0x15,0x53,0x7E,

62 
	`mem˝y
–
qq
->
d©a
.
loˇÀ
, 
QQ09_LOCALE
, (QQ09_LOCALE) );

63 
	`mem˝y
–
qq
->
d©a
.
vîsi⁄_•ec
, 
QQ09_VERSION_SPEC
,

64 (
QQ09_VERSION_SPEC
) );

65 
	`mem˝y
–
qq
->
d©a
.
exe_hash
, 
QQ09_EXE_HASH
,

66 (
QQ09_EXE_HASH
) );

67 
	}
}

69 
	$¥Ÿ_logö_touch
–
qq˛õ¡
* 
qq
 )

71 
uch¨
 
zîos
[15]={0,};

72 
	`¥Ÿ_logö_touch_wôh_öfo
–
qq
, 
zîos
, (zeros) );

73 
	}
}

75 
	$¥Ÿ_logö_touch_wôh_öfo
–
qq˛õ¡
* 
qq
, 
uch¨
* 
£rvî_d©a
, uch¨ 
Àn
 )

77 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_TOUCH
 );

78 if–!
p
 ) ;

79 
byãbuf„r
 *
buf
 = 
p
->buf;

80 
	`ª°‹e_vîsi⁄_d©a
–
qq
 );

81 
	`øndkey
–
p
->
key
 );

82 
	`mem˝y
–
qq
->
d©a
.
£rvî_d©a
, sîvî_d©a, 
	`MIN
(
Àn
,(qq->data.server_data)) );

83 
	`put_w‹d
–
buf
, 1 );

84 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

85 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

86 
	`put_d©a
–
buf
, 
£rvî_d©a
, (
qq
->
d©a
.server_data) );

87 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

88 
	}
}

90 
	$¥Ÿ_logö_touch_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

92 
byãbuf„r
 *
buf
 = 
p
->buf;

93 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 ), 
ã°_ªsu…
;

94 if–
ªsu…
 == 0x00 ){

95 
qq
->
£rvî_time
 = 
	`gë_öt
–
buf
 );

96 
qq
->
£rvî_ù
 = 
	`gë_öt
–
buf
 );

97 
buf
->
pos
 += 8;

98 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
logö_tokí
 );

99 
ã°_ªsu…
 = 
	`gë_byã
–
buf
 );

100 if–
ã°_ªsu…
 == 0 ){

101 
	`¥Ÿ_logö_ªque°
–
qq
, 
NULL
, 0, 0 );

103 
qq
->
d©a
.
£rvî_öfo
.
w_ªdúe˘_cou¡
 = 1;

104 
qq
->
d©a
.
£rvî_öfo
.
c_ªdúe˘_cou¡
 = 
	`gë_byã
–
buf
 );

105 
qq
->
d©a
.
£rvî_öfo
.
c⁄n_i•_id
 = 
	`gë_öt
–
buf
 );

106 
qq
->
d©a
.
£rvî_öfo
.
£rvî_ªvî£
 = 
	`gë_öt
–
buf
 );

107 
qq
->
d©a
.
£rvî_öfo
.
c⁄n_ù
 = qq->
£rvî_ù
;

108 
qq
->
£rvî_ù
 = 
	`gë_öt
–
buf
 );

109 
ö_addr
 
addr
;

110 
addr
.
s_addr
 = 
	`ht⁄l
–
qq
->
£rvî_ù
 );

111 
	`DBG
("ªdúe˘ögÅÿ%s", 
	`öë_¡ﬂ
–
addr
 ) );

112 
	`c⁄√˘_£rvî
–
qq
 );

113 
	`¥Ÿ_logö_touch_wôh_öfo
–
qq
, qq->
d©a
.
£rvî_d©a
, (qq->data.server_data) );

116 
	`DBG
("ªsu…!=00: %d", 
ªsu…
 );

118 
	}
}

120 
	$¥Ÿ_logö_ªque°
–
qq˛õ¡
* 
qq
, 
tokí
* 
tok
, 
uöt
 
code
, 
≤g_d©a
 )

123 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGIN_REQUEST
 );

124 if–!
p
 ) ;

125 
byãbuf„r
 *
buf
 = 
p
->buf;

126 
	`put_w‹d
–
buf
, 0x0001 );

127 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

128 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

130 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
logö_tokí
.
Àn
 );

131 
	`put_d©a
–
buf
, 
qq
->
d©a
.
logö_tokí
.d©a, qq->d©a.logö_tokí.
Àn
 );

132 if–
code
 )

133 
	`put_byã
–
buf
, 4 );

135 
	`put_byã
–
buf
, 3 );

136 
	`put_byã
–
buf
, 0 );

137 
	`put_byã
–
buf
, 5 );

138 
	`put_öt
–
buf
, 0 );

139 
	`put_byã
–
buf
, 
≤g_d©a
 );

140 if–
code
 && 
tok
 ){

141 
	`put_byã
–
buf
, 4 );

142 
	`put_öt
–
buf
, 
	`ht⁄l
–
code
 ) );

144 
	`put_w‹d
–
buf
, 
tok
->
Àn
 );

145 
	`put_d©a
–
buf
, 
tok
->
d©a
,Åok->
Àn
 );

146 }if–
≤g_d©a
 && 
tok
 ){

148 
	`put_w‹d
–
buf
, 
tok
->
Àn
 );

149 
	`put_d©a
–
buf
, 
tok
->
d©a
,Åok->
Àn
 );

151 
	`put_byã
–
buf
, 0 );

152 
	`put_byã
–
buf
, 0 );

154 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

155 
	}
}

157 
	$¥Ÿ_logö_ªque°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

159 
byãbuf„r
 *
buf
 = 
p
->buf;

160 
tokí
 
™swî_tokí
;

161 
tokí
 
≤g_tokí
;

162 
uch¨
 
√xt
 = 0;

163 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

164 
	`gë_byã
–
buf
 );

165 
	`gë_byã
–
buf
 );

166 
uch¨
 
≤g_d©a
 = 
	`gë_byã
–
buf
 );

167 
	`gë_öt
–
buf
 );

168 
	`gë_tokí
–
buf
, &
™swî_tokí
 );

169 if–
≤g_d©a
 == 1 ){

170 
Àn
;

171 
Àn
 = 
	`gë_w‹d
–
buf
 );

172 
uch¨
* 
d©a
;

173 
	`NEW
–
d©a
, 
Àn
 ,
uch¨
);

174 if–!
d©a
 )

176 
	`gë_d©a
–
buf
, 
d©a
, 
Àn
 );

177 
	`gë_byã
–
buf
 );

178 
√xt
 = 
	`gë_byã
–
buf
 );

179 
∑th
[
PATH_LEN
];

180 
	`•rötf
–
∑th
, "%s/%u.≤g", 
qq
->
vîify_dú
, qq->
numbî
 );

181 
FILE
 *
Â
;

182 if–
√xt
 ){

183 
Â
 = 
	`f›í
–
∑th
, "wb" );

185 
Â
 = 
	`f›í
–
∑th
, "ab" );

186 
	`DBG
("gŸÖngáà%s", 
∑th
 );

188 if–
Â
 ){

189 
	`fwrôe
–
d©a
, 
Àn
, 1, 
Â
 );

190 
	`f˛o£
–
Â
 );

192 
	`DEL
–
d©a
 );

193 
	`gë_tokí
–
buf
, &
≤g_tokí
 );

196 if–
≤g_d©a
 ){

197 if–
√xt
 ){

198 
	`¥Ÿ_logö_ªque°
–
qq
, &
≤g_tokí
, 0, 1 );

200 
qq
->
d©a
.
vîify_tokí
 = 
™swî_tokí
;

201 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_VERIFYING
 );

204 
	`DBG
("process verifyÖassword");

205 
qq
->
d©a
.
tokí_c
 = 
™swî_tokí
;

206 
	`¥Ÿ_logö_vîify
–
qq
 );

208 
ªsu…
 = 0;

209 
	}
}

212 
	$¥Ÿ_logö_vîify
–
qq˛õ¡
* 
qq
 )

214 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGIN_VERIFY
 );

215 if–!
p
 ) ;

216 
byãbuf„r
 *
buf
 = 
p
->buf;

217 
byãbuf„r
 *
vîify_d©a
;

218 
	`NEW
–
vîify_d©a
, (
byãbuf„r
) ,bytebuffer);

219 if–!
vîify_d©a
 ) {

220 
	`∑ckëmgr_dñ_∑ckë
–&
qq
->
∑ckëmgr
, 
p
 );

223 
vîify_d©a
->
size
 = 
PACKET_SIZE
;

224 
	`put_öt
–
vîify_d©a
, 0xEE21B81B );

225 
	`put_w‹d
–
vîify_d©a
, 0x0001 );

226 
	`put_öt
–
vîify_d©a
, 
qq
->
numbî
 );

227 
	`put_d©a
–
vîify_d©a
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

228 
	`put_byã
–
vîify_d©a
, 00 );

229 
	`put_w‹d
–
vîify_d©a
, 0x0001 );

230 
	`put_d©a
–
vîify_d©a
, 
qq
->
md5_∑ss1
, (qq->md5_pass1) );

231 
	`put_öt
–
vîify_d©a
, 
qq
->
£rvî_time
 );

232 
vîify_d©a
->
pos
 += 13;

233 
	`put_öt
–
vîify_d©a
, 
qq
->
˛õ¡_ù
 );

234 
	`put_öt
–
vîify_d©a
, 0 );

235 
	`put_öt
–
vîify_d©a
, 0 );

236 
	`put_w‹d
–
vîify_d©a
, 0x0010 );

237 
	`put_d©a
–
vîify_d©a
, 
qq
->
d©a
.
vîify_key1
, 0x10 );

238 
	`put_d©a
–
vîify_d©a
, 
qq
->
d©a
.
vîify_key2
, 0x10 );

240 
	`put_w‹d
–
buf
, 0x00CA );

241 
	`put_w‹d
–
buf
, 0x0001 );

242 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

243 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

244 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
tokí_c
.
Àn
 );

245 
	`put_d©a
–
buf
, 
qq
->
d©a
.
tokí_c
.d©a, qq->d©a.tokí_c.
Àn
 );

246 if–
vîify_d©a
->
pos
 !104 ){ 
	`DBG
("wrongÖos!!!"); }

248 
out_Àn
 = 120;

249 
uch¨
 
í¸y±ed
[120+10];

250 
	`qqí¸y±
–
vîify_d©a
->
d©a
, vîify_d©a->
pos
, 
qq
->
md5_∑ss2
, 
í¸y±ed
, &
out_Àn
 );

251 
	`put_w‹d
–
buf
, 
out_Àn
 );

252 
	`put_d©a
–
buf
, 
í¸y±ed
, 
out_Àn
 );

254 
	`put_w‹d
–
buf
, 0x0000 );

255 
	`put_w‹d
–
buf
, 0x018B );

256 
buf
->
pos
 += 0x018B;

258 
	`DEL
–
vîify_d©a
 );

259 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

260 
	}
}

262 
	$¥Ÿ_logö_vîify_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

264 
byãbuf„r
 *
buf
 = 
p
->buf;

265 
	`gë_w‹d
–
buf
 );

266 
code
 = 
	`gë_byã
–
buf
 );

267  
code
 ){

269 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
logö_öfo_tokí
 );

270 
qq
->
d©a
.
logö_öfo_unknown1
 = 
	`gë_öt
–
buf
 );

271 
qq
->
£rvî_time
 = 
	`gë_öt
–
buf
 );

272 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
logö_öfo_d©a
 );

273 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
logö_öfo_magic
 );

274 
	`gë_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_key1
, 16 );

276 
	`¥Ÿ_logö_gë_öfo
–
qq
 );

280 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_DENIED
 );

281 
	`DBG
("Denied.");

284 
	`DBG
("NoÅhisÇumber.");

286 
	`DBG
("WrongÖassword.");

287 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_WRONGPASS
 );

290 
	`hex_dump
–
buf
->
d©a
, buf->
Àn
 );

293 
buf
->
pos
 = 11;

294 
uch¨
 
Àn
 = 
	`gë_w‹d
–
buf
 );

295 
msg
[256];

296 
	`gë_d©a
–
buf
, (
uch¨
*)
msg
, 
Àn
 );

297 
msg
[
Àn
] = 0;

298 
	`DBG
–
msg
 );

300 
	}
}

303 
	$¥Ÿ_logö_gë_öfo
–
qq˛õ¡
* 
qq
 )

305 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGIN_GET_INFO
 );

306 if–!
p
 ) ;

307 
byãbuf„r
 *
buf
 = 
p
->buf;

308 
	`put_w‹d
–
buf
, 0x00FD );

309 
	`put_byã
–
buf
, 0x00 );

310 
	`put_w‹d
–
buf
, 0x0101 );

311 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

312 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

313 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
tokí_c
.
Àn
 );

314 
	`put_d©a
–
buf
, 
qq
->
d©a
.
tokí_c
.d©a, qq->d©a.tokí_c.
Àn
 );

315 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
logö_öfo_tokí
.
Àn
 );

316 
	`put_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_tokí
.d©a, qq->d©a.logö_öfo_tokí.
Àn
 );

317 
	`put_öt
–
buf
, 
qq
->
d©a
.
logö_öfo_unknown1
 );

318 
	`put_öt
–
buf
, 
qq
->
£rvî_time
 );

319 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
logö_öfo_d©a
.
Àn
 );

320 
	`put_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_d©a
.d©a, qq->d©a.logö_öfo_d©a.
Àn
 );

321 
	`put_w‹d
–
buf
, 0x0000 );

322 
	`put_öt
–
buf
, 0x00000000 );

323 
	`mem˝y
–
p
->
key
, 
qq
->
d©a
.
logö_öfo_key1
, (qq->data.login_info_key1) );

324 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

325 
	}
}

327 
	$¥Ÿ_logö_gë_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

329 
byãbuf„r
 *
buf
 = 
p
->buf;

330 
	`gë_w‹d
–
buf
 );

331 
	`gë_w‹d
–
buf
 );

332 
	`gë_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_key2
, 16 );

333 
buf
->
pos
 += 8;

334 
qq
->
d©a
.
logö_öfo_unknown2
 = 
	`gë_öt
–
buf
 );

335 
qq
->
£rvî_time
 = 
	`gë_öt
–
buf
 );

336 
qq
->
˛õ¡_ù
 = 
	`gë_öt
–
buf
 );

337 
	`gë_öt
–
buf
 );

338 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
logö_öfo_œrge
 );

339 
	`gë_öt
–
buf
 );

340 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

341 
	`gë_d©a
–
buf
, (
uch¨
*)
qq
->
£lf
->
nick«me
, 
Àn
 );

342 
qq
->
£lf
->
nick«me
[
Àn
] = 0;

343 
	`DBG
("Hñlo, %s", 
qq
->
£lf
->
nick«me
 );

345 
qq
->
d©a
.
logö_li°_cou¡
 = 0;

346 
	`¥Ÿ_logö_gë_li°
–
qq
, 0 );

347 
	}
}

350 
	$¥Ÿ_logö_gë_li°
–
qq˛õ¡
* 
qq
, 
ush‹t
 
pos
 )

352 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGIN_GET_LIST
 );

353 if–!
p
 ) ;

354 
byãbuf„r
 *
buf
 = 
p
->buf;

355 
	`put_w‹d
–
buf
, 0x010A );

356 
	`put_w‹d
–
buf
, 0x0001 );

357 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

358 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

359 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
tokí_c
.
Àn
 );

360 
	`put_d©a
–
buf
, 
qq
->
d©a
.
tokí_c
.d©a, qq->d©a.tokí_c.
Àn
 );

361 
	`put_öt
–
buf
, 
qq
->
d©a
.
logö_öfo_unknown2
 );

362 
	`put_öt
–
buf
, 
qq
->
£rvî_time
 );

363 
	`put_öt
–
buf
, 
qq
->
˛õ¡_ù
 );

364 
	`put_öt
–
buf
, 00000000 );

365 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
logö_öfo_œrge
.
Àn
 );

366 
	`put_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_œrge
.d©a, qq->d©a.logö_öfo_œrge.
Àn
 );

367 
	`put_w‹d
–
buf
, 
pos
 );

368 
	`put_w‹d
–
buf
, 0x0000 );

369 
	`put_w‹d
–
buf
, 0x0081 );

370 
buf
->
pos
 += 0x0081;

371 
	`mem˝y
–
p
->
key
, 
qq
->
d©a
.
logö_öfo_key1
, (qq->data.login_info_key1) );

372 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

373 
	}
}

375 
	$¥Ÿ_logö_gë_li°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

377 
byãbuf„r
 *
buf
 = 
p
->buf;

378 
ush‹t
 
√xt_pos
, 
Àn
;

379 
Àn
 = 
	`gë_w‹d
–
buf
 );

380 
	`gë_öt
–
buf
 );

381 
√xt_pos
 = 
	`gë_w‹d
–
buf
 );

382 if–
√xt_pos
 > 0x0000 ){

385 
	`DBG
("√xt_po†%d", 
√xt_pos
 );

386 if–
Àn
 == 0x038A ){

387 
	`¥Ÿ_logö_gë_li°
–
qq
, ++ qq->
d©a
.
logö_li°_cou¡
 );

390 
	`¥Ÿ_logö_£nd_öfo
–
qq
 );

392  
buf
->
pos
 < buf->
Àn
-2 ){

393 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

394 
uch¨
 
ty≥
 = 
	`gë_byã
–
buf
 );

395 
uch¨
 
gid
 = 
	`gë_byã
–
buf
 );

396 if–
ty≥
 == 0x04 )

398 #i‚de‡
NO_QUN_INFO


399 
	`qun_gë
–
qq
, 
numbî
, 1 );

401 }if–
ty≥
 == 0x01 ){

402 #i‚de‡
NO_BUDDY_INFO


403 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 1 );

405 
b
->
gid
 = gid / 4;

409 
	}
}

412 
	$¥Ÿ_logö_£nd_öfo
–
qq˛õ¡
* 
qq
 )

414 
uch¨
 
unknown5
[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,

416 
uch¨
 
unknown6
[] = {0x3C,0xE7,0x06,0xE8,0x28,0xE9,

418 
uch¨
 
unknown7
[] = {0x34,0x40,0xA8,0x12,0x97,0xE3,

421 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGIN_SEND_INFO
 );

422 if–!
p
 ) ;

423 
byãbuf„r
 *
buf
 = 
p
->buf;

425 
	`øndkey
–
unknown6
 );

426 
	`øndkey
–
unknown7
 );

428 
	`put_w‹d
–
buf
, 0x0001 );

429 
	`put_d©a
–
buf
, 
qq
->
d©a
.
vîsi⁄_•ec
, (qq->data.version_spec) );

430 
	`put_öt
–
buf
, 
qq
->
d©a
.
logö_öfo_unknown2
 );

431 
	`put_öt
–
buf
, 
qq
->
£rvî_time
 );

432 
	`put_öt
–
buf
, 
qq
->
˛õ¡_ù
 );

433 
	`put_öt
–
buf
, 00000000 );

434 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
logö_öfo_œrge
.
Àn
 );

435 
	`put_d©a
–
buf
, 
qq
->
d©a
.
logö_öfo_œrge
.d©a, qq->d©a.logö_öfo_œrge.
Àn
 );

436 
buf
->
pos
 += 35;

437 
	`put_d©a
–
buf
, 
qq
->
d©a
.
exe_hash
, (qq->data.exe_hash) );

438 
	`put_byã
–
buf
, 
	`ønd
() );

439 
	`put_byã
–
buf
, 
qq
->
mode
 );

440 
	`put_d©a
–
buf
, 
unknown5
, (unknown5) );

441 
	`put_d©a
–
buf
, 
qq
->
d©a
.
£rvî_d©a
, (qq->data.server_data) );

442 
	`put_d©a
–
buf
, 
qq
->
d©a
.
loˇÀ
, (qq->data.locale) );

443 
buf
->
pos
 += 16;

444 
	`put_w‹d
–
buf
, 
qq
->
d©a
.
tokí_c
.
Àn
 );

445 
	`put_d©a
–
buf
, 
qq
->
d©a
.
tokí_c
.d©a, qq->d©a.tokí_c.
Àn
 );

446 
	`put_öt
–
buf
, 0x00000007 );

447 
	`put_öt
–
buf
, 0x00000000 );

448 
	`put_w‹d
–
buf
, 0x0804 );

449 
	`put_öt
–
buf
, 0x10014001 );

450 
	`put_w‹d
–
buf
, (
unknown6
) );

451 
	`put_d©a
–
buf
, 
unknown6
, (unknown6) );

452 
	`put_d©a
–
buf
, 
unknown5
, (unknown5) );

453 
	`put_d©a
–
buf
, 
qq
->
d©a
.
£rvî_d©a
, (qq->data.server_data) );

454 
	`put_byã
–
buf
, 0x02 );

455 
	`put_öt
–
buf
, 0x812807B8 );

456 
	`put_w‹d
–
buf
, (
unknown7
) );

457 
	`put_d©a
–
buf
, 
unknown7
, (unknown7) );

458 
buf
->
pos
 += 249;

459 
	`mem˝y
–
p
->
key
, 
qq
->
d©a
.
logö_öfo_key1
, (qq->data.login_info_key1) );

460 
	`po°_∑ckë
–
qq
, 
p
, 
RANDOM_KEY
 );

461 
	}
}

463 
	$¥Ÿ_logö_£nd_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

465 
byãbuf„r
 *
buf
 = 
p
->buf;

467 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

468 if–
ªsu…
 != 0 )

470 
	`DBG
("logöÑesu… = %d", 
ªsu…
 );

471 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_ERROR
 );

474 
	`gë_d©a
–
buf
, 
qq
->
d©a
.
£ssi⁄_key
, (qq->data.session_key) );

475 
	`DBG
("session key: " );

476 
	`hex_dump
–
qq
->
d©a
.
£ssi⁄_key
, 16 );

477 if–
qq
->
numbî
 !
	`gë_öt
–
buf
 ) ){

478 
	`DBG
("qq->number is wrong?");

480 
qq
->
˛õ¡_ù
 = 
	`gë_öt
–
buf
 );

481 
qq
->
˛õ¡_p‹t
 = 
	`gë_w‹d
–
buf
 );

482 
qq
->
loˇl_ù
 = 
	`gë_öt
–
buf
 );

483 
qq
->
loˇl_p‹t
 = 
	`gë_w‹d
–
buf
 );

484 
qq
->
logö_time
 = 
	`gë_öt
–
buf
 );

485 
	`gë_byã
–
buf
 );

486 
	`gë_byã
–
buf
 );

487 
buf
->
pos
 += 96;

488 
qq
->
œ°_logö_time
 = 
	`gë_öt
–
buf
 );

490 
uch¨
 
d©a
[20];

491 *(
uöt
*)
d©a
 = 
	`ht⁄l
–
qq
->
numbî
 );

492 
	`mem˝y
–
d©a
+4, 
qq
->d©a.
£ssi⁄_key
, 16 );

494 
md5_°©e_t
 
m°
;

495 
	`md5_öô
–&
m°
 );

496 
	`md5_≠≥nd
–&
m°
, (
md5_byã_t
*)
d©a
, 20 );

497 
	`md5_föish
–&
m°
, (
md5_byã_t
*)
qq
->
d©a
.
im_key
 );

499 
time_t
 
t
;

500 
t
 = 
	`CN_TIME
–
qq
->
œ°_logö_time
 );

501 
	`DBG
("œ°ÜogöÅime: %s", 
	`˘ime
–&
t
 ) );

502 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_LOGIN
 );

505 
	`¥Ÿ_u£r_ch™ge_°©us
–
qq
 );

506 
	`¥Ÿ_u£r_gë_Àvñ
–
qq
 );

507 
	`group_upd©e_li°
–
qq
 );

508 
	`buddy_upd©e_li°
–
qq
 );

509 #i‚de‡
NO_QUN_INFO


510 
	`qun_upd©e_Æl
–
qq
 );

512 
qq
->
⁄löe_˛ock
 = 0;

513 
	}
}

516 
	$¥Ÿ_logö_logout
–
qq˛õ¡
* 
qq
 )

518 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_LOGOUT
 );

519 if–!
p
 ) ;

520 
byãbuf„r
 *
buf
 = 
p
->buf;

521 
buf
->
pos
 += 16;

522 
p
->
√ed_ack
 = 0;

523 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

524 
	}
}

	@prot_misc.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 #ifde‡
__WIN32__


18 
	~<wösock.h
>

19 
	~<wööë.h
>

21 
	~<sys/sockë.h
>

22 
	~<¨∑/öë.h
>

23 
	~<√tdb.h
>

26 
	~"qq˛õ¡.h
"

27 
	~"mem‹y.h
"

28 
	~"debug.h
"

29 
	~"qq∑ckë.h
"

30 
	~"∑ckëmgr.h
"

31 
	~"qq¸y±.h
"

32 
	~"md5.h
"

33 
	~"¥Ÿocﬁ.h
"

38 
	$¥Ÿ_misc_brﬂdˇ°
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

40 
byãbuf„r
 *
buf
 = 
p
->buf;

41 
e
[4][256];

42 * 
°r
 = (*)
buf
->
d©a
;

43 
i
, 
Àn
, 
s
, 
j
;

44 
Àn
 = 
buf
->len;

45 
	`mem£t
–
e
, 0, (e) );

46  
i
=0, 
s
=0, 
j
=0; i<=
Àn
 && j<4; i++ ){

47 if–
°r
[
i
] =0x1‡|| i==
Àn
 ){

48 
	`mem˝y
–
e
[
j
], &
°r
[
s
], 
	`MIN
(
i
-s, 255) );

49 
j
++;

50 
s
 = 
i
+1;

53 if–
	`°rcmp
–
e
[0], "06" ) == 0 ){

55 
evít
[384];

56 
	`•rötf
–
evít
, "brﬂdˇ°^$%s^$%s", 
e
[1],É[3] );

57 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

58 }if–
	`°rcmp
–
e
[0], "41" ) == 0 ){

59 
uöt
 
‰om
, 
to
;

60 
uch¨
 
ty≥
;

61 
‰om
 = 
	`©oi
–
e
[1] );

62 
to
 = 
	`©oi
–
e
[2] );

63 
uch¨
 
Àn
 = 
e
[3][0];

64 
uch¨
* 
p
 = (uch¨*)(&
e
[3][1]+
Àn
);

65 
ty≥
 = *
p
++;

66 
qqbuddy
 *
b
 = 
	`buddy_gë
–
qq
, 
‰om
, 1 );

67 if–
b
 && 
ty≥
 == 1 ){

68 
b
->
vîify_Êag
 = 
VF_OK
;

69 if–
qq
->
auto_ac˚±
 ){

70 
	`¥Ÿ_buddy_vîify_addbuddy
–
qq
, 03, 
‰om
 );

74 if–
Àn
 > 0 ){

75 
	`°∫˝y
–
e
[0], &e[3][1], 
Àn
 );

76 
e
[0][
Àn
] = 0;

78 
	`°r˝y
–
e
[0], "Nothing" );

80 
	`•rötf
–
e
[1], "[%u]ËØ∑Ê±Ç‰Ω†Ê∑ªÂä†‰∏∫Â•ΩÂèã„ÄÇÈôÑË®ÄÔºö%s", 
‰om
,É[0] );

81 
	`buddy_msg_ˇŒback
–
qq
, 101, 
	`time
(
NULL
), 
e
[1] );

82 }if–
	`°rcmp
–
e
[0], "04" ) == 0 ){

83 
uöt
 
‰om
, 
to
;

84 
‰om
 = 
	`©oi
–
e
[1] );

85 
to
 = 
	`©oi
–
e
[2] );

86 
uch¨
 
Àn
 = 
e
[3][0];

88 if–
Àn
 > 0 ){

89 
	`°∫˝y
–
e
[0], &e[3][1], 
Àn
 );

90 
e
[0][
Àn
] = 0;

92 
	`°r˝y
–
e
[0], "Nothing" );

94 
	`•rötf
–
e
[1], "[%u]ÊãíÁªù‰Ω†Ê∑ªÂä†‰∏∫Â•ΩÂèã„ÄÇÈôÑË®ÄÔºö%s", 
‰om
,É[0] );

95 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
e
[1] );

96 }if–
	`°rcmp
–
e
[0], "40" ) == 0 ){

97 
uöt
 
‰om
;

98 
‰om
 = 
	`©oi
–
e
[1] );

100 
	`•rötf
–
e
[1], "[%u]Â∑≤ÁªèÊää‰Ω†Ê∑ªÂä†‰∏∫Â•ΩÂèã„ÄÇ", 
‰om
 );

101 
	`buddy_msg_ˇŒback
–
qq
, 101, 
	`time
(
NULL
), 
e
[1] );

102 }if–
	`°rcmp
–
e
[0], "43" ) == 0 ){

103 
uöt
 
‰om
, 
to
;

104 
‰om
 = 
	`©oi
–
e
[1] );

105 
to
 = 
	`©oi
–
e
[2] );

107 
	`buddy_upd©e_li°
–
qq
 );

108 
	`•rötf
–
e
[1], "[%u]Â∑≤ÁªèÊää‰Ω†Ê∑ªÂä†‰∏∫Â•ΩÂèãÔºÅ", 
‰om
 );

109 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
e
[1] );

110 }if–
	`°rcmp
–
e
[0], "03" ) == 0 ){

111 
uöt
 
‰om
, 
to
;

112 
‰om
 = 
	`©oi
–
e
[1] );

113 
to
 = 
	`©oi
–
e
[2] );

115 
	`buddy_upd©e_li°
–
qq
 );

116 
	`•rötf
–
e
[1], "‰Ω†Â∑≤ÁªèÊää[%u]Ê∑ªÂä†‰∏∫Â•ΩÂèãÔºÅ", 
‰om
 );

117 
	`buddy_msg_ˇŒback
–
qq
, 100, 
	`time
(
NULL
), 
e
[1] );

119 
	`DBG
("e[0]: %s", 
e
[0] );

121 
	}
}

	@prot_qun.c

15 
	~<time.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

19 
	~"qq˛õ¡.h
"

20 
	~"mem‹y.h
"

21 
	~"debug.h
"

22 
	~"qq∑ckë.h
"

23 
	~"∑ckëmgr.h
"

24 
	~"¥Ÿocﬁ.h
"

25 
	~"qun.h
"

26 
	~"utf8.h
"

28 
	$¥Ÿ_qun_gë_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, uöà
pos
 )

30 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_QUN_CMD
 );

31 if–!
p
 ) ;

32 
byãbuf„r
 *
buf
 = 
p
->buf;

33 
	`put_byã
–
buf
, 0x72 );

34 
	`put_öt
–
buf
, 
numbî
 );

35 
	`put_öt
–
buf
, 
pos
 );

36 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

37 
	}
}

39 
	$¥Ÿ_qun_£nd_msg
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg_c⁄ã¡
 )

41 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_QUN_CMD
 );

42 if–!
p
 ) ;

43 
ush‹t
 
Àn
 = 
	`°æí
–
msg_c⁄ã¡
 );

44 
byãbuf„r
 *
buf
 = 
p
->buf;

45 
	`put_byã
–
buf
, 0x2A );

46 
	`put_öt
–
buf
, 
numbî
 );

47 
byãbuf„r
* 
c⁄ã¡_buf
;

48 
	`NEW
–
c⁄ã¡_buf
, (
byãbuf„r
) ,bytebuffer);

49 if–!
c⁄ã¡_buf
 ) {

50 
	`∑ckëmgr_dñ_∑ckë
–&
qq
->
∑ckëmgr
, 
p
 );

53 
c⁄ã¡_buf
->
size
 = 
PACKET_SIZE
;

55 
	`put_w‹d
–
c⁄ã¡_buf
, 0x0001 );

56 
	`put_byã
–
c⁄ã¡_buf
, 0x01 );

57 
	`put_byã
–
c⁄ã¡_buf
, 0x00 );

58 
	`put_w‹d
–
c⁄ã¡_buf
, 0 );

59 
	`put_öt
–
c⁄ã¡_buf
, 0 );

61 
	`put_öt
–
c⁄ã¡_buf
, 0x4D534700 );

62 
	`put_öt
–
c⁄ã¡_buf
, 0x00000000 );

63 
	`put_öt
–
c⁄ã¡_buf
, 
p
->
time_¸óã
 );

64 
	`put_öt
–
c⁄ã¡_buf
, 
	`ønd
() );

65 
	`put_öt
–
c⁄ã¡_buf
, 0x00000000 );

66 
	`put_öt
–
c⁄ã¡_buf
, 0x09008600 );

67 
f⁄t_«me
[] = "ÂÆã‰Ωì";

68 
	`put_w‹d
–
c⁄ã¡_buf
, 
	`°æí
(
f⁄t_«me
) );

69 
	`put_d©a
–
c⁄ã¡_buf
, (
uch¨
*)
f⁄t_«me
, 
	`°æí
( font_name) );

70 
	`put_w‹d
–
c⁄ã¡_buf
, 0x0000 );

71 
	`put_byã
–
c⁄ã¡_buf
, 0x01 );

72 
	`put_w‹d
–
c⁄ã¡_buf
, 
Àn
+3 );

73 
	`put_byã
–
c⁄ã¡_buf
, 1 );

74 
	`put_w‹d
–
c⁄ã¡_buf
, 
Àn
 );

75 
	`put_d©a
–
c⁄ã¡_buf
, (
uch¨
*)
msg_c⁄ã¡
, 
Àn
 );

77 
	`put_w‹d
–
buf
, 
c⁄ã¡_buf
->
pos
 );

78 
	`put_d©a
–
buf
, 
c⁄ã¡_buf
->
d©a
, c⁄ã¡_buf->
pos
 );

79 
	`DEL
–
c⁄ã¡_buf
 );

80 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

81 
	}
}

83 
	$¥Ÿ_qun_gë_membîöfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, uöt* 
numbîs
, 
cou¡
 )

85 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_QUN_CMD
 );

86 if–!
p
 ) ;

87 
byãbuf„r
 *
buf
 = 
p
->buf;

88 
	`put_byã
–
buf
, 0x0C );

89 
	`put_öt
–
buf
, 
numbî
 );

90 
i
;

91 if–
cou¡
 > 30 ) count = 30;

92  
i
=0; i<
cou¡
; i++ ){

93 
	`put_öt
–
buf
, 
numbîs
[
i
] );

95 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

96 
	}
}

98 
	$¥Ÿ_qun_gë_⁄löe
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

100 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_QUN_CMD
 );

101 if–!
p
 ) ;

102 
byãbuf„r
 *
buf
 = 
p
->buf;

103 
	`put_byã
–
buf
, 0x0B );

104 
	`put_öt
–
buf
, 
numbî
 );

105 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

106 
	}
}

108 
	$¥Ÿ_qun_gë_membî«me
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

110 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_QUN_CMD
 );

111 if–!
p
 ) ;

112 
byãbuf„r
 *
buf
 = 
p
->buf;

113 
	`put_byã
–
buf
, 0x0F );

114 
	`put_öt
–
buf
, 
numbî
 );

115 
	`put_öt
–
buf
, 0x0 );

116 
	`put_öt
–
buf
, 0x0 );

117 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

118 
	}
}

120 
	$∑r£_qunöfo
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqqun
* 
q
 )

122 
uöt
 
œ°_numbî
;

123 
uch¨
 
m‹e
, 
°©us
;

124 
byãbuf„r
 *
buf
 = 
p
->buf;

125 
q
->
ext_numbî
 = 
	`gë_öt
–
buf
 );

126 
	`gë_w‹d
–
buf
 );

127 
	`gë_byã
–
buf
 );

128 
°©us
 = 
	`gë_byã
–
buf
 );

129 if–
°©us
 == 3 ){

130 
q
->
ty≥
 = 
	`gë_byã
–
buf
 );

131 
	`gë_öt
–
buf
 );

133 
q
->
ow√r
 = 
	`gë_öt
–
buf
 );

134 
q
->
auth_ty≥
 = 
	`gë_byã
–
buf
 );

135 
buf
->
pos
 += 6;

136 
q
->
ˇãg‹y
 = 
	`gë_öt
–
buf
 );

137 
q
->
max_membî
 = 
	`gë_w‹d
–
buf
 );

138 
buf
->
pos
 += 9;

140 
uch¨
 
Àn
 = 
	`gë_byã
–
buf
 );

141 
Àn
 = 
	`MIN
–
NICKNAME_LEN
-1,Üen );

142 
	`gë_d©a
–
buf
, (
uch¨
*)
q
->
«me
, 
Àn
 );

143 
q
->
«me
[
Àn
] = 0;

145 
	`gë_byã
–
buf
 );

146 
	`gë_byã
–
buf
 );

148 
Àn
 = 
	`gë_byã
–
buf
 );

150 
	`gë_d©a
–
buf
, (
uch¨
*)
q
->
™n
, 
Àn
 );

151 
q
->
™n
[
Àn
] = 0;

153 
Àn
 = 
	`gë_byã
–
buf
 );

154 
	`gë_d©a
–
buf
, (
uch¨
*)
q
->
öåo
, 
Àn
 );

155 
q
->
öåo
[
Àn
] = 0;

157 
	`gë_tokí
–
buf
, &
q
->
tokí_cmd
 );

159 
œ°_numbî
 = 
	`gë_öt
–
buf
 );

160 
m‹e
 = 
	`gë_byã
–
buf
 );

161  
buf
->
pos
 < buf->
Àn
 ){

162 
uöt
 
n
 = 
	`gë_öt
–
buf
 );

163 
uch¨
 
‹g
 = 
	`gë_byã
–
buf
 );

164 
uch¨
 
rﬁe
 = 
	`gë_byã
–
buf
 );

165 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, 
n
, 1 );

166 if–
m
==
NULL
 ){

167 
	`DBG
("m==NULL");

170 
m
->
‹g
 = org;

171 
m
->
rﬁe
 =Ñole;

173 if–
m‹e
 ){

174 
	`¥Ÿ_qun_gë_öfo
–
qq
, 
q
->
numbî
, 
œ°_numbî
 );

176 
	`qun_upd©e_membîöfo
–
qq
, 
q
 );

177 
	`qun_£t_membîs_off
–
qq
, 
q
 );

178 
	`qun_upd©e_⁄löe
–
qq
, 
q
 );

180 
	}
}

182 
	$∑r£_membîöfo
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqqun
* 
q
 )

184 
byãbuf„r
 *
buf
 = 
p
->buf;

185  
buf
->
pos
 < buf->
Àn
 ){

186 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

187 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, 
numbî
, 0 );

188 if–!
m
 ){

189 
	`DBG
("m==NULLÇumbî: %d", 
numbî
);

192 
m
->
Á˚
 = 
	`gë_w‹d
–
buf
 );

193 
m
->
age
 = 
	`gë_byã
–
buf
 );

194 
m
->
£x
 = 
	`gë_byã
–
buf
 );

195 
uch¨
 
«me_Àn
 = 
	`gë_byã
–
buf
 );

196 
«me_Àn
 = 
	`MIN
–
NICKNAME_LEN
-1,Çame_len );

197 
	`gë_d©a
–
buf
, (
uch¨
*)
m
->
nick«me
, 
«me_Àn
 );

198 
m
->
nick«me
[
«me_Àn
] = 0;

200 
	`gb_to_utf8
–
m
->
nick«me
, m->nick«me, 
NICKNAME_LEN
-1 );

201 
	`gë_w‹d
–
buf
 );

202 
m
->
qqshow
 = 
	`gë_byã
–
buf
 );

203 
m
->
Êag
 = 
	`gë_byã
–
buf
 );

205 
	}
}

207 
	$∑r£_⁄löe
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqqun
* 
q
 )

209 
byãbuf„r
 *
buf
 = 
p
->buf;

210 
	`gë_byã
–
buf
 );

212 
	`qun_£t_membîs_off
–
qq
, 
q
 );

213  
buf
->
pos
 < buf->
Àn
 ){

214 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

215 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, 
numbî
, 1 );

216 if–
m
 )

217 
m
->
°©us
 = 
QQ_ONLINE
;

219 
	`qun_put_sögÀ_evít
–
qq
, 
q
 );

220 
	}
}

222 
	$∑r£_membî«me
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
qqqun
* 
q
 )

224 
byãbuf„r
 *
buf
 = 
p
->buf;

225 
uöt
 
pos
;

226 
pos
 = 
	`gë_öt
–
buf
 );

227 
	`gë_öt
–
buf
 );

228  
buf
->
pos
 < buf->
Àn
 ){

229 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

230 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, 
numbî
, 0 );

231 if–!
m
 ){

232 
	`DBG
("m==NULL");

235 
uch¨
 
«me_Àn
 = 
	`gë_byã
–
buf
 );

236 
«me_Àn
 = 
	`MIN
–
NICKNAME_LEN
-1,Çame_len );

237 
	`gë_d©a
–
buf
, (
uch¨
*)
m
->
nick«me
, 
«me_Àn
 );

238 
m
->
nick«me
[
«me_Àn
] = 0;

240 
	}
}

242 
	$¥Ÿ_qun_cmd_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

244 
byãbuf„r
 *
buf
 = 
p
->buf;

245 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

246 
uch¨
 
ªsu…
 = 
	`gë_byã
–
buf
 );

247 if–
ªsu…
 != 0 ){

248 
	`DBG
("ªsu… = %d", 
ªsu…
 );

251 
uöt
 
numbî
 = 
	`gë_öt
–
buf
 );

252 
qqqun
* 
q
 = 
	`qun_gë
–
qq
, 
numbî
, 0 );

253 if–!
q
 ){

254 
	`DBG
("q==null");

257  
cmd
 ){

261 
	`∑r£_qunöfo
–
qq
, 
p
, 
q
 );

264 
	`∑r£_membîöfo
–
qq
, 
p
, 
q
 );

267 
	`∑r£_⁄löe
–
qq
, 
p
, 
q
 );

270 
	`∑r£_membî«me
–
qq
, 
p
, 
q
 );

273 
	`DBG
("unknow¿cmd = %x", 
cmd
 );

276 
	}
}

	@prot_user.c

14 
	~<time.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 #ifde‡
__WIN32__


18 
	~<wösock.h
>

19 
	~<wööë.h
>

21 
	~<sys/sockë.h
>

22 
	~<¨∑/öë.h
>

23 
	~<√tdb.h
>

26 
	~"qq˛õ¡.h
"

27 
	~"mem‹y.h
"

28 
	~"debug.h
"

29 
	~"qq∑ckë.h
"

30 
	~"∑ckëmgr.h
"

31 
	~"¥Ÿocﬁ.h
"

32 
	~"buddy.h
"

33 
	~"utû.h
"

35 
	$¥Ÿ_u£r_kìp_Æive
–
qq˛õ¡
* 
qq
 )

37 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_KEEP_ALIVE
 );

38 if–!
p
 ) ;

39 
byãbuf„r
 *
buf
 = 
p
->buf;

40 
num_°r
[16];

41 
	`•rötf
–
num_°r
, "%d", 
qq
->
numbî
 );

42 
	`put_d©a
–
buf
, (
uch¨
*)
num_°r
, 
	`°æí
(num_str) );

43 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

44 
	}
}

46 
	$¥Ÿ_u£r_kìp_Æive_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

48 
byãbuf„r
 *
buf
 = 
p
->buf;

49 
	`gë_byã
–
buf
 );

50 
⁄löes
;

51 
⁄löes
 = 
	`gë_öt
–
buf
 );

52 
ù
;

53 
ù
 = 
	`gë_öt
–
buf
 );

54 
ush‹t
 
p‹t
 = 
	`gë_w‹d
–
buf
 );

55 
	`gë_w‹d
–
buf
 );

56 
uöt
 
£rvî_time
;

57 
£rvî_time
 = 
	`gë_öt
–
buf
 );

59 
time_t
 
t
;

60 
t
 = 
	`CN_TIME
–
£rvî_time
 );

61 
evít
[64];

62 
	`•rötf
–
evít
, "kì∑live^$%u", 
qq
->
numbî
 );

63 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

65 
p‹t
 = 
ù
= 0;

66 
	}
}

68 
	$¥Ÿ_u£r_gë_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

70 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_USER_INFO
 );

71 if–!
p
 ) ;

72 
byãbuf„r
 *
buf
 = 
p
->buf;

73 
numbî_°r
[16];

74 
	`•rötf
–
numbî_°r
, "%u", 
numbî
 );

75 
	`put_d©a
–
buf
, (
uch¨
*)
numbî_°r
, 
	`°æí
(Çumber_str ) );

77 
p
->
m©ch
 = (
qq∑ckë
*)
numbî
;

78 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

79 
	}
}

81 
	$¥Ÿ_u£r_gë_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

83 
byãbuf„r
 *
buf
 = 
p
->buf;

84 * 
°r
 = (*)
buf
->
d©a
;

85 
uöt
 
numbî
;

86 
i
, 
j
, 
Àn
 = 
buf
->Àn, 
s
;

87 if–!
p
->
m©ch
 )

89 
numbî
 = (
uöt
)
p
->
m©ch
->match;

91 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 1 );

92 if–!
b
 )

94  
i
=0; i<
Àn
; i++ ){

95 if–
°r
[
i
] == 0x1E ) str[i] = '\0';

97 
°r
[
i
] = '\0';

98  
i
=0, 
s
=0, 
j
=0; i<=
Àn
 && j<
MAX_USER_INFO
; i++ ){

99 if–
°r
[
i
] == '\0' ){

100 
	`°∫˝y
–
b
->
öfo_°rög
[
j
], &
°r
[
s
], 
i
-s );

101 
b
->
öfo_°rög
[
j
][
i
-
s
] = 0;

103 
j
++;

104 
s
 = 
i
+1;

109 
	`°∫˝y
–
b
->
nick«me
, b->
öfo_°rög
[1], 
NICKNAME_LEN
-1 );

110 
	`DBG
("gŸ u£∏öfÿ%u(%s)", 
b
->
numbî
, b->
nick«me
 );

111 
	}
}

113 
	$¥Ÿ_u£r_ch™ge_°©us
–
qq˛õ¡
* 
qq
 )

115 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_CHANGE_STATUS
 );

116 if–!
p
 ) ;

117 
byãbuf„r
 *
buf
 = 
p
->buf;

118 
	`put_byã
–
buf
, 
qq
->
mode
 );

119 
	`put_öt
–
buf
, 0 );

120 
	`put_öt
–
buf
, 1 );

121 
	`put_w‹d
–
buf
, 0 );

122 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

123 
	}
}

125 
	$¥Ÿ_u£r_ch™ge_°©us_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

127 
byãbuf„r
 *
buf
 = 
p
->buf;

128 if–
	`gë_byã
–
buf
 ) == '0' ){

129 
qq
->
£lf
->
°©us
 = qq->
mode
;

130 
	`DBG
("ch™gê°©u†tÿ%d", 
qq
->
mode
 );

131 
evít
[16];

132 
	`•rötf
–
evít
, "°©us^$%d", 
qq
->
mode
 );

133 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

135 
	`DBG
("change status failed.");

137 
	}
}

140 
	$¥Ÿ_u£r_gë_key
–
qq˛õ¡
* 
qq
, 
uch¨
 
key
 )

142 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_KEY
 );

143 if–!
p
 ) ;

144 
byãbuf„r
 *
buf
 = 
p
->buf;

145 
	`put_byã
–
buf
, 
key
 );

146 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

147 
	}
}

149 
	$¥Ÿ_u£r_gë_key_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

151 
byãbuf„r
 *
buf
 = 
p
->buf;

152 
uch¨
 
cmd
, 
ªsu…
;

153 
uch¨
 
key
[16];

154 
tokí
 
tok
;

155 
cmd
 = 
	`gë_byã
–
buf
 );

156 
ªsu…
 = 
	`gë_byã
–
buf
 );

157 if–
ªsu…
 != 0 ){

158 
	`DBG
("faildÅo get key.");

160  
cmd
 ){

162 
	`gë_d©a
–
buf
, 
key
, 16 );

163 
buf
->
pos
 += 12;

164 
	`gë_tokí
–
buf
, &
tok
 );

165 
	`mem˝y
–
qq
->
d©a
.
fûe_key
, 
key
, 16 );

166 
qq
->
d©a
.
fûe_tokí
 = 
tok
;

167 
	`DBG
("got file key.");

170 
	`DBG
("got unknown key.");

172 
	}
}

174 
	$¥Ÿ_u£r_gë_nŸi˚
–
qq˛õ¡
* 
qq
, 
uch¨
 
ty≥
 )

176 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_KEY
 );

177 if–!
p
 ) ;

178 
byãbuf„r
 *
buf
 = 
p
->buf;

179 
p
->
√ed_ack
 = 0;

180  
ty≥
 ){

182 
	`put_öt
–
buf
, 
qq
->
numbî
 );

185 
	`put_öt
–
buf
, 
qq
->
numbî
 );

186 
	`put_w‹d
–
buf
, 0x0007 );

187 
	`put_w‹d
–
buf
, 0x0008 );

190 
	`DBG
("unknownÅype.");

192 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

193 
	}
}

195 
	$¥Ÿ_u£r_gë_nŸi˚_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

197 
byãbuf„r
 *
buf
 = 
p
->buf;

198 
uch¨
 
ªsu…
, 
cmd
;

199 
ªsu…
 = 
	`gë_byã
–
buf
 );

200 
cmd
 = 
	`gë_byã
–
buf
 );

201  
cmd
 ){

206 
ush‹t
 
Àn
 = 
	`gë_w‹d
–
buf
 );

207 * 
°r
;

208 
	`NEW
–
°r
, 
Àn
+1 ,);

209 if–!
°r
 )

211 
	`gë_d©a
–
buf
, (
uch¨
*)
°r
, 
Àn
 );

212 
°r
[
Àn
] = 0;

213 
	`DBG
("nŸi˚: %s", 
°r
 );

214 
	`DEL
–
°r
 );

218 
	}
}

220 
	$¥Ÿ_u£r_check_ù
–
qq˛õ¡
* 
qq
 )

222 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_CHECK_IP
 );

223 if–!
p
 ) ;

224 
byãbuf„r
 *
buf
 = 
p
->buf;

225 
	`put_byã
–
buf
, 2 );

226 
	`put_byã
–
buf
, 2 );

227 
	`put_byã
–
buf
, 0 );

228 
	`put_öt
–
buf
, 0xD4020202 );

229 
	`put_öt
–
buf
, 
qq
->
œ°_logö_time
 );

230 
	`put_byã
–
buf
, 8 );

231 
	`put_byã
–
buf
, 3 );

232 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

233 
	}
}

235 
	$¥Ÿ_u£r_check_ù_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

237 
byãbuf„r
 *
buf
 = 
p
->buf;

238 
ush‹t
 
Àn
;

239 * 
°r
, *
t
;

240 
	`NEW
–
°r
, 
buf
->
Àn
 ,);

241 if–!
°r
 ) ;

242 
t
 = 
°r
;

243 if–
	`gë_byã
–
buf
 ) != 2 ){

244 
	`DBG
("reply != 2" );

247 if–
buf
->
pos
 =buf->
Àn
 )

249 
	`gë_byã
–
buf
 );

250 
Àn
 = 
	`gë_w‹d
–
buf
 );

251 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

252 
t
 +
Àn
;

253 
	`gë_byã
–
buf
 );

254 
Àn
 = 
	`gë_w‹d
–
buf
 );

255 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

256 
t
 +
Àn
;

257 
	`gë_byã
–
buf
 );

258 
buf
->
pos
 += 9;

259 
Àn
 = 
	`gë_w‹d
–
buf
 );

260 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

261 
t
 +
Àn
;

262 
	`gë_byã
–
buf
 );

263 
	`gë_w‹d
–
buf
 );

264 
Àn
 = 
	`gë_w‹d
–
buf
 );

265 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

266 
t
 +
Àn
;

267 
	`gë_w‹d
–
buf
 );

268 
	`gë_byã
–
buf
 );

269 
Àn
 = 
	`gë_w‹d
–
buf
 );

270 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

271 
t
 +
Àn
;

272 
	`gë_w‹d
–
buf
 );

273 
	`gë_byã
–
buf
 );

274 
Àn
 = 
	`gë_w‹d
–
buf
 );

275 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

276 
t
 +
Àn
;

277 
	`gë_w‹d
–
buf
 );

278 
	`gë_byã
–
buf
 );

279 
Àn
 = 
	`gë_w‹d
–
buf
 );

280 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

281 
t
 +
Àn
;

282 
	`gë_w‹d
–
buf
 );

283 
	`gë_byã
–
buf
 );

284 
Àn
 = 
	`gë_w‹d
–
buf
 );

285 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

286 
t
 +
Àn
;

287 
	`gë_byã
–
buf
 );

288 
Àn
 = 
	`gë_w‹d
–
buf
 );

289 
	`gë_d©a
–
buf
, (
uch¨
*)
t
, 
Àn
 );

290 
t
 +
Àn
;

291 *
t
 = 0;

293 
	`DEL
–
°r
 );

294 
	}
}

297 
	$¥Ÿ_u£r_gë_Àvñ
–
qq˛õ¡
* 
qq
 )

299 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_GET_LEVEL
 );

300 if–!
p
 ) ;

301 
byãbuf„r
 *
buf
 = 
p
->buf;

302 
	`put_byã
–
buf
, 0x88 );

303 
	`put_öt
–
buf
, 
qq
->
numbî
 );

304 
	`put_byã
–
buf
, 0x00 );

305 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

306 
	}
}

308 
	$¥Ÿ_u£r_gë_Àvñ_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

310 
byãbuf„r
 *
buf
 = 
p
->buf;

311 
uch¨
 
cmd
;

312 
cmd
 = 
	`gë_byã
–
buf
 );

313 
	`gë_öt
–
buf
 );

315  
cmd
 ){

317 
	`gë_öt
–
buf
 );

318 
qq
->
Àvñ
 = 
	`gë_w‹d
–
buf
 );

319 
qq
->
a˘ive_days
 = 
	`gë_w‹d
–
buf
 );

320 
	`gë_w‹d
–
buf
 );

321 
qq
->
upgøde_days
 = 
	`gë_w‹d
–
buf
 );

322 
	`DBG
("Àvñ: %dá˘ive_days: %d upgøde_days: %d", 
qq
->
Àvñ
,

323 
qq
->
a˘ive_days
, qq->
upgøde_days
 );

324 
evít
[32];

325 
	`•rötf
–
evít
, "Àvñ^$%d^$%d^$%d", 
qq
->
Àvñ
,

326 
qq
->
a˘ive_days
, qq->
upgøde_days
 );

327 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

330 
	`DBG
("unknow¿cmd: 0x%x", 
cmd
 );

334 
	}
}

336 
	$¥Ÿ_u£r_ªque°_tokí
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
uch¨
 
›î©i⁄
, 
ush‹t
 
ty≥
, uöà
code
 )

338 
qq∑ckë
* 
p
 = 
	`∑ckëmgr_√w_£nd
–
qq
, 
QQ_CMD_REQUEST_TOKEN
 );

339 if–!
p
 ) ;

340 
byãbuf„r
 *
buf
 = 
p
->buf;

341 
qq
->
d©a
.
›î©i⁄
 = operation;

342 if–
code
 ){

343 
	`put_byã
–
buf
, 2 );

344 
	`put_w‹d
–
buf
, 
ty≥
 );

345 
	`put_öt
–
buf
, 
numbî
 );

346 
	`put_w‹d
–
buf
, 4 );

347 
	`put_öt
–
buf
, 
	`ht⁄l
(
code
) );

348 
	`put_w‹d
–
buf
, 
	`°æí
(
qq
->
d©a
.
qq£ssi⁄
));

349 
	`put_d©a
–
buf
, (
uch¨
*)
qq
->
d©a
.
qq£ssi⁄
, 
	`°æí
(qq->data.qqsession));

351 
	`put_byã
–
buf
, 1 );

352 
	`put_w‹d
–
buf
, 
ty≥
 );

353 
	`put_öt
–
buf
, 
numbî
 );

354 
qq
->
d©a
.
›î©ög_numbî
 = 
numbî
 ;

356 
	`po°_∑ckë
–
qq
, 
p
, 
SESSION_KEY
 );

357 
	}
}

359 
	$¥Ÿ_u£r_ªque°_tokí_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 )

361 
byãbuf„r
 *
buf
 = 
p
->buf;

362 
uch¨
 
cmd
 = 
	`gë_byã
–
buf
 );

363 
	`gë_w‹d
–
buf
 );

364 
uch¨
 
vîify
 = 
	`gë_byã
–
buf
 );

365 if–
vîify
 ){

366 *
uæ
, *
d©a
, *
£ssi⁄
;

367 
d©Æí
 = 
	`KB
(4);

368 
	`DBG
("need verifying...");

369 if–
buf
->
pos
 =buf->
Àn
 ) {

370 
	`puts
("Verifying code is incorrect!");

373 
	`NEW
–
d©a
, 
d©Æí
 ,);

374 
	`NEW
–
uæ
, 128 ,);

375 
	`NEW
–
£ssi⁄
, 128 ,);

376 
Àn
, 
ªt
;

377 
Àn
 = 
	`gë_w‹d
–
buf
 );

378 if–
Àn
 >= 128 ){

379 
	`DBG
("url isÅooÜong."); ;

381 
	`gë_d©a
–
buf
, (
uch¨
*)
uæ
, 
Àn
 );

382 
ªt
 = 
	`hâp_ªque°
–&
qq
->
hâp_sock
, 
uæ
, 
£ssi⁄
, 
d©a
, &
d©Æí
 );

383 if–
ªt
 == 0 ){

384 
∑th
[
PATH_LEN
];

385 
	`•rötf
–
∑th
, "%s/%u.jpg", 
qq
->
vîify_dú
, qq->
numbî
 );

386 
FILE
 *
Â
;

387 
Â
 = 
	`f›í
–
∑th
, "wb" );

388 
	`DBG
("gŸÖngáà%s", 
∑th
 );

389 if–
Â
 ){

390 
	`fwrôe
–
d©a
, 
d©Æí
, 1, 
Â
 );

391 
	`f˛o£
–
Â
 );

393 
	`°∫˝y
–
qq
->
d©a
.
qq£ssi⁄
, 
£ssi⁄
, 127 );

394 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_VERIFYING
 );

395 
	`puts
("YouÇeedÅo inputÅhe verifying code.");

397 
	`DBG
("hâp_ªque° faûed.Ñë=%d", 
ªt
 );

399 
	`DEL
–
d©a
 );

400 
	`DEL
–
uæ
 );

401 
	`DEL
–
£ssi⁄
 );

403 
	`gë_tokí
–
buf
, &
qq
->
d©a
.
u£r_tokí
 );

404 
qq
->
d©a
.
u£r_tokí_time
 = 
	`time
(
NULL
);

405 
	`DBG
("gotÅoken");

406 
qqbuddy
 *
b
 = 
	`buddy_gë
–
qq
, qq->
d©a
.
›î©ög_numbî
, 0 );

407 if–
b
 ){

408  
qq
->
d©a
.
›î©i⁄
 ){

409 
OP_ADDBUDDY
:

410 if–
b
->
vîify_Êag
 =
VF_VERIFY
 ){

411 
	`¥Ÿ_buddy_vîify_addbuddy
–
qq
, 02, qq->
d©a
.
›î©ög_numbî
 );

412 }if–
b
->
vîify_Êag
 =
VF_OK
 ){

413 
	`¥Ÿ_buddy_vîify_addbuddy
–
qq
, 00, qq->
d©a
.
›î©ög_numbî
 );

416 
OP_DELBUDDY
:

417 
	`¥Ÿ_buddy_dñ_buddy
–
qq
, qq->
d©a
.
›î©ög_numbî
 );

422 
cmd
 = 0;

423 
	}
}

	@protocol.c

14 
	~<°rög.h
>

15 
	~<°dlib.h
>

16 
	~<time.h
>

17 #ifde‡
__WIN32__


18 
	~<wösock.h
>

19 
	~<wööë.h
>

21 
	~<sys/sockë.h
>

22 
	~<¨∑/öë.h
>

23 
	~<√tdb.h
>

26 
	~"qqdef.h
"

27 
	~"qq˛õ¡.h
"

28 
	~"qq¸y±.h
"

29 
	~"debug.h
"

30 
	~"mem‹y.h
"

31 
	~"¥Ÿocﬁ.h
"

34 
	$po°_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
key_ty≥
 )

36 
byãbuf„r
* 
buf
 = 
p
->buf;

37 
hód_Àn
 = 
qq
->
√tw‹k
==
TCP
 ? 13 : 11;

38 if–
qq
->
log_∑ckë
 ){

39 
	`DBG
("[%d] sídÖackë cmd: %x seq: %x", 
qq
->
numbî
, 
p
->
comm™d
,Ö->
£qno
 );

40 
	`hex_dump
–
buf
->
d©a
, buf->
pos
 );

42 
uch¨
* 
í¸y±ed
;

43  
key_ty≥
 )

45 
NO_KEY
:

47 if–
buf
->
pos
+
hód_Àn
+1 <buf->
size
 ){

48 
	`memmove
–
buf
->
d©a
+
hód_Àn
, buf->d©a, buf->
pos
 );

49 
buf
->
pos
 +
hód_Àn
;

53 
RANDOM_KEY
:

55 
	`NEW
–
í¸y±ed
, 
PACKET_SIZE
 ,
uch¨
);

56 if–!
í¸y±ed
 ) {

57 
	`DBG
("Error:ÉncryptedÇotállocated.");

60 
out_Àn
 = 
PACKET_SIZE
;

61 
	`qqí¸y±
–
buf
->
d©a
, buf->
pos
, 
p
->
key
, 
í¸y±ed
, &
out_Àn
 );

63 if–
p
->
comm™d
 =
QQ_CMD_LOGIN_SEND_INFO
 ||Ö->comm™d =
QQ_CMD_LOGIN_GET_INFO
 ||

64 
p
->
comm™d
 =
QQ_CMD_LOGIN_GET_LIST
 ){

65 if–
out_Àn
+
hód_Àn
+1+(2+
qq
->
d©a
.
logö_öfo_magic
.
Àn
Ë<
buf
->
size
 ){

66 *(
ush‹t
*)(
buf
->
d©a
+
hód_Àn
Ë
	`ht⁄s
–
qq
->d©a.
logö_öfo_magic
.
Àn
 );

67 
	`mem˝y
–
buf
->
d©a
+
hód_Àn
+2, 
qq
->d©a.
logö_öfo_magic
.d©a, qq->d©a.logö_öfo_magic.
Àn
 );

68 
	`mem˝y
–
buf
->
d©a
+
qq
->d©a.
logö_öfo_magic
.
Àn
+
hód_Àn
+2, 
í¸y±ed
, 
out_Àn
 );

69 
buf
->
pos
 = 
out_Àn
+
qq
->
d©a
.
logö_öfo_magic
.
Àn
+
hód_Àn
+2;

71 
	`DBG
("encrypted data isÅooÜargeÅo store inÅheÖacket.");

74 if–
out_Àn
+16+
hód_Àn
+1 <
buf
->
size
 ){

75 
	`mem˝y
–
buf
->
d©a
+
hód_Àn
, 
p
->
key
, 16 );

76 
	`mem˝y
–
buf
->
d©a
+16+
hód_Àn
, 
í¸y±ed
, 
out_Àn
 );

77 
buf
->
pos
 = 
out_Àn
+16+
hód_Àn
;

79 
	`DBG
("encrypted data isÅooÜargeÅo store inÅheÖacket.");

82 
	`DEL
–
í¸y±ed
 );

85 
SESSION_KEY
:

87 
	`NEW
–
í¸y±ed
, 
PACKET_SIZE
 ,
uch¨
);

88 if–!
í¸y±ed
 ) {

89 
	`DBG
("Error:ÉncryptedÇotállocated.");

92 
out_Àn
 = 
PACKET_SIZE
;

93 
	`qqí¸y±
–
buf
->
d©a
, buf->
pos
, 
qq
->d©a.
£ssi⁄_key
, 
í¸y±ed
, &
out_Àn
 );

95 if–
out_Àn
+
hód_Àn
+1 <
buf
->
size
 ){

96 
	`mem˝y
–
buf
->
d©a
+
hód_Àn
, 
í¸y±ed
, 
out_Àn
 );

97 
buf
->
pos
 = 
out_Àn
+
hód_Àn
;

99 
	`DBG
("encrypted data isÅooÜargeÅo store inÅheÖacket.");

101 
	`DEL
–
í¸y±ed
 );

106 
	`put_byã
–
buf
, 
p
->
èû
 );

107 
buf
->
Àn
 = buf->
pos
;

108 
buf
->
pos
 = 0;

110 if–
qq
->
√tw‹k
 =
TCP
 )

111 
	`put_w‹d
–
buf
, buf->
Àn
 );

112 
	`put_byã
–
buf
, 
p
->
hód
 );

113 
	`put_w‹d
–
buf
, 
p
->
vîsi⁄
 );

114 
	`put_w‹d
–
buf
, 
p
->
comm™d
 );

115 
	`put_w‹d
–
buf
, 
p
->
£qno
 );

116 
	`put_öt
–
buf
, 
qq
->
numbî
 );

117 
p
->
key_ty≥
 = key_type;

118  
	`∑ckëmgr_put
–
qq
, 
p
 );

119 
	}
}

121 
	$de¸y±_wôh_key
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
byãbuf„r
* 
buf
, 
uch¨
* 
key
 )

123 
out_Àn
 = 
PACKET_SIZE
;

124 
hód_Àn
 = 
qq
->
√tw‹k
==
TCP
 ? 9 : 7;

125 
uch¨
* 
de¸y±ed
;

126 
	`NEW
–
de¸y±ed
, 
PACKET_SIZE
 ,
uch¨
);

127 if–!
de¸y±ed
 ) {

128 
	`DBG
("Error: decryptedÇotállocated.");

131 
ªt
 = 
	`qqde¸y±
–
buf
->
d©a
+
hód_Àn
, buf->
Àn
-hód_Àn-1, 
key
, 
de¸y±ed
, &
out_Àn
 );

132 if–
ªt
 ){

134 if–!
p
->
buf
 )

136 if–
out_Àn
 < 
PACKET_SIZE
 )

137 
	`mem˝y
–
p
->
buf
->
d©a
, 
de¸y±ed
, 
out_Àn
 );

139 
	`DBG
("Wr⁄g out_À¿: %d", 
out_Àn
 );

140 
p
->
buf
->
pos
 = 0;

141 
p
->
buf
->
Àn
 = 
out_Àn
;

143 
	`DEL
–
de¸y±ed
 );

144  
ªt
;

145 
	}
}

147 
	$de¸y±_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
byãbuf„r
* 
buf
 )

150 
hód_Àn
 = 
qq
->
√tw‹k
==
TCP
 ? 9 : 7;

151 if–
p
->
m©ch
 ){

152  
p
->
m©ch
->
key_ty≥
 ){

153 
NO_KEY
:

154 
	`mem˝y
–
p
->
buf
->
d©a
, buf->d©a+
hód_Àn
, buf->
Àn
-head_len-1 );

155 
p
->
buf
->
Àn
 = buf->Àn-
hód_Àn
-1;

156 
p
->
buf
->
pos
 = 0;

158 
RANDOM_KEY
:

160 if–
p
->
comm™d
 =
QQ_CMD_LOGIN_VERIFY
 ){

161 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
, qq->
d©a
.
vîify_key2
 ) )

164 if–
p
->
comm™d
 =
QQ_CMD_LOGIN_SEND_INFO
 ||Ö->comm™d =
QQ_CMD_LOGIN_GET_LIST
 ){

165 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
, qq->
d©a
.
logö_öfo_key2
 ) )

168 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
,Ö->
m©ch
->
key
 ) )

172 
SESSION_KEY
:

174 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
, qq->
d©a
.
£ssi⁄_key
 ) )

180 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
, qq->
d©a
.
£ssi⁄_key
 ) )

183 if–
	`de¸y±_wôh_key
–
qq
, 
p
, 
buf
, qq->
md5_∑ss2
 ) )

185 
	`DBG
("ˇ¬Ÿ de¸y±Öackë. cmd:%x", 
p
->
comm™d
 );

188 
	}
}

190 
	$¥o˚ss_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
byãbuf„r
* 
buf
 )

192 if–!
	`de¸y±_∑ckë
–
qq
, 
p
, 
buf
 ) )

194 if–
qq
->
log_∑ckë
 ){

195 
	`DBG
("[%d]ÑecvÖackë vî:%x cmd: %x seqno: %x", 
qq
->
numbî
, 
p
->
vîsi⁄
,Ö->
comm™d
,Ö->
£qno
 );

196 
	`hex_dump
–
p
->
buf
->
d©a
,Ö->buf->
Àn
 );

198  
p
->
comm™d
 ){

199 
QQ_CMD_TOUCH
:

200 
	`¥Ÿ_logö_touch_ª∂y
–
qq
, 
p
 );

202 
QQ_CMD_LOGIN_REQUEST
:

203 
	`¥Ÿ_logö_ªque°_ª∂y
–
qq
, 
p
 );

205 
QQ_CMD_LOGIN_VERIFY
:

206 
	`¥Ÿ_logö_vîify_ª∂y
–
qq
, 
p
 );

208 
QQ_CMD_LOGIN_GET_INFO
:

209 
	`¥Ÿ_logö_gë_öfo_ª∂y
–
qq
, 
p
 );

211 
QQ_CMD_LOGIN_GET_LIST
:

212 
	`¥Ÿ_logö_gë_li°_ª∂y
–
qq
, 
p
 );

214 
QQ_CMD_LOGIN_SEND_INFO
:

215 
	`¥Ÿ_logö_£nd_öfo_ª∂y
–
qq
, 
p
 );

217 
QQ_CMD_KEEP_ALIVE
:

218 
	`¥Ÿ_u£r_kìp_Æive_ª∂y
–
qq
, 
p
 );

220 
QQ_CMD_RECV_IM_09
:

221 
QQ_CMD_RECV_IM
:

222 
	`¥Ÿ_im_ªcv_msg
–
qq
, 
p
 );

224 
QQ_CMD_CHANGE_STATUS
:

225 
	`¥Ÿ_u£r_ch™ge_°©us_ª∂y
–
qq
, 
p
 );

227 #i‚de‡
NO_BUDDY_INFO


228 
QQ_CMD_GET_BUDDY_LIST
:

229 
	`¥Ÿ_buddy_upd©e_li°_ª∂y
–
qq
, 
p
 );

231 
QQ_CMD_GET_BUDDY_ONLINE
:

232 
	`¥Ÿ_buddy_upd©e_⁄löe_ª∂y
–
qq
, 
p
 );

234 
QQ_CMD_BUDDY_STATUS
:

235 
	`¥Ÿ_buddy_°©us
–
qq
, 
p
 );

238 #i‚de‡
NO_QUN_INFO


239 
QQ_CMD_QUN_CMD
:

240 
	`¥Ÿ_qun_cmd_ª∂y
–
qq
, 
p
 );

243 
QQ_CMD_GET_KEY
:

244 
	`¥Ÿ_u£r_gë_key_ª∂y
–
qq
, 
p
 );

246 
QQ_CMD_GET_NOTICE
:

247 
	`¥Ÿ_u£r_gë_nŸi˚_ª∂y
–
qq
, 
p
 );

249 
QQ_CMD_CHECK_IP
:

250 
	`¥Ÿ_u£r_check_ù_ª∂y
–
qq
, 
p
 );

252 #i‚de‡
NO_BUDDY_DETAIL_INFO


253 
QQ_CMD_GET_USER_INFO
:

254 
	`¥Ÿ_u£r_gë_öfo_ª∂y
–
qq
, 
p
 );

256 
QQ_CMD_GET_BUDDY_SIGN
:

257 
	`¥Ÿ_buddy_upd©e_signôuª_ª∂y
–
qq
, 
p
 );

259 
QQ_CMD_ACCOUNT
:

260 
	`¥Ÿ_buddy_upd©e_accou¡_ª∂y
–
qq
, 
p
 );

262 
QQ_CMD_BUDDY_ALIAS
:

263 
	`¥Ÿ_buddy_upd©e_Æüs_ª∂y
–
qq
, 
p
 );

266 #i‚de‡
NO_GROUP_INFO


267 
QQ_CMD_GROUP_LABEL
:

268 
	`¥Ÿ_group_dow∆ﬂd_œbñs_ª∂y
–
qq
, 
p
 );

271 
QQ_CMD_SEND_IM
:

273 
QQ_CMD_BROADCAST
:

274 
	`¥Ÿ_misc_brﬂdˇ°
–
qq
, 
p
 );

276 
QQ_CMD_GET_LEVEL
:

277 
	`¥Ÿ_u£r_gë_Àvñ_ª∂y
–
qq
, 
p
 );

279 
QQ_CMD_ADDBUDDY_REQUEST
:

280 
	`¥Ÿ_buddy_ªque°_addbuddy_ª∂y
–
qq
, 
p
 );

282 
QQ_CMD_ADDBUDDY_VERIFY
:

283 
	`¥Ÿ_buddy_vîify_addbuddy_ª∂y
–
qq
, 
p
 );

285 
QQ_CMD_REQUEST_TOKEN
:

286 
	`¥Ÿ_u£r_ªque°_tokí_ª∂y
–
qq
, 
p
 );

288 
QQ_CMD_DEL_BUDDY
:

289 
	`¥Ÿ_buddy_dñ_buddy_ª∂y
–
qq
, 
p
 );

292 
	`DBG
("unknow¿cmd: %x", 
p
->
comm™d
 );

293 
	`hex_dump
–
p
->
buf
->
d©a
,Ö->buf->
Àn
 );

297 
	}
}

	@protocol.h

1 #i‚de‡
_PROTOCOL_H


2 
	#_PROTOCOL_H


	)

4 
	~"qqdef.h
"

5 
	~"qq∑ckë.h
"

7 
	sqqd©a_2009
{

8 
uch¨
 
	mloˇÀ
[6];

9 
uch¨
 
	mvîsi⁄_•ec
[12];

10 
uch¨
 
	m£ssi⁄_key
[16];

11 
uch¨
 
	mim_key
[16];

12 
uch¨
 
	mfûe_key
[16];

13 
uch¨
 
	mvîify_key1
[16];

14 
uch¨
 
	mvîify_key2
[16];

15 
uöt
 
	mlogö_öfo_unknown1
;

16 
uöt
 
	mlogö_öfo_unknown2
;

17 
uch¨
 
	mexe_hash
[16];

19 
uch¨
 
	m£rvî_d©a
[15];

21 
ush‹t
 
	mw_ªdúe˘_cou¡
;

22 
uch¨
 
	mc_ªdúe˘_cou¡
;

23 
uöt
 
	mc⁄n_i•_id
;

24 
uöt
 
	m£rvî_ªvî£
;

25 
uöt
 
	mc⁄n_ù
;

26 }
__©åibuã__
((
∑cked
)Ë
	m£rvî_öfo
;

28 
tokí
 
	mlogö_tokí
;

29 
tokí
 
	mvîify_tokí
;

30 
tokí
 
	mfûe_tokí
;

31 
tokí
 
	mtokí_c
;

32 
tokí
 
	mlogö_öfo_tokí
;

33 
tokí
 
	mlogö_öfo_d©a
;

34 
tokí
 
	mlogö_öfo_magic
;

35 
tokí
 
	mlogö_öfo_œrge
;

36 
uch¨
 
	mlogö_öfo_key1
[16];

37 
uch¨
 
	mlogö_öfo_key2
[16];

38 
uch¨
 
	mlogö_li°_cou¡
;

39 
tokí
 
	mu£r_tokí
;

40 
time_t
 
	mu£r_tokí_time
;

41 
uöt
 
	m›î©ög_numbî
;

42 
uch¨
 
	m›î©i⁄
;

43 
	mqq£ssi⁄
[128];

44 
	maddbuddy_°r
[64];

48 
	mOP_ADDBUDDY
 = 0x01,

49 
	mOP_DELBUDDY


53 
	mVF_OK
 = 0x00,

54 
	mVF_VERIFY
 = 0x01,

55 
	mVF_REJECT
 = 0x02,

56 
	mVF_QUESTION
 = 0x03,

60 
	mQQ_IM_TEXT
 = 0x01,

61 
	mQQ_IM_AUTO_REPLY
 = 0x02

64 
	mQQ_RECV_IM_BUDDY_0801
 = 0x0009,

65 
	mQQ_RECV_IM_TO_UNKNOWN
 = 0x000a,

66 
	mQQ_RECV_IM_NEWS
 = 0x0018,

67 
	mQQ_RECV_IM_UNKNOWN_QUN_IM
 = 0x0020,

68 
	mQQ_RECV_IM_ADD_TO_QUN
 = 0x0021,

69 
	mQQ_RECV_IM_DEL_FROM_QUN
 = 0x0022,

70 
	mQQ_RECV_IM_APPLY_ADD_TO_QUN
 = 0x0023,

71 
	mQQ_RECV_IM_APPROVE_APPLY_ADD_TO_QUN
 = 0x0024,

72 
	mQQ_RECV_IM_REJCT_APPLY_ADD_TO_QUN
 = 0x0025,

73 
	mQQ_RECV_IM_CREATE_QUN
 = 0x0026,

74 
	mQQ_RECV_IM_TEMP_QUN_IM
 = 0x002A,

75 
	mQQ_RECV_IM_QUN_IM
 = 0x002B,

76 
	mQQ_RECV_IM_QUN_IM_09
 = 0x0052,

77 
	mQQ_RECV_IM_SYS_NOTIFICATION
 = 0x0030,

78 
	mQQ_RECV_IM_BUDDY_0802
 = 0x0084,

79 
	mQQ_RECV_IM_QUN_MEMBER_IM
 = 0x008C,

80 
	mQQ_RECV_IM_WRITING
 = 0x0079,

81 
	mQQ_RECV_IM_BUDDY_09
 = 0x0078

84 
	mQQ_NORMAL_IM_TEXT
 = 0x000b,

85 
	mQQ_NORMAL_IM_FILE_REQUEST_TCP
 = 0x0001,

86 
	mQQ_NORMAL_IM_FILE_APPROVE_TCP
 = 0x0003,

87 
	mQQ_NORMAL_IM_FILE_REJECT_TCP
 = 0x0005,

88 
	mQQ_NORMAL_IM_FILE_REQUEST_UDP
 = 0x0035,

89 
	mQQ_NORMAL_IM_FILE_APPROVE_UDP
 = 0x0037,

90 
	mQQ_NORMAL_IM_FILE_REJECT_UDP
 = 0x0039,

91 
	mQQ_NORMAL_IM_FILE_NOTIFY
 = 0x003b,

92 
	mQQ_NORMAL_IM_FILE_PASV
 = 0x003f,

93 
	mQQ_NORMAL_IM_FILE_CANCEL
 = 0x0049,

94 
	mQQ_NORMAL_IM_FILE_EX_REQUEST_UDP
 = 0x81,

95 
	mQQ_NORMAL_IM_FILE_EX_REQUEST_ACCEPT
 = 0x83,

96 
	mQQ_NORMAL_IM_FILE_EX_REQUEST_CANCEL
 = 0x85,

97 
	mQQ_NORMAL_IM_FILE_EX_NOTIFY_IP
 = 0x87

100 
	eKEY_TYPE
{

101 
	mNO_KEY
,

102 
	mRANDOM_KEY
,

103 
	mSESSION_KEY
,

104 
	mLOGIN_KEY
,

105 
	mIM_KEY


108 
	eVERIFY_MODE
{

109 
	mVM_NO
,

110 
	mVM_GET
,

111 
	mVM_ANSWER


114 
	eQQ_CMD
{

115 
	mQQ_CMD_TOUCH
 = 0x0091,

116 
	mQQ_CMD_LOGOUT
 = 0x0062,

117 
	mQQ_CMD_LOGIN_REQUEST
 = 0x00ba,

118 
	mQQ_CMD_LOGIN_GET_INFO
 = 0x00e5,

119 
	mQQ_CMD_LOGIN_SEND_INFO
 = 0x0030,

120 
	mQQ_CMD_LOGIN_GET_LIST
 = 0x0018,

121 
	mQQ_CMD_KEEP_ALIVE
 = 0x0058,

122 
	mQQ_CMD_GET_USER_INFO
 = 0x0006,

123 
	mQQ_CMD_CHANGE_STATUS
 = 0x000d,

124 
	mQQ_CMD_SEND_IM
 = 0x00cd,

125 
	mQQ_CMD_RECV_IM
 = 0x0017,

126 
	mQQ_CMD_RECV_IM_09
 = 0x00ce,

127 
	mQQ_CMD_GET_KEY
 = 0x001d,

128 
	mQQ_CMD_GET_BUDDY_LIST
 = 0x0126,

129 
	mQQ_CMD_GET_BUDDY_ONLINE
 = 0x0027,

130 
	mQQ_CMD_QUN_CMD
 = 0x0002,

131 
	mQQ_CMD_BUDDY_ALIAS
 = 0x003e,

132 
	mQQ_CMD_GROUP_LABEL
 = 0x0001,

133 
	mQQ_CMD_GET_LEVEL
 = 0x005C,

134 
	mQQ_CMD_GET_BUDDY_SIGN
 = 0x0067,

135 
	mQQ_CMD_BROADCAST
 = 0x0080,

136 
	mQQ_CMD_BUDDY_STATUS
 = 0x0081,

137 
	mQQ_CMD_ADDBUDDY_REQUEST
 = 0x00A7,

138 
	mQQ_CMD_ADDBUDDY_VERIFY
 = 0x00A8,

139 
	mQQ_CMD_ADDBUDDY_QUESTION
 = 0x00B7,

140 
	mQQ_CMD_ACCOUNT
 = 0x00b5,

141 
	mQQ_CMD_GET_NOTICE
 = 0x00d4,

142 
	mQQ_CMD_CHECK_IP
 = 0x00da,

143 
	mQQ_CMD_LOGIN_VERIFY
 = 0x00dd,

144 
	mQQ_CMD_REQUEST_TOKEN
 = 0x00ae,

145 
	mQQ_CMD_DEL_BUDDY
 = 0x000a

148 
	gqq˛õ¡
;

150 
¥Ÿ_logö_touch
–
qq˛õ¡
* 
qq
 );

151 
¥Ÿ_logö_touch_wôh_öfo
–
qq˛õ¡
* 
qq
, 
uch¨
* 
£rvî_öfo
, uch¨ 
Àn
 );

152 
¥Ÿ_logö_touch_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

153 
¥Ÿ_logö_ªque°
–
qq˛õ¡
* 
qq
, 
tokí
* 
tok
, 
uöt
 
code
, 
≤g_d©a
 );

154 
¥Ÿ_logö_ªque°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

155 
¥Ÿ_logö_vîify
–
qq˛õ¡
* 
qq
 );

156 
¥Ÿ_logö_vîify_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

157 
¥Ÿ_logö_gë_öfo
–
qq˛õ¡
* 
qq
 );

158 
¥Ÿ_logö_gë_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

159 
¥Ÿ_logö_£nd_öfo
–
qq˛õ¡
* 
qq
 );

160 
¥Ÿ_logö_£nd_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

161 
¥Ÿ_logö_logout
–
qq˛õ¡
* 
qq
 );

162 
¥Ÿ_logö_gë_li°
–
qq˛õ¡
* 
qq
, 
ush‹t
 
pos
 );

163 
¥Ÿ_logö_gë_li°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

165 
¥Ÿ_misc_brﬂdˇ°
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

167 
¥Ÿ_u£r_gë_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

168 
¥Ÿ_u£r_gë_öfo_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

169 
¥Ÿ_u£r_ch™ge_°©us
–
qq˛õ¡
* 
qq
 );

170 
¥Ÿ_u£r_ch™ge_°©us_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

171 
¥Ÿ_u£r_gë_nŸi˚
–
qq˛õ¡
* 
qq
, 
uch¨
 
ty≥
 );

172 
¥Ÿ_u£r_gë_nŸi˚_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

173 
¥Ÿ_u£r_gë_key
–
qq˛õ¡
* 
qq
, 
uch¨
 
key
 );

174 
¥Ÿ_u£r_gë_key_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

175 
¥Ÿ_u£r_check_ù
–
qq˛õ¡
* 
qq
 );

176 
¥Ÿ_u£r_check_ù_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

177 
¥Ÿ_u£r_kìp_Æive
–
qq˛õ¡
* 
qq
 );

178 
¥Ÿ_u£r_kìp_Æive_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

179 
¥Ÿ_u£r_gë_Àvñ
–
qq˛õ¡
* 
qq
 );

180 
¥Ÿ_u£r_gë_Àvñ_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

181 
¥Ÿ_u£r_ªque°_tokí
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
uch¨
 
›î©i⁄
, 
ush‹t
 
ty≥
, uöà
code
 );

182 
¥Ÿ_u£r_ªque°_tokí_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

184 
¥Ÿ_im_ack_ªcv
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
¥e
 );

185 
¥Ÿ_im_ªcv_msg
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

186 
¥Ÿ_im_£nd_msg
–
qq˛õ¡
* 
qq
, 
uöt
 
to
, * 
msg
 );

188 
¥Ÿ_buddy_upd©e_li°
–
qq˛õ¡
* 
qq
, 
ush‹t
 
pos
 );

189 
¥Ÿ_buddy_upd©e_li°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

190 
¥Ÿ_buddy_upd©e_⁄löe
–
qq˛õ¡
* 
qq
, 
uöt
 
√xt_numbî
 );

191 
¥Ÿ_buddy_upd©e_⁄löe_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

192 
¥Ÿ_buddy_°©us
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

193 
¥Ÿ_buddy_upd©e_signôuª
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 );

194 
¥Ÿ_buddy_upd©e_signôuª_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

195 
¥Ÿ_buddy_upd©e_accou¡
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 );

196 
¥Ÿ_buddy_upd©e_accou¡_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

197 
¥Ÿ_buddy_upd©e_Æüs
–
qq˛õ¡
* 
qq
 );

198 
¥Ÿ_buddy_upd©e_Æüs_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

199 
¥Ÿ_buddy_ªque°_addbuddy
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

200 
¥Ÿ_buddy_ªque°_addbuddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

201 
¥Ÿ_buddy_vîify_addbuddy
–
qq˛õ¡
* 
qq
, 
uch¨
 
cmd
, 
uöt
 
numbî
 );

202 
¥Ÿ_buddy_vîify_addbuddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

203 
¥Ÿ_buddy_dñ_buddy
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

204 
¥Ÿ_buddy_dñ_buddy_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

206 
¥Ÿ_group_dow∆ﬂd_li°
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 );

207 
¥Ÿ_group_dow∆ﬂd_li°_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

208 
¥Ÿ_group_dow∆ﬂd_œbñs
–
qq˛õ¡
* 
qq
, 
uöt
 
pos
 );

209 
¥Ÿ_group_dow∆ﬂd_œbñs_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

211 
¥Ÿ_qun_gë_öfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, uöà
pos
 );

212 
¥Ÿ_qun_£nd_msg
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg_c⁄ã¡
 );

213 
¥Ÿ_qun_gë_membîöfo
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, uöt* 
numbîs
, 
cou¡
 );

214 
¥Ÿ_qun_gë_⁄löe
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

215 
¥Ÿ_qun_gë_membî«me
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

216 
¥Ÿ_qun_cmd_ª∂y
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
 );

218 
po°_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
key_ty≥
 );

219 
¥o˚ss_∑ckë
–
qq˛õ¡
* 
qq
, 
qq∑ckë
* 
p
, 
byãbuf„r
* 
buf
 );

	@qqclient.c

16 
	~<°rög.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 #ifde‡
__WIN32__


20 
	~<wösock.h
>

21 
	~<wööë.h
>

23 
	~<sys/sockë.h
>

24 
	~<¨∑/öë.h
>

25 
	~<√tdb.h
>

28 
	~"md5.h
"

29 
	~"mem‹y.h
"

30 
	~"debug.h
"

31 
	~"c⁄fig.h
"

32 
	~"qqsockë.h
"

33 
	~"∑ckëmgr.h
"

34 
	~"¥Ÿocﬁ.h
"

35 
	~"qq˛õ¡.h
"

36 
	~"qun.h
"

37 
	~"group.h
"

38 
	~"buddy.h
"

39 
	~"utû.h
"

42 
£rvî_ôem
 
	gt˝_£rvîs
[
MAX_SERVER_ADDR
];

43 
£rvî_ôem
 
	gudp_£rvîs
[
MAX_SERVER_ADDR
];

44 
	gt˝_£rvî_cou¡
 = 0, 
	gudp_£rvî_cou¡
 = 0;

46 
uöt
 
	gœ°_£rvî_ù
 = 0, 
	gœ°_£rvî_p‹t
 = 0;

49 
	$ªad_£rvî_addr
–
£rvî_ôem
* 
§v
, * 
s
, * 
cou¡
 )

51 
ù
[32], 
p‹t
[10], 
ªad_«me
 = 1, *
p
;

52 
j
 = 0;

53  
p
=
s
; ;Ö++ ){

54 if–*
p
 == ':' ){

55 
ù
[
j
]=0;

56 
j
=0; 
ªad_«me
 = 0;

57 }if–*
p
=='|' || *p=='\0' ){

58 
p‹t
[
j
]=0;

59 
j
=0; 
ªad_«me
 = 1;

60 if–*
cou¡
 < 
MAX_SERVER_ADDR
 ){

61 
	`°∫˝y
–
§v
[*
cou¡
].
ù
, ip, 31 );

62 
§v
[*
cou¡
].
p‹t
 = 
	`©oi
(Öort );

64 (*
cou¡
) ++;

66 if–*
p
=='\0' )

69 if–
ªad_«me
 ){

70 if–
j
<31 ) 
ù
[j++] = *
p
;

72 if–
j
<9 ) 
p‹t
[j++] = *
p
;

76 
	}
}

78 
	$ªad_c⁄fig
–
qq˛õ¡
* 
qq
 )

80 
	`as£π
–
g_c⁄f
 );

81 if–!
t˝_£rvî_cou¡
 && !
udp_£rvî_cou¡
 ){

83 * 
t˝s
, *
udps
;

84 
t˝s
 =(*Ë
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQTcpServerList");

85 
udps
 =(*Ë
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQUdpServerList");

86 if–
t˝s
 ){

87 
	`ªad_£rvî_addr
–
t˝_£rvîs
, 
t˝s
, &
t˝_£rvî_cou¡
 );

89 if–
udps
 ){

90 
	`ªad_£rvî_addr
–
udp_£rvîs
, 
udps
, &
udp_£rvî_cou¡
 );

93 
qq
->
log_∑ckë
 = 
	`c⁄fig_ªadöt
–
g_c⁄f
, "QQPacketLog");

94 if–
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQNëw‹k"Ë&& 
	`°ricmp
( (*)config_readstr( g_conf, "QQNetwork"), "TCP" ) == 0 )

95 
qq
->
√tw‹k
 = 
TCP
;

97 
qq
->
√tw‹k
 = 
UDP
;

98 if–
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQVerifyDir" ) )

99 
	`°∫˝y
–
qq
->
vîify_dú
, (*)
	`c⁄fig_ªad°r
–
g_c⁄f
, "QQVîifyDú" ), 
PATH_LEN
 );

100 if–
qq
->
vîify_dú
 =
NULL
 )

101 
	`°r˝y
–
qq
->
vîify_dú
, "./web/verify" );

102 
	`mkdú_ªcursive
–
qq
->
vîify_dú
 );

103 
	}
}

105 
	$qq˛õ¡_¸óã
–
qq˛õ¡
* 
qq
, 
uöt
 
num
, * 
∑ss
 )

107 
uch¨
 
md5_∑ss
[16];

109 
md5_°©e_t
 
m°
;

110 
	`md5_öô
–&
m°
 );

111 
	`md5_≠≥nd
–&
m°
, (
md5_byã_t
*)
∑ss
, 
	`°æí
(pass) );

112 
	`md5_föish
–&
m°
, (
md5_byã_t
*)
md5_∑ss
 );

113  
	`qq˛õ¡_md5_¸óã
–
qq
, 
num
, 
md5_∑ss
 );

114 
	}
}

117 
	$dñëe_func
(c⁄° *
p
)

119 
	`DEL
–
p
 );

120 
	}
}

122 
	$qq˛õ¡_md5_¸óã
–
qq˛õ¡
* 
qq
, 
uöt
 
num
, 
uch¨
* 
md5_∑ss
 )

124 
md5_°©e_t
 
m°
;

126 
	`mem£t
–
qq
, 0, –
qq˛õ¡
 ) );

127 
qq
->
numbî
 = 
num
;

128 
	`mem˝y
–
qq
->
md5_∑ss1
, 
md5_∑ss
, 16 );

130 
	`md5_öô
–&
m°
 );

131 
	`md5_≠≥nd
–&
m°
, (
md5_byã_t
*)
qq
->
md5_∑ss1
, 16 );

132 
	`md5_föish
–&
m°
, (
md5_byã_t
*)
qq
->
md5_∑ss2
 );

133 
qq
->
mode
 = 
QQ_ONLINE
;

134 
qq
->
¥o˚ss
 = 
P_INIT
;

135 
	`ªad_c⁄fig
–
qq
 );

136 
qq
->
vîsi⁄
 = 
QQ_VERSION
;

138 
	`li°_¸óã
–&
qq
->
buddy_li°
, 
MAX_BUDDY
 );

139 
	`li°_¸óã
–&
qq
->
qun_li°
, 
MAX_QUN
 );

140 
	`li°_¸óã
–&
qq
->
group_li°
, 
MAX_GROUP
 );

141 
	`lo›_¸óã
–&
qq
->
evít_lo›
, 
MAX_EVENT
, 
dñëe_func
 );

142 
	`lo›_¸óã
–&
qq
->
msg_lo›
, 
MAX_EVENT
, 
dñëe_func
 );

143 
	`±hªad_muãx_öô
–&
qq
->
muãx_evít
, 
NULL
 );

145 
qq
->
£lf
 = 
	`buddy_gë
–qq, qq->
numbî
, 1 );

146 if–!
qq
->
£lf
 ){

147 
	`DBG
("[%d] F©ÆÉº‹: qq->£l‡=NULL", 
qq
->
numbî
);

151 
	}
}

153 
	#INTERVAL
 5

	)

154 * 
	$qq˛õ¡_kì∑live
–* 
d©a
 )

156 
qq˛õ¡
* 
qq
 = (qq˛õ¡*Ë
d©a
;

157 
cou¡î
 = 0;

158 
	`DBG
("keepalive");

159  
qq
->
¥o˚ss
 !
P_INIT
 ){

160 
cou¡î
 ++;

161 if–
cou¡î
 % 
INTERVAL
 == 0 ){

162 if–
qq
->
¥o˚ss
 =
P_LOGGING
 || qq->¥o˚s†=
P_LOGIN
 ){

163 
	`∑ckëmgr_check_∑ckë
–
qq
, 5 );

164 if–
qq
->
¥o˚ss
 =
P_LOGIN
 ){

166 if–
cou¡î
 % ( 1 *60*
INTERVAL
) == 0 ){

167 
	`¥Ÿ_u£r_kìp_Æive
–
qq
 );

170 if–
cou¡î
 % ( 10 *60*
INTERVAL
) == 0 ){

171 
	`¥Ÿ_buddy_upd©e_⁄löe
–
qq
, 0 );

172 
	`qun_upd©e_⁄löe_Æl
–
qq
 );

175 if–
cou¡î
 % ( 30 *60*
INTERVAL
) == 0 ){

176 
	`¥Ÿ_u£r_ch™ge_°©us
–
qq
 );

177 
	`¥Ÿ_u£r_gë_Àvñ
–
qq
 );

185 if–! 
qq
->
logö_föish
 ){

186 if–
	`lo›_is_em±y
(&
qq
->
∑ckëmgr
.
ªady_lo›
) &&

187 
	`lo›_is_em±y
(&
qq
->
∑ckëmgr
.
£¡_lo›
) ){

188 
qq
->
logö_föish
 = 1;

191 
qq
->
⁄löe_˛ock
 ++;

195 
	`USLEEP
–1000/
INTERVAL
 );

197 
	`DBG
("end.");

198  
NULL
;

199 
	}
}

202 
	$c⁄√˘_£rvî
–
qq˛õ¡
* 
qq
 )

205 if–
qq
->
sockë
 )

206 
	`qqsockë_˛o£
–
qq
->
sockë
 );

207 if–
qq
->
√tw‹k
 =
TCP
 ){

208 
qq
->
sockë
 = 
	`qqsockë_¸óã
–
TCP
, 
NULL
, 0 );

210 
qq
->
sockë
 = 
	`qqsockë_¸óã
–
UDP
, 
NULL
, 0 );

212 if–
qq
->
sockë
 < 0 ){

213 
	`DBG
("ˇn'ànŸ cª©êsockë.Ñë=%d", 
qq
->
sockë
 );

216 
ö_addr
 
addr
;

217 
addr
.
s_addr
 = 
	`ht⁄l
–
qq
->
£rvî_ù
 );

218 
	`DBG
("c⁄√˘ögÅÿ%s:%d", 
	`öë_¡ﬂ
–
addr
 ), 
qq
->
£rvî_p‹t
 );

219 if–
	`qqsockë_c⁄√˘2
–
qq
->
sockë
, qq->
£rvî_ù
, qq->
£rvî_p‹t
 ) < 0 ){

220 
	`DBG
("ˇn'ànŸ c⁄√˘ sîvî %s", 
	`öë_¡ﬂ
–
addr
 ) );

224 
	}
}

226 
	$qq˛õ¡_gë_£rvî
(
qq˛õ¡
* 
qq
)

228 
i
;

229 
sockaddr_ö
 
addr
;

230 if–
œ°_£rvî_ù
 == 0 ){

232 if–
qq
->
√tw‹k
 =
TCP
 && 
t˝_£rvî_cou¡
>0 ){

233 
i
 = 
	`ønd
()%
t˝_£rvî_cou¡
;

234 
	`√èddr_£t
–
t˝_£rvîs
[
i
].
ù
, &
addr
 );

235 
qq
->
£rvî_ù
 = 
	`¡ohl
–
addr
.
sö_addr
.
s_addr
 );

236 
qq
->
£rvî_p‹t
 = 
t˝_£rvîs
[
i
].
p‹t
;

238 if–
udp_£rvî_cou¡
 <1 ){

239 
qq
->
¥o˚ss
 = 
P_ERROR
;

240 
	`DBG
("no server forÜogging.");

242 
i
 = 
	`ønd
()%
udp_£rvî_cou¡
;

243 
	`√èddr_£t
–
udp_£rvîs
[
i
].
ù
, &
addr
 );

244 
qq
->
£rvî_ù
 = 
	`¡ohl
–
addr
.
sö_addr
.
s_addr
 );

245 
qq
->
£rvî_p‹t
 = 
udp_£rvîs
[
i
].
p‹t
;

248 
qq
->
£rvî_ù
 = 
œ°_£rvî_ù
;

249 
qq
->
£rvî_p‹t
 = 
œ°_£rvî_p‹t
;

250 
œ°_£rvî_ù
 = 0;

253 
	}
}

255 
	$qq˛õ¡_logö
–
qq˛õ¡
* 
qq
 )

257 
	`DBG
("login");

258 
ªt
;

259 if–
qq
->
¥o˚ss
 !
P_INIT
 ){

260 
	`DBG
("pleaseÜogout first");

263 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_LOGGING
 );

264 
	`§™d
–
qq
->
numbî
 + 
	`time
(
NULL
) );

266 
	`∑ckëmgr_°¨t
–
qq
 );

267 
	`∑ckëmgr_√w_£qno
–
qq
 );

268 
	`qq˛õ¡_gë_£rvî
–
qq
 );

269 
ªt
 = 
	`c⁄√˘_£rvî
–
qq
 );

270 if–
ªt
 < 0 ){

271 
qq
->
¥o˚ss
 = 
P_ERROR
;

272  
ªt
;

277 
	`¥Ÿ_logö_touch
–
qq
 );

282 
ªt
 = 
	`±hªad_¸óã
–&
qq
->
thªad_kì∑live
, 
NULL
, 
qq˛õ¡_kì∑live
, (*)qq );

284 
	}
}

286 
	$qq˛õ¡_logout
–
qq˛õ¡
* 
qq
 )

288 if–
qq
->
¥o˚ss
 =
P_INIT
 )

290 if–
qq
->
¥o˚ss
 =
P_LOGIN
 ){

291 
i
;

292  
i
 = 0; i<4; i++ )

293 
	`¥Ÿ_logö_logout
–
qq
 );

295 
	`DBG
("¥o˚s†%d", 
qq
->
¥o˚ss
 );

297 
qq
->
logö_föish
 = 0;

298 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_INIT
 );

299 
	`qqsockë_˛o£
–
qq
->
hâp_sock
 );

300 
	`qqsockë_˛o£
–
qq
->
sockë
 );

301 
	`DBG
("joining keepalive");

302 #ifde‡
__WIN32__


303 
	`±hªad_joö
–
qq
->
thªad_kì∑live
, 
NULL
 );

305 if–
qq
->
thªad_kì∑live
 )

306 
	`±hªad_joö
–
qq
->
thªad_kì∑live
, 
NULL
 );

308 
	`∑ckëmgr_íd
–
qq
 );

309 
	}
}

312 
	$qq˛õ¡_˛ónup
–
qq˛õ¡
* 
qq
 )

314 if–
qq
->
¥o˚ss
 !
P_INIT
 )

315 
	`qq˛õ¡_logout
–
qq
 );

316 
	`±hªad_muãx_lock
–&
qq
->
muãx_evít
 );

317 
	`qun_membî_˛ónup
–
qq
 );

318 
	`li°_˛ónup
–&
qq
->
buddy_li°
 );

319 
	`li°_˛ónup
–&
qq
->
qun_li°
 );

320 
	`li°_˛ónup
–&
qq
->
group_li°
 );

321 
	`lo›_˛ónup
–&
qq
->
evít_lo›
 );

322 
	`lo›_˛ónup
–&
qq
->
msg_lo›
 );

323 
	`±hªad_muãx_de°roy
–&
qq
->
muãx_evít
 );

324 
	}
}

326 
	$qq˛õ¡_vîify
–
qq˛õ¡
* 
qq
, 
uöt
 
code
 )

328 if–
qq
->
logö_föish
 ){

329 
	`¥Ÿ_u£r_ªque°_tokí
–
qq
, qq->
d©a
.
›î©ög_numbî
, qq->d©a.
›î©i⁄
, 1, 
code
 );

331 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, 
P_LOGGING
 );

332 
	`¥Ÿ_logö_ªque°
–
qq
, &qq->
d©a
.
vîify_tokí
, 
code
, 0 );

334 
	`DBG
("vîify code: %x", 
code
 );

336 
	}
}

338 
	$qq˛õ¡_add
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
ªque°_°r
 )

340 
qqbuddy
* 
b
 = 
	`buddy_gë
–
qq
, 
numbî
, 0 );

341 if–
b
 && b->
vîify_Êag
 =
VF_OK
 ) {

342 
	`¥Ÿ_buddy_vîify_addbuddy
–
qq
, 03, 
numbî
 );

344 
	`°∫˝y
–
qq
->
d©a
.
addbuddy_°r
, 
ªque°_°r
, 50 );

345 
	`¥Ÿ_buddy_ªque°_addbuddy
–
qq
, 
numbî
 );

348 
	}
}

350 
	$qq˛õ¡_dñ
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

352 
qq
->
d©a
.
›î©ög_numbî
 = 
numbî
;

353 
	`¥Ÿ_u£r_ªque°_tokí
–
qq
, 
numbî
, 
OP_DELBUDDY
, 6, 0 );

355 
	}
}

357 
	$qq˛õ¡_waô
–
qq˛õ¡
* 
qq
, 
£c
 )

359 
i
;

361 if–
	`±hªad_muãx_åylock
–&
qq
->
muãx_evít
 ) != 0 )

363  
i
=0; (
£c
==0 || i<£cË&& 
qq
->
¥o˚ss
!=
P_INIT
; i++ ){

364 if–
	`lo›_is_em±y
(&
qq
->
∑ckëmgr
.
ªady_lo›
Ë&&Üo›_is_em±y(&qq->∑ckëmgr.
£¡_lo›
) )

366 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

369 
	`SLEEP
(1);

371 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

373 
	}
}

375 
	$qq˛õ¡_ch™ge_°©us
–
qq˛õ¡
* 
qq
, 
uch¨
 
mode
 )

377 
qq
->
mode
 = mode;

378 
	`¥Ÿ_u£r_ch™ge_°©us
–
qq
 );

379 
	}
}

385 
	$qq˛õ¡_gë_evít
–
qq˛õ¡
* 
qq
, * 
evít
, 
size
, 
waô
 )

387 * 
buf
;

389 if–
	`±hªad_muãx_åylock
–&
qq
->
muãx_evít
 ) != 0 )

392 if–
qq
->
¥o˚ss
 =
P_INIT
 ){

393 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

396 
buf
 =(*Ë
	`lo›_p›_‰om_hód
–&
qq
->
evít_lo›
 );

397 if–
buf
 ){

398 
Àn
 = 
	`°æí
–
buf
 );

399 if–
Àn
 < 
size
 ){

400 
	`°r˝y
–
evít
, 
buf
 );

402 
	`DBG
("bufferÅoo small.");

404 
	`dñëe_func
–
buf
 );

405 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

408 if–
qq
->
⁄löe_˛ock
 > 10 ){

409 
buf
 =(*Ë
	`lo›_p›_‰om_hód
–&
qq
->
msg_lo›
 );

410 if–
buf
 ){

411 
Àn
 = 
	`°æí
–
buf
 );

412 if–
Àn
 < 
size
 ){

413 
	`°r˝y
–
evít
, 
buf
 );

415 
	`DBG
("bufferÅoo small.");

417 
	`dñëe_func
–
buf
 );

418 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

422 if–
waô
<0 || wait> 0 ){

423 if–
waô
>0) wait--;

424 
	`USLEEP
( 200 );

429 
	`±hªad_muãx_u∆ock
–&
qq
->
muãx_evít
 );

431 
	}
}

433 
	$qq˛õ¡_put_evít
–
qq˛õ¡
* 
qq
, * 
evít
 )

435 * 
buf
;

436 
Àn
 = 
	`°æí
–
evít
 );

440 
buf_tmp
[
Àn
+1];

441 
	`mem£t
–
buf_tmp
, 0, 
Àn
+1);

442 
buf
 = 
buf_tmp
;

444 if–!
buf
 )  -1;

445 
	`°r˝y
–
buf
, 
evít
 );

446 
	`lo›_push_to_èû
–&
qq
->
evít_lo›
, (*)
buf
 );

448 
	}
}

450 
	$qq˛õ¡_put_mesßge
–
qq˛õ¡
* 
qq
, * 
msg
 )

452 * 
buf
;

453 
Àn
 = 
	`°æí
–
msg
 );

456 
buf_tmp
[
Àn
+1];

457 
	`mem£t
–
buf_tmp
, 0, 
Àn
+1);

458 
buf
 = 
buf_tmp
;

459 if–!
buf
 )  -1;

461 
	`°r˝y
–
buf
, 
msg
 );

462 
	`lo›_push_to_èû
–&
qq
->
msg_lo›
, (*)
buf
 );

464 
	}
}

468 
	$qq˛õ¡_£t_¥o˚ss
–
qq˛õ¡
 *
qq
, 
¥o˚ss
 )

470 
qq
->
¥o˚ss
 =Örocess;

471 
evít
[16];

472 
	`•rötf
–
evít
, "¥o˚ss^$%d", 
¥o˚ss
 );

473 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

474 
	}
}

	@qqclient.h

1 #i‚de‡
_QQCLIENT_H


2 
	#_QQCLIENT_H


	)

4 
	~<±hªad.h
>

5 
	~<time.h
>

6 
	~"qqdef.h
"

7 
	~"∑ckëmgr.h
"

8 
	~"buddy.h
"

9 
	~"li°.h
"

10 
	~"lo›.h
"

11 
	~"qqsockë.h
"

12 
	~"¥Ÿocﬁ.h
"

15 
	eLOGIN_PROCESS
{

16 
	mP_INIT
 = 0,

17 
	mP_LOGGING
,

18 
	mP_VERIFYING
,

19 
	mP_LOGIN
,

20 
	mP_ERROR
,

21 
	mP_DENIED
,

22 
	mP_WRONGPASS
,

23 
	mP_BUSY


27 
	s£rvî_ôem
{

28 
	mù
[32];

29 
ush‹t
 
	mp‹t
;

30 }
	t£rvî_ôem
;

32 
	sqq˛õ¡
{

33 
uöt
 
	mnumbî
;

34 
ush‹t
 
	mvîsi⁄
;

35 
ush‹t
 
	m£qno
;

36 
	msockë
;

37 
	m∑ssw‹d
[32];

38 
uch¨
 
	mmd5_∑ss1
[16];

39 
uch¨
 
	mmd5_∑ss2
[16];

40 
uöt
 
	m£rvî_ù
;

41 
ush‹t
 
	m£rvî_p‹t
;

42 
uöt
 
	m˛õ¡_ù
;

43 
ush‹t
 
	m˛õ¡_p‹t
;

44 
uöt
 
	mloˇl_ù
;

45 
ush‹t
 
	mloˇl_p‹t
;

46 
uöt
 
	mœ°_logö_ù
;

47 
uöt
 
	mœ°_logö_time
;

48 
uöt
 
	mlogö_time
;

49 
uöt
 
	m£rvî_time
;

50 
	mmode
;

51 
	mhas_ˇmîa
;

52 
	m¥o˚ss
;

53 
	mlog_ãrmöÆ
;

54 
	mlog_∑ckë
;

55 
±hªad_t
 
	mthªad_kì∑live
;

56 
qq∑ckëmgr
 
	m∑ckëmgr
;

57 
qqbuddy
* 
	m£lf
;

59 
li°
 
	mbuddy_li°
;

60 
li°
 
	mqun_li°
;

61 
li°
 
	mgroup_li°
;

62 
uöt
 
	m⁄löe_˛ock
;

63 
	mvîify_dú
[
PATH_LEN
];

64 
ush‹t
 
	mÀvñ
;

65 
ush‹t
 
	ma˘ive_days
;

66 
ush‹t
 
	mupgøde_days
;

67 
lo›
 
	mevít_lo›
;

68 
lo›
 
	mmsg_lo›
;

69 
±hªad_muãx_t
 
	mmuãx_evít
;

70 
	m√tw‹k
;

71 
	mlogö_föish
;

72 
	mauto_ac˚±
;

73 
	mauto_ª∂y
[
AUTO_REPLY_LEN
];

74 
	mhâp_sock
;

76 
qqd©a_2009
 
	md©a
;

78 }
	tqq˛õ¡
;

81 
c⁄√˘_£rvî
–
qq˛õ¡
* 
qq
 );

82 
qq˛õ¡_¸óã
–
qq˛õ¡
* 
qq
, 
uöt
 
num
, * 
∑ss
 );

83 
qq˛õ¡_md5_¸óã
–
qq˛õ¡
* 
qq
, 
uöt
 
num
, 
uch¨
* 
md5_∑ss
 );

84 
qq˛õ¡_logö
–
qq˛õ¡
* 
qq
 );

85 
qq˛õ¡_logout
–
qq˛õ¡
* 
qq
 );

86 
qq˛õ¡_˛ónup
–
qq˛õ¡
* 
qq
 );

87 
qq˛õ¡_vîify
–
qq˛õ¡
* 
qq
, 
uöt
 
code
 );

88 
qq˛õ¡_waô
–
qq˛õ¡
* 
qq
, 
£c
 );

89 
qq˛õ¡_ch™ge_°©us
–
qq˛õ¡
* 
qq
, 
uch¨
 
mode
 );

90 
qq˛õ¡_gë_evít
–
qq˛õ¡
* 
qq
, * 
evít
, 
size
, 
waô
 );

91 
qq˛õ¡_put_evít
–
qq˛õ¡
* 
qq
, * 
evít
 );

92 
qq˛õ¡_£t_¥o˚ss
–
qq˛õ¡
 *
qq
, 
¥o˚ss
 );

93 
qq˛õ¡_put_mesßge
–
qq˛õ¡
* 
qq
, * 
msg
 );

94 
qq˛õ¡_gë_£rvî
–
qq˛õ¡
* 
qq
 );

95 
qq˛õ¡_add
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
ªque°_°r
 );

96 
qq˛õ¡_dñ
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

	@qqcrypt.c

27 
	~<°dio.h
>

28 
	~<°rög.h
>

29 #ifde‡
_WIN32


30 
	~<wösock.h
>

32 
	~<¨∑/öë.h
>

35 
	~"qq¸y±.h
"

36 
	~"debug.h
"

38 
	$øndom
()

42 
	}
}

45 
	$ícùhî
(*c⁄° 
v
, c⁄° *c⁄° 
k
,

46 *c⁄° 
w
)

49 
y
 = 
	`¡ohl
(
v
[0]),

50 
z
 = 
	`¡ohl
(
v
[1]),

51 
a
 = 
	`¡ohl
(
k
[0]),

52 
b
 = 
	`¡ohl
(
k
[1]),

53 
c
 = 
	`¡ohl
(
k
[2]),

54 
d
 = 
	`¡ohl
(
k
[3]),

55 
n
 = 0x10,

56 
sum
 = 0,

57 
dñè
 = 0x9E3779B9;

59 
n
-- > 0) {

60 
sum
 +
dñè
;

61 
y
 +((
z
 << 4Ë+ 
a
Ë^ (z + 
sum
Ë^ ((z >> 5Ë+ 
b
);

62 
z
 +((
y
 << 4Ë+ 
c
Ë^ (y + 
sum
Ë^ ((y >> 5Ë+ 
d
);

65 
w
[0] = 
	`ht⁄l
(
y
); w[1] = ht⁄l(
z
);

66 
	}
}

68 
	$decùhî
(*c⁄° 
v
, c⁄° *c⁄° 
k
,

69 *c⁄° 
w
)

72 
y
 = 
	`¡ohl
(
v
[0]),

73 
z
 = 
	`¡ohl
(
v
[1]),

74 
a
 = 
	`¡ohl
(
k
[0]),

75 
b
 = 
	`¡ohl
(
k
[1]),

76 
c
 = 
	`¡ohl
(
k
[2]),

77 
d
 = 
	`¡ohl
(
k
[3]),

78 
n
 = 0x10,

79 
sum
 = 0xE3779B90,

81 
dñè
 = 0x9E3779B9;

84 
n
-- > 0) {

85 
z
 -((
y
 << 4Ë+ 
c
Ë^ (y + 
sum
Ë^ ((y >> 5Ë+ 
d
);

86 
y
 -((
z
 << 4Ë+ 
a
Ë^ (z + 
sum
Ë^ ((z >> 5Ë+ 
b
);

87 
sum
 -
dñè
;

90 
w
[0] = 
	`ht⁄l
(
y
); w[1] = ht⁄l(
z
);

91 
	}
}

93 
	$qqí¸y±
–* 
ö°r
, 
ö°æí
, * 
key
,

94 * 
out°r
, * 
out°æí_±r
)

97 
∂aö
[8],

98 
∂aö_¥e_8
[8],

99 * 
¸y±ed
,

100 * 
¸y±ed_¥e_8
,

101 * 
öp
;

103 
pos_ö_byã
 = 1,

104 
is_hódî
=1,

105 
cou¡
=0,

106 
∑ddög
 = 0;

111 
	#í¸y±_evîy_8_byã
() \

113 
pos_ö_byã
=0;Öos_in_byte<8;Öos_in_byte++) {\

114 if(
is_hódî
Ë{ 
∂aö
[
pos_ö_byã
] ^
∂aö_¥e_8
[pos_in_byte]; }\

115 { 
∂aö
[
pos_ö_byã
] ^
¸y±ed_¥e_8
[pos_in_byte]; }\

117 
	`ícùhî
–(*Ë
∂aö
,\

118 (*Ë
key
, \

119 (*Ë
¸y±ed
); \

121 
pos_ö_byã
=0;Öos_in_byte<8;Öos_in_byte++) {\

122 
¸y±ed
[
pos_ö_byã
] ^
∂aö_¥e_8
[pos_in_byte]; \

124 
	`mem˝y
(
∂aö_¥e_8
, 
∂aö
, 8); \

126 
¸y±ed_¥e_8
 = 
¸y±ed
; \

127 
¸y±ed
 += 8; \

128 
cou¡
 += 8; \

129 
pos_ö_byã
 = 0; \

130 
is_hódî
 = 0; \

131 }

	)

133 
pos_ö_byã
 = (
ö°æí
 + 0x0a) % 8;

134 i‡(
pos_ö_byã
) {

135 
pos_ö_byã
 = 8 -Öos_in_byte;

137 
∂aö
[0] = (
	`øndom
(Ë& 0xf8Ë| 
pos_ö_byã
;

139 
	`mem£t
(
∂aö
+1, 
	`øndom
()&0xff, 
pos_ö_byã
++);

140 
	`mem£t
(
∂aö_¥e_8
, 0x00, (plain_pre_8));

142 
¸y±ed
 = 
¸y±ed_¥e_8
 = 
out°r
;

144 
∑ddög
 = 1;

145 
∑ddög
 <= 2) {

146 if(
pos_ö_byã
 < 8Ë{ 
∂aö
[pos_ö_byã++] = 
	`øndom
(Ë& 0xff; 
∑ddög
 ++; }

147 if(
pos_ö_byã
 =8){ 
	`í¸y±_evîy_8_byã
(); }

150 
öp
 = 
ö°r
;

151 
ö°æí
 > 0) {

152 i‡(
pos_ö_byã
 < 8Ë{ 
∂aö
[pos_ö_byã++] = *(
öp
++); 
ö°æí
 --; }

153 i‡(
pos_ö_byã
 =8){ 
	`í¸y±_evîy_8_byã
(); }

156 
∑ddög
 = 1;

157 
∑ddög
 <= 7) {

158 i‡(
pos_ö_byã
 < 8Ë{ 
∂aö
[pos_ö_byã++] = 0x00; 
∑ddög
 ++; }

159 i‡(
pos_ö_byã
 =8){ 
	`í¸y±_evîy_8_byã
(); }

162 *
out°æí_±r
 = 
cou¡
;

164 
	}
}

166 
	$qqde¸y±
–* 
ö°r
, 
ö°æí
, * 
key
,

167 * 
out°r
, * 
out°æí_±r
)

170 
de¸y±ed
[8], 
m
[8],

171 * 
¸y±_buff
,

172 * 
¸y±_buff_¥e_8
,

173 * 
ouç
;

175 
cou¡
,

176 
c⁄ãxt_°¨t
,

177 
pos_ö_byã
,

178 
∑ddög
;

180 
	#de¸y±_evîy_8_byã
() {\

181 
bNìdRë
 = 0;\

182 
pos_ö_byã
 = 0;Öos_in_byte < 8;Öos_in_byte ++ ) {\

183 i‡(
c⁄ãxt_°¨t
 + 
pos_ö_byã
 >
ö°æí
) \

185 
bNìdRë
 = 1;\

188 
de¸y±ed
[
pos_ö_byã
] ^
¸y±_buff
[pos_in_byte];\

190 if–!
bNìdRë
 ) { \

191 
	`decùhî
–(*Ë
de¸y±ed
, \

192 (*Ë
key
, \

193 (*Ë
de¸y±ed
);\

195 
c⁄ãxt_°¨t
 += 8;\

196 
¸y±_buff
 += 8;\

197 
pos_ö_byã
 = 0;\

199 }

	)

202 i‡((
ö°æí
 % 8) || (instrlen < 16))  0;

204 
	`decùhî
–(*Ë
ö°r
,

205 (*Ë
key
,

206 (*Ë
de¸y±ed
);

207 
pos_ö_byã
 = 
de¸y±ed
[0] & 0x7;

208 
cou¡
 = 
ö°æí
 - 
pos_ö_byã
 - 10;

210 i‡(*
out°æí_±r
 < 
cou¡
 || count < 0)  0;

212 
	`mem£t
(
m
, 0, 8);

213 
¸y±_buff_¥e_8
 = 
m
;

214 *
out°æí_±r
 = 
cou¡
;

216 
¸y±_buff
 = 
ö°r
 + 8;

217 
c⁄ãxt_°¨t
 = 8;

218 
pos_ö_byã
 ++;

220 
∑ddög
 = 1;

221 
∑ddög
 <= 2) {

222 i‡(
pos_ö_byã
 < 8) {

223 
pos_ö_byã
 ++; 
∑ddög
 ++;

225 i‡(
pos_ö_byã
 == 8) {

226 
¸y±_buff_¥e_8
 = 
ö°r
;

228 
	`de¸y±_evîy_8_byã
();

232 
ouç
 = 
out°r
;

233 
cou¡
 !=0) {

234 i‡(
pos_ö_byã
 < 8) {

235 *
ouç
 = 
¸y±_buff_¥e_8
[
pos_ö_byã
] ^ 
de¸y±ed
[pos_in_byte];

236 
ouç
 ++;

237 
cou¡
 --;

238 
pos_ö_byã
 ++;

240 i‡(
pos_ö_byã
 == 8) {

241 
¸y±_buff_¥e_8
 = 
¸y±_buff
 - 8;

243 
	`de¸y±_evîy_8_byã
();

246 
∑ddög
 = 1;Öadding < 8;Öadding ++) {

247 i‡(
pos_ö_byã
 < 8) {

248 i‡(
¸y±_buff_¥e_8
[
pos_ö_byã
] ^ 
de¸y±ed
[pos_in_byte]) {

251 
pos_ö_byã
 ++;

253 i‡(
pos_ö_byã
 == 8 ) {

254 
¸y±_buff_¥e_8
 = 
¸y±_buff
;

256 
	`de¸y±_evîy_8_byã
();

261 
	}
}

	@qqcrypt.h

27 #i‚de‡
_CRYPT_H


28 
	#_CRYPT_H


	)

30 
qqde¸y±
–* 
ö°r
, 
ö°æí
, * 
key
,

31 * 
out°r
, * 
out°æí_±r
);

32 
qqí¸y±
–* 
ö°r
, 
ö°æí
, * 
key
,

33 * 
out°r
, * 
out°æí_±r
);

	@qqdef.h

1 #i‚de‡
_QQDEF_H


2 
	#_QQDEF_H


	)

4 
	~<time.h
>

5 
	~<uni°d.h
>

6 
	~"utû.h
"

7 
	tuöt
;

8 
	tush‹t
;

9 
	tuch¨
;

12 
	#MIN
(
a
,
b
)◊>b?b:®)

	)

13 
	#KB
(
a
Ëa*1024

	)

14 
	#MB
(
a
Ëa*
	`KB
(1024)

	)

15 
	#CN_TIME
(
a
Ë
	)
a

18 #ifde‡
__WIN32__


19 
	#SLEEP
(
a
Ë
	`m¶ìp
◊*1000);

	)

20 
	#USLEEP
(
a
Ë
	`m¶ìp
◊);

	)

22 
	#SLEEP
(
a
Ë
	`¶ìp
◊);

	)

23 
	#USLEEP
(
a
Ë
	`u¶ìp
◊*1000);

	)

24 
	#°ricmp
 
°rˇ£cmp


	)

33 
	#MAX_LOOP_PACKET
 32

	)

34 
	#MAX_COMMAND
 0x0200

	)

35 
	#MAX_BUDDY
 1200

36 
	#MAX_QUN
 128

37 
	#MAX_QUN_MEMBER
 800

38 
	#MAX_GROUP
 128

39 
	#MAX_EVENT
 128

40 
	#USER_INFO_LEN
 256

	)

41 
	#MAX_USER_INFO
 38

	)

42 
	#SIGNITURE_LEN
 256

43 
	#TOKEN_LEN
 256

44 
	#ACCOUNT_LEN
 64

45 
	#NICKNAME_LEN
 64

46 
	#GROUPNAME_LEN
 256

	)

47 
	#AUTO_REPLY_LEN
 256

	)

48 
	#ALIAS_LEN
 32

49 
	#PATH_LEN
 1024

	)

51 
	#MAX_SERVER_ADDR
 16

	)

53 
	stokí
{

54 
	mÀn
;

55 
uch¨
 
	md©a
[
TOKEN_LEN
];

56 }
	ttokí
;

60 
	#QQ_VERSION
 0x1525

61 

	)

62 
	eQQSTATUS
{

63 
	mQQ_NONE
 = 0x00,

64 
	mQQ_ONLINE
 = 0x0a,

65 
	mQQ_OFFLINE
 = 0x14,

66 
	mQQ_AWAY
 = 0x1e,

67 
	mQQ_BUSY
 = 0x32,

68 
	mQQ_KILLME
 = 0x3C,

69 
	mQQ_QUIET
 = 0x46,

70 
	mQQ_HIDDEN
 = 0x28

73 
	eMESSAGE_TYPE
{

74 
	mMT_BUDDY
,

75 
	mMT_QUN
,

76 
	mMT_SYSTEM
,

77 
	mMT_NEWS
,

78 
	mMT_QUN_MEMBER


81 
	#MSG_CONTENT_LEN
 
	`KB
(4)

	)

82 
	sqqmesßge
{

83 
ush‹t
 
	mmsg_id
;

84 
uch¨
 
	mmsg_ty≥
;

85 
ush‹t
 
	mmsg_£q
;

86 
	mmsg_c⁄ã¡
[
MSG_CONTENT_LEN
];

87 
uöt
 
	mmsg_time
;

88 
uöt
 
	mqun_numbî
;

89 
uöt
 
	m‰om
;

90 
	mauto_ª∂y
;

91 
	m¶i˚_cou¡
;

92 
	m¶i˚_no
;

93 
ush‹t
 
	mim_ty≥
;

94 }
	tqqmesßge
;

96 
	gqq˛õ¡
;

97 
buddy_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, 
time_t
 
t
, * 
msg
 );

98 
qun_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, uöà
öt_uid
,

99 
time_t
 
t
, * 
msg
 );

	@qqpacket.c

15 
	~<°rög.h
>

16 
	~<°dlib.h
>

17 #ifde‡
__WIN32__


18 
	~<wösock.h
>

19 
	~<wööë.h
>

21 
	~<sys/sockë.h
>

22 
	~<¨∑/öë.h
>

23 
	~<√tdb.h
>

25 
	~"qqdef.h
"

26 
	~"mem‹y.h
"

27 
	~"debug.h
"

28 
	~"∑ckëmgr.h
"

29 
	~"qq˛õ¡.h
"

30 
	~"qq∑ckë.h
"

32 
	$put_byã
–
byãbuf„r
* 
p
, 
uch¨
 
b
 )

34 if–
p
->
pos
<p->
size
 ){

35 
p
->
d©a
[p->
pos
++] = 
b
;

37 
	`DBG
("∑ckëÖ->pos(%dË>p->size(%d)", 
p
->
pos
,Ö->
size
 );

39 
	}
}

41 
	$put_w‹d
–
byãbuf„r
* 
p
, 
ush‹t
 
b
 )

43 if–
p
->
pos
+1<p->
size
 ){

44 *(
ush‹t
*)(&
p
->
d©a
[p->
pos
]Ë
	`ht⁄s
(
b
);Ö->pos+=2;

46 
	`DBG
("∑ckëÖ->pos(%d)+1 >p->size(%d)", 
p
->
pos
,Ö->
size
 );

48 
	}
}

50 
	$put_öt
–
byãbuf„r
* 
p
, 
uöt
 
b
 )

52 if–
p
->
pos
+3<p->
size
 ){

53 *(
uöt
*)(&
p
->
d©a
[p->
pos
]Ë
	`ht⁄l
(
b
);Ö->pos+=4;

55 
	`DBG
("∑ckëÖ->pos(%d)+3 >p->size(%d)", 
p
->
pos
,Ö->
size
 );

57 
	}
}

59 
	$put_d©a
–
byãbuf„r
* 
p
, 
uch¨
* 
d©a
, 
Àn
 )

61 if–
p
->
pos
+
Àn
<ı->
size
 ){

62 
	`mem˝y
–&
p
->
d©a
[p->
pos
], d©a, 
Àn
 );

63 
p
->
pos
 +
Àn
;

65 
	`DBG
("∑ckëÖ->pos(%d)+%d >Ö->size(%d)", 
p
->
pos
, 
Àn
,Ö->
size
 );

67 
	}
}

69 
	$put_°rög
–
byãbuf„r
* 
p
, * 
°r
 )

71 
	`put_d©a
–
p
, (
uch¨
*)
°r
, 
	`°æí
( str ) );

72 
	}
}

74 
uch¨
 
	$gë_byã
–
byãbuf„r
* 
p
 )

76 
uch¨
 
b
 = 0;

77 if–
p
->
pos
<p->
Àn
 ){

78 
b
 = 
p
->
d©a
[p->
pos
++];

80 
	`DBG
("∑ckëÖ->pos(%dË>p->Àn(%d)", 
p
->
pos
,Ö->
Àn
 );

82  
b
;

83 
	}
}

85 
ush‹t
 
	$gë_w‹d
–
byãbuf„r
* 
p
 )

87 
ush‹t
 
b
 = 0;

88 if–
p
->
pos
+1<p->
Àn
 ){

89 
b
 = *(
ush‹t
*)(&
p
->
d©a
[p->
pos
]);Ö->pos+=2;

91 
	`DBG
("∑ckëÖ->pos(%d)+1 >p->Àn(%d)", 
p
->
pos
,Ö->
Àn
 );

93  
	`¡ohs
(
b
);

94 
	}
}

96 
uöt
 
	$gë_öt
–
byãbuf„r
* 
p
 )

98 
uöt
 
b
 = 0;

99 if–
p
->
pos
+3<p->
Àn
 ){

100 
b
 = *(
uöt
*)(&
p
->
d©a
[p->
pos
]);Ö->pos+=4;\

102 
	`DBG
("∑ckëÖ->pos(%d)+3 >p->Àn(%d)", 
p
->
pos
,Ö->
Àn
 );

104  
	`¡ohl
(
b
);

105 
	}
}

107 
	$gë_°rög
–
byãbuf„r
* 
p
, * 
°r
, 
Àn
 )

109 
j
 = 0;

110  
p
->
pos
<p->
Àn
 && 
j
+1<len ){

111 
°r
[
j
++] = 
p
->
d©a
[p->
pos
++];

112 if–
°r
[
j
-1] == '\0' )

113  
j
;

115 
°r
[
j
] = 0;

116  
j
;

117 
	}
}

119 
	$gë_d©a
–
byãbuf„r
* 
p
, 
uch¨
* 
d©a
, 
Àn
 )

121 if–
p
->
pos
+
Àn
<=p->len ){

122 
	`mem˝y
–
d©a
, &
p
->d©a[p->
pos
], 
Àn
 );

123 
p
->
pos
 +
Àn
;

125 
	`DBG
("∑ckëÖ->pos(%d)+%d >Ö->Àn(%d)", 
p
->
pos
, 
Àn
,Ö->len );

126 
Àn
 = 0;

128  
Àn
;

129 
	}
}

131 
	$gë_tokí
–
byãbuf„r
* 
p
, 
tokí
* 
tok
 )

133 
ush‹t
 
Àn
 = 
	`gë_w‹d
–
p
 );

134 
	`gë_d©a
–
p
, (
uch¨
*)
tok
->
d©a
, 
Àn
 );

135 
tok
->
Àn
 =Üen;

136  
Àn
;

137 
	}
}

140 
	$gë_tokí2
–
byãbuf„r
* 
p
, 
tokí
* 
tok
 )

142 
uch¨
 
Àn
 = 
	`gë_byã
–
p
 );

143 
	`gë_d©a
–
p
, (
uch¨
*)
tok
->
d©a
, 
Àn
 );

144 
tok
->
Àn
 =Üen;

145  
Àn
;

146 
	}
}

	@qqpacket.h

1 #i‚de‡
_PACKET_H


2 
	#_PACKET_H


	)

4 
	~"qqdef.h
"

6 
	#PACKET_SIZE
 
	`KB
(4)

	)

8 
	sbyãbuf„r
{

9 
	mpos
;

10 
	mÀn
;

11 
	msize
;

12 
uch¨
 
	md©a
[
PACKET_SIZE
];

13 }
	tbyãbuf„r
;

15 
	sqq∑ckë
{

18 
	mhód
;

19 
	mèû
;

20 
ush‹t
 
	mvîsi⁄
;

21 
ush‹t
 
	mcomm™d
;

22 
ush‹t
 
	m£qno
;

23 
byãbuf„r
* 
	mbuf
;

24 
time_t
 
	mtime_¸óã
;

25 
time_t
 
	mtime_Æive
;

26 
qq∑ckë
* 
	mm©ch
;

27 
	m£nd_times
;

28 
	mkey_ty≥
;

29 
uch¨
 
	mkey
[16];

30 
	m√ed_ack
;

31 }
	tqq∑ckë
;

33 
put_byã
–
byãbuf„r
* 
p
, 
uch¨
 
b
 );

34 
put_w‹d
–
byãbuf„r
* 
p
, 
ush‹t
 
b
 );

35 
put_öt
–
byãbuf„r
* 
p
, 
uöt
 
b
 );

36 
put_d©a
–
byãbuf„r
* 
p
, 
uch¨
* 
d©a
, 
Àn
 );

37 
put_°rög
–
byãbuf„r
* 
p
, * 
°r
 );

39 
uch¨
 
gë_byã
–
byãbuf„r
* 
p
 );

40 
ush‹t
 
gë_w‹d
–
byãbuf„r
* 
p
 );

41 
uöt
 
gë_öt
–
byãbuf„r
* 
p
 );

42 
gë_°rög
–
byãbuf„r
* 
p
, * 
°r
, 
Àn
 );

43 
gë_d©a
–
byãbuf„r
* 
p
, 
uch¨
* 
d©a
, 
Àn
 );

44 
	gtokí
;

45 
gë_tokí
–
byãbuf„r
* 
p
, 
tokí
* 
d©a
 );

46 
gë_tokí2
–
byãbuf„r
* 
p
, 
tokí
* 
tok
 );

	@qqsocket.c

17 
	~<°dio.h
>

18 
	~<uni°d.h
>

20 #ifde‡
__WIN32__


21 
	~<wösock.h
>

22 
	~<wööë.h
>

24 
	~<sys/sockë.h
>

25 
	~<¨∑/öë.h
>

26 
	~<√tdb.h
>

29 
	~<f˙é.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

32 
	~"qqdef.h
"

33 
	~"debug.h
"

34 
	~"qqsockë.h
"

36 #ifde‡
__WIN32__


37 
WSADATA
 
	gwß_d©a
;

40 
	$qqsockë_öô
()

42 #ifde‡
__WIN32__


43 
ªt
 = 
	`WSASèπup
(
	`MAKEWORD
(2,1), &
wß_d©a
);

44 if–
ªt
 != 0 )

46 
	`DBG
("failed in WSAStartup");

48 
	`DBG
("WSA Startup.");

50 
	}
}

51 
	$qqsockë_íd
()

53 #ifde‡
__WIN32__


54 
	`WSACÀ™up
();

56 
	}
}

59 
	$qqsockë_¸óã
–
ty≥
, * 
ù
, 
ush‹t
 
p‹t
 )

61 
fd
 = 0;

62 
sockaddr_ö
 
addr
;

63  
ty≥
 )

65 
TCP
:

66 
fd
 = 
	`sockë
–
PF_INET
, 
SOCK_STREAM
, 0 );

67 
	`mem£t
–&
addr
, 0, (
sockaddr_ö
) );

68 
addr
.
sö_Ámûy
 = 
PF_INET
;

69 if–
ù
 )

70 
	`√èddr_£t
–
ù
, &
addr
 );

72 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

73 
addr
.
sö_p‹t
 = 
	`ht⁄s
–
p‹t
 );

74 if–
	`böd
–
fd
, (
sockaddr
*)&
addr
, (
sockaddr_ö
) ) < 0 )

76 
	`DBG
("bind socketÉrror!");

77 
	`˛o£
–
fd
 );

81 
UDP
:

82 
fd
 = 
	`sockë
–
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_IP
 );

83 
	`mem£t
–&
addr
, 0, (
sockaddr
) );

84 
addr
.
sö_Ámûy
 = 
PF_INET
;

85 if–
ù
 )

86 
	`√èddr_£t
–
ù
, &
addr
 );

88 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

89 
addr
.
sö_p‹t
 = 
	`ht⁄s
–
p‹t
 );

90 if–
	`böd
–
fd
, (
sockaddr
*)&
addr
, (
sockaddr_ö
) ) < 0 )

92 
	`DBG
("bind socketÉrror!");

93 
	`˛o£
–
fd
 );

98  
fd
;

99 
	}
}

102 
	$qqsockë_˛o£
–
fd
 )

104 #ifde‡
__WIN32__


105 
	`˛o£sockë
–
fd
 );

107 
	`˛o£
–
fd
 );

109 
	}
}

112 
	$qqsockë_c⁄√˘
–
fd
, * 
ù
, 
ush‹t
 
p‹t
 )

114 
sockaddr_ö
 
addr
;

115 
	`mem£t
–&
addr
, 0, (
sockaddr_ö
) );

116 
addr
.
sö_Ámûy
 = 
PF_INET
;

117 
	`√èddr_£t
–
ù
, &
addr
 );

118 
addr
.
sö_p‹t
 = 
	`ht⁄s
–
p‹t
 );

119 if–
	`c⁄√˘
–
fd
, (
sockaddr
*)&
addr
, (
sockaddr_ö
)) < 0 )

121 
	`DBG
("qqsocket connect failed.");

125 
	}
}

128 
	$qqsockë_c⁄√˘2
–
fd
, 
uöt
 
ù
, 
ush‹t
 
p‹t
 )

130 
sockaddr_ö
 
addr
;

131 
	`mem£t
–&
addr
, 0, (
sockaddr_ö
) );

132 
addr
.
sö_Ámûy
 = 
PF_INET
;

133 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
–
ù
 );

134 
addr
.
sö_p‹t
 = 
	`ht⁄s
–
p‹t
 );

135 if–
	`c⁄√˘
–
fd
, (
sockaddr
*)&
addr
, (
sockaddr_ö
)) < 0 )

137 
	`DBG
("qqsocket connect failed.");

141 
	}
}

143 
	$√èddr_£t
–* 
«me
, 
sockaddr_ö
* 
addr
 )

145 if–(
addr
->
sö_addr
.
s_addr
 = 
	`öë_addr
–
«me
 ) ) == -1 )

149 
ho°ít
 *
ho°
;

150 
ho°
 = 
	`gëho°by«me
–
«me
 );

151 if–
ho°
 )

153 
addr
->
sö_addr
.
s_addr
 = *(
size_t
*Ë
ho°
->
h_addr_li°
[0];

154 
	`DBG
("Gë IP: %s", 
	`öë_¡ﬂ
–
addr
->
sö_addr
 ) );

156 
	`DBG
("FaûedÅÿgë i∞by %s", 
«me
 );

159 
	}
}

161 
	$qqsockë_£nd
–
fd
, 
uch¨
* 
buf
, 
size_t
 
size
 )

163 
ªt
;

164 
size_t
 
ª°
;

165 
ª°
 = 
size
;

166  
ª°
 > 0 )

168 
ªt
 = 
	`£nd
–
fd
, (*)
buf
, 
ª°
, 0);

169 if(
ªt
 <= 0 )

171  
ªt
;

173 
ª°
 -
ªt
;

174 
buf
 +
ªt
;

176  
size
;

177 
	}
}

179 
	$qqsockë_ªcv
–
fd
, 
uch¨
* 
buf
, 
size_t
 
size
 )

181 
ªt
;

182 
ªt
 = 
	`ªcv
–
fd
, (*)
buf
, 
size
, 0 );

183  
ªt
;

184 
	}
}

	@qqsocket.h

1 #i‚de‡
_QQSOCKET_H


2 
	#_QQSOCKET_H


	)

5 
	~"qqdef.h
"

7 
	#TCP
 0

	)

8 
	#UDP
 1

	)

10 
	gsockaddr_ö
;

12 
qqsockë_¸óã
–
ty≥
, * 
ù
, 
ush‹t
 
p‹t
 );

13 
qqsockë_c⁄√˘
–
fd
, * 
ù
, 
ush‹t
 
p‹t
 );

14 
qqsockë_c⁄√˘2
–
fd
, 
uöt
 
ù
, 
ush‹t
 
p‹t
 );

15 
qqsockë_£nd
–
fd
, 
uch¨
* 
buf
, 
size_t
 
size
 );

16 
qqsockë_ªcv
–
fd
, 
uch¨
* 
buf
, 
size_t
 
size
 );

17 
qqsockë_˛o£
–
fd
 );

18 
√èddr_£t
–* 
«me
, 
sockaddr_ö
* 
addr
 );

19 
qqsockë_öô
();

20 
qqsockë_íd
();

	@qun.c

15 
	~<time.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"qq˛õ¡.h
"

19 
	~"mem‹y.h
"

20 
	~"debug.h
"

21 
	~"¥Ÿocﬁ.h
"

22 
	~"li°.h
"

23 
	~"buddy.h
"

24 
	~"qun.h
"

26 
	$qun_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

28  ( ((
qqqun
*)
p
)->
numbî
 =()
v
 );

29 
	}
}

31 
	$membî_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

33  ( ((
qunmembî
*)
p
)->
numbî
 =()
v
 );

34 
	}
}

37 
qunmembî
* 
	$qun_membî_gë
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
, 
uöt
 
numbî
, 
¸óã
 )

39 if–!
numbî
 )

40  
NULL
;

41 
qunmembî
* 
m
;

42 
m
 = (
qunmembî
 *)
	`li°_£¨ch
–&
q
->
membî_li°
, (*)
numbî
, 
membî_£¨chî
 );

44 if–!
m
 && 
¸óã
 ){

45 
	`NEW
–
m
, –
qunmembî
 ) ,qunmember);

46 if–!
m
 ){

47 
	`DBG
("FatalÉrror: qunmemberÇotállocated");

48  
m
;

50 
m
->
numbî
 =Çumber;

51 
	`•rötf
–
m
->
nick«me
, "%u", 
numbî
 );

52 if–
	`li°_≠≥nd
–&
q
->
membî_li°
, (*)
m
 )<0 ){

53 
	`DEL
–
m
 );

54 
	`DBG
("can'tádd itÅo member_list");

57  
m
;

58 
	}
}

60 
	$qun_membî_ªmove
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
, 
uöt
 
numbî
 )

62 
qunmembî
* 
m
;

63 
m
 = (
qunmembî
 *)
	`li°_£¨ch
–&
q
->
membî_li°
, (*)
numbî
, 
membî_£¨chî
 );

64 if–
m
 ){

65 
	`li°_ªmove
–&
q
->
membî_li°
, 
m
 );

67 
	}
}

69 
qqqun
* 
	$qun_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 )

71 if–!
numbî
 )

72  
NULL
;

73 
qqqun
* 
q
;

74 
q
 = (
qqqun
 *)
	`li°_£¨ch
–&
qq
->
qun_li°
, (*)
numbî
, 
qun_£¨chî
 );

76 if–!
q
 && 
¸óã
 ){

77 
	`NEW
–
q
, –
qqqun
 ) ,qqqun);

78 if–!
q
 ){

79 
	`DBG
("FatalÉrror: qqqunÇotállocated");

80  
q
;

82 
q
->
numbî
 =Çumber;

83 
	`•rötf
–
q
->
«me
, "%u", 
numbî
 );

84 if–
	`li°_≠≥nd
–&
qq
->
qun_li°
, (*)
q
 )<0 ){

85 
	`DEL
–
q
 );

87 if–
q
 ){

88 
	`li°_¸óã
–&
q
->
membî_li°
, 
MAX_QUN_MEMBER
 );

89 
qunmembî
* 
m
 = 
	`qun_membî_gë
–
qq
, 
q
, qq->
numbî
, 1 );

90 if–
m
 ){

91 
	`°r˝y
–
m
->
nick«me
, 
qq
->
£lf
->nickname );

92 
m
->
°©us
 = 
qq
->
£lf
->status;

96  
q
;

97 
	}
}

99 
	$qun_ext_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

101  ( ((
qqqun
*)
p
)->
ext_numbî
 =()
v
 );

102 
	}
}

103 
qqqun
* 
	$qun_gë_by_ext
–
qq˛õ¡
* 
qq
, 
uöt
 
ext_numbî
 )

105  (
qqqun
 *Ë
	`li°_£¨ch
–&
qq
->
qun_li°
, (*)
ext_numbî
, 
qun_ext_£¨chî
 );

106 
	}
}

108 
	$qun_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 )

110 
qqqun
* 
q
;

111 
q
 = (
qqqun
 *)
	`li°_£¨ch
–&
qq
->
qun_li°
, (*)
numbî
, 
qun_£¨chî
 );

112 if–
q
 ){

113 
	`li°_˛ónup
–&
q
->
membî_li°
 );

114 
	`li°_ªmove
–&
qq
->
qun_li°
, 
q
 );

116 
	}
}

119 
	$qun_kûl_membîs
–c⁄° * 
p
, c⁄° * 
v
 )

121 
	`li°_˛ónup
–&((
qqqun
*)
p
)->
membî_li°
 );

123 
	}
}

124 
	$qun_membî_˛ónup
–
qq˛õ¡
* 
qq
 )

126 
	`li°_£¨ch
–&
qq
->
qun_li°
, 
NULL
, 
qun_kûl_membîs
 );

127 
	}
}

129 
	$qun_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 )

131 
	`¥Ÿ_qun_gë_öfo
–
qq
, 
q
->
numbî
, 0 );

132 
	}
}

134 
	$gë_Æl_membîs
–c⁄° * 
p
, c⁄° * 
v
 )

136 
uöt
** 
k
 = (uöt**)
v
;

137 (**
k
Ë((
qunmembî
*)
p
)->
numbî
;

138 (*
k
)++;

140 
	}
}

141 
	$qun_upd©e_membîöfo
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 )

143 
uöt
* 
numbîs
, *
v
;

144 
	`NEW
–
numbîs
, 
MAX_QUN_MEMBER
*(
uöt
) ,uint);

145 if–!
numbîs
 ) ;

146 
v
 = 
numbîs
;

147 
	`li°_£¨ch
–&
q
->
membî_li°
, (*)&
v
, 
gë_Æl_membîs
 );

148 
cou¡
 = ((
uöt
)
v
 - (uöt)
numbîs
) / (uint);

149 
£nd
;

150 
v
 = 
numbîs
;

151  
cou¡
 > 0 ){

152 
£nd
 = 30;

153 if–
cou¡
 < 
£nd
 ) send = count;

154 
	`¥Ÿ_qun_gë_membîöfo
–
qq
, 
q
->
numbî
, 
v
, 
£nd
 );

155 
v
 +
£nd
;

156 
cou¡
 -
£nd
;

158 
	`DEL
–
numbîs
 );

159 
	}
}

161 
	$qun_upd©e_⁄löe
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 )

163 
	`¥Ÿ_qun_gë_⁄löe
–
qq
, 
q
->
numbî
 );

164 
	}
}

166 
	$membîoff_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

168 ((
qunmembî
*)
p
)->
°©us
 = 
QQ_OFFLINE
;

170 
	}
}

171 
	$qun_£t_membîs_off
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 )

173 
	`li°_£¨ch
–&
q
->
membî_li°
, 
NULL
, 
membîoff_£¨chî
 );

174 
	}
}

177 
	$qun_£nd_mesßge
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg
 )

179 
	`¥Ÿ_qun_£nd_msg
–
qq
, 
numbî
, 
msg
 );

181 
	}
}

183 
	$qun_put_sögÀ_evít
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 )

185 *
ãmp
;

186 
i
;

187 
	`NEW
–
ãmp
, 
	`KB
(128) ,);

188 if–!
ãmp
 )

190 
qunmembî
* 
m
;

191 
	`•rötf
–
ãmp
, "˛u°îöfo^$%u^$%s^$%s^$%s^$", 
q
->
ext_numbî
, q->
«me
, q->
™n
, q->
öåo
 );

192 
	`±hªad_muãx_lock
–&
q
->
membî_li°
.
muãx
 );

193  
i
=0; i<
q
->
membî_li°
.
cou¡
; i++ ){

194 
m
 = (
qunmembî
*)
q
->
membî_li°
.
ôems
[
i
];

195 
	`•rötf
–
ãmp
, "%s%u\t%s\t%s\t%d^@",Åemp, 
m
->
numbî
, m->
nick«me
, 
	`buddy_°©us_°rög
–m->
°©us
 ),

196 
m
->
rﬁe
 );

198 
	`±hªad_muãx_u∆ock
–&
q
->
membî_li°
.
muãx
 );

199 
	`qq˛õ¡_put_evít
–
qq
, 
ãmp
 );

200 
	`DEL
–
ãmp
 );

201 
	}
}

203 
	$qun_put_evít
–
qq˛õ¡
* 
qq
 )

205 
i
;

206 
qqqun
* 
q
;

207 
	`±hªad_muãx_lock
–&
qq
->
qun_li°
.
muãx
 );

208  
i
=0; i<
qq
->
qun_li°
.
cou¡
; i++ ){

209 
q
 = (
qqqun
*)
qq
->
qun_li°
.
ôems
[
i
];

210 
	`qun_put_sögÀ_evít
–
qq
, 
q
 );

212 
	`±hªad_muãx_u∆ock
–&
qq
->
qun_li°
.
muãx
 );

213 
	}
}

217 
	$qun_upd©e_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

219 
	`qun_upd©e_öfo
–(
qq˛õ¡
*)
v
, (
qqqun
*)
p
 );

221 
	}
}

222 
	$qun_upd©e_Æl
–
qq˛õ¡
* 
qq
 )

224 
	`li°_£¨ch
–&
qq
->
qun_li°
, (*)qq, 
qun_upd©e_£¨chî
 );

225 
	}
}

227 
	$qun_upd©e_⁄löe_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

229 
	`qun_upd©e_⁄löe
–(
qq˛õ¡
*)
v
, (
qqqun
*)
p
 );

231 
	}
}

232 
	$qun_upd©e_⁄löe_Æl
–
qq˛õ¡
* 
qq
 )

234 
	`li°_£¨ch
–&
qq
->
qun_li°
, (*)qq, 
qun_upd©e_⁄löe_£¨chî
 );

235 
	}
}

	@qun.h

1 #i‚de‡
_QUN_H


2 
	#_QUN_H


	)

4 
	~"qqdef.h
"

6 
	squnmembî
{

7 
uöt
 
	mnumbî
;

8 
	mnick«me
[
NICKNAME_LEN
];

9 
ush‹t
 
	mÁ˚
;

10 
uch¨
 
	mage
;

11 
uch¨
 
	m£x
;

12 
uch¨
 
	mqqshow
;

13 
uch¨
 
	mÊag
;

14 
uch¨
 
	m°©us
;

15 
uch¨
 
	maccou¡_Êag
;

16 
	maccou¡
[
ACCOUNT_LEN
];

17 
uch¨
 
	mrﬁe
, 
	m‹g
;

18 }
	tqunmembî
;

20 
	sqqqun
{

21 
uöt
 
	mnumbî
;

22 
uöt
 
	mext_numbî
;

23 
	m«me
[
NICKNAME_LEN
];

24 
	m™n
[256];

25 
	möåo
[256];

26 
uöt
 
	mˇãg‹y
;

27 
uöt
 
	mow√r
;

28 
ush‹t
 
	mmax_membî
;

29 
uch¨
 
	mauth_ty≥
;

30 
uch¨
 
	mty≥
;

31 
uöt
 
	m‹dî
;

32 
tokí
 
	mtokí_cmd
;

33 
li°
 
	mmembî_li°
;

34 }
	tqqqun
;

36 
	gqq˛õ¡
;

37 
qqqun
* 
qun_gë
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, 
¸óã
 );

38 
qqqun
* 
qun_gë_by_ext
–
qq˛õ¡
* 
qq
, 
uöt
 
ext_numbî
 );

39 
qun_ªmove
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
 );

40 
qunmembî
* 
qun_membî_gë
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
, 
uöt
 
numbî
, 
¸óã
 );

41 
qun_membî_ªmove
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
, 
uöt
 
numbî
 );

42 
qun_upd©e_membîöfo
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 );

43 
qun_upd©e_öfo
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 );

44 
qun_upd©e_⁄löe
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 );

45 
qun_upd©e_Æl
–
qq˛õ¡
* 
qq
 );

46 
qun_£t_membîs_off
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 );

47 
qun_membî_˛ónup
–
qq˛õ¡
* 
qq
 );

48 
qun_£nd_mesßge
–
qq˛õ¡
* 
qq
, 
uöt
 
numbî
, * 
msg
 );

49 
qun_put_sögÀ_evít
–
qq˛õ¡
* 
qq
, 
qqqun
* 
q
 );

50 
qun_put_evít
–
qq˛õ¡
* 
qq
 );

51 
qun_upd©e_⁄löe_Æl
–
qq˛õ¡
* 
qq
 );

	@utf8.c

15 #ifde‡
__WIN32__


16 
	~<wödows.h
>

18 
	~<ic⁄v.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

25 
	~"debug.h
"

26 
	~"mem‹y.h
"

27 
	~"c⁄fig.h
"

28 
	~"utf8.h
"

32 #ifde‡
__WIN32__


33 
	$utf8_to_gb
 ( * 
§c
, * 
d°
, 
Àn
 )

35 
ªt
 = 0;

36 
WCHAR
* 
°rA
;

37 
i

	`Mu…iByãToWideCh¨
 ( 
CP_UTF8
, 0 , 
§c
, -1, 
NULL
, 0 );

38 if–
i
<=0 ){

39 
	`DBG
("ERROR."); ;

41 
°rA
 = 
	`mÆloc
–
i
*2 );

42 
	`Mu…iByãToWideCh¨
 ( 
CP_UTF8
 , 0 , 
§c
, -1, 
°rA
 , 
i
);

43 
i

	`WideCh¨ToMu…iByã
(
CP_ACP
,0,
°rA
,-1,
NULL
,0,NULL,NULL);

44 if–
Àn
 >
i
 ){

45 
ªt
 = 
	`WideCh¨ToMu…iByã
 (
CP_ACP
,0,
°rA
,-1,
d°
,
i
,
NULL
,NULL);

46 
d°
[
i
] = 0;

48 if–
ªt
<=0 ){

49 
	`‰ì
–
°rA
 ); ;

51 
	`‰ì
–
°rA
 );

52 
	}
}

53 
	$gb_to_utf8
 ( * 
§c
, * 
d°
, 
Àn
 )

55 
ªt
 = 0;

56 
WCHAR
* 
°rA
;

57 
i

	`Mu…iByãToWideCh¨
 ( 
CP_ACP
, 0 , 
§c
, -1, 
NULL
, 0 );

58 if–
i
<=0 ){

59 
	`DBG
("ERROR."); ;

61 
°rA
 = 
	`mÆloc
–
i
*2 );

62 
	`Mu…iByãToWideCh¨
 ( 
CP_ACP
 , 0 , 
§c
, -1, 
°rA
 , 
i
);

63 
i

	`WideCh¨ToMu…iByã
(
CP_UTF8
,0,
°rA
,-1,
NULL
,0,NULL,NULL);

64 if–
Àn
 >
i
 ){

65 
ªt
 = 
	`WideCh¨ToMu…iByã
 (
CP_UTF8
,0,
°rA
,-1,
d°
,
i
,
NULL
,NULL);

66 
d°
[
i
] = 0;

68 if–
ªt
<=0 ){

69 
	`‰ì
–
°rA
 ); ;

71 
	`‰ì
–
°rA
 );

72 
	}
}

74 
	$utf8_to_gb
–* 
§c
, * 
d°
, 
Àn
 )

76 
ªt
 = 0;

77 
uöt
 
öÀn
 = 
	`°æí
–
§c
 );

78 
uöt
 
ouéí
 = 
Àn
;

79 * 
öbuf
 = 
§c
;

80 * 
outbuf
 = 
d°
;

81 
ic⁄v_t
 
cd
;

82 
cd
 = 
	`ic⁄v_›í
( "GBK", "UTF-8" );

83 i‡–
cd
 !(
ic⁄v_t
)-1 ){

84 
ªt
 = 
	`ic⁄v
–
cd
, &
öbuf
, &
öÀn
, &
outbuf
, &
ouéí
 );

85 if–
ªt
 != 0 )

86 
	`¥ötf
("ic⁄v faûedÉº: %s\n", 
	`°ªº‹
(
î∫o
) );

87 
	`ic⁄v_˛o£
–
cd
 );

89 
	}
}

90 
	$gb_to_utf8
–* 
§c
, * 
d°
, 
Àn
 )

92 
ªt
 = 0;

93 
uöt
 
öÀn
 = 
	`°æí
–
§c
 );

94 
uöt
 
ouéí
 = 
Àn
;

95 * 
öbuf
 = 
§c
;

96 * 
outbuf
 = 
d°
;

97 
ic⁄v_t
 
cd
;

98 
cd
 = 
	`ic⁄v_›í
( "UTF-8", "GBK" );

99 i‡–
cd
 !(
ic⁄v_t
)-1 ){

100 
ªt
 = 
	`ic⁄v
–
cd
, &
öbuf
, &
öÀn
, &
outbuf
, &
ouéí
 );

101 if–
ªt
 != 0 )

102 
	`¥ötf
("ic⁄v faûedÉº: %s\n", 
	`°ªº‹
(
î∫o
) );

103 
	`ic⁄v_˛o£
–
cd
 );

105 
	}
}

	@utf8.h

1 #i‚de‡
_UTF8_H


2 
	#_UTF8_H


	)

4 
utf8_to_gb
 ( * 
§c
, * 
d°
, 
Àn
 );

5 
gb_to_utf8
–* 
§c
, * 
d°
, 
Àn
 );

6 
decode_uri
–* 
öput
 );

7 
if_UTF8
(*
°r
);

	@util.c

13 #ifde‡
__WIN32__


14 
	~<io.h
>

15 
	~<wödows.h
>

17 
	~<sys/°©.h
>

19 
	~<°dio.h
>

20 
	~<°d¨g.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<time.h
>

24 
	~"qqsockë.h
"

25 
	~"debug.h
"

26 
	~"qqdef.h
"

27 
	~"utû.h
"

28 
	~"mem‹y.h
"

30 
	$mkdú_ªcursive
–* 
∑th
 )

32 *
p
;

33 if–
	`ac˚ss
–
∑th
, 0 ) == 0 )

35  
p
=
∑th
; *p;Ö++ ){

36 if–
p
>
∑th
 && *p == '/' ){

37 *
p
 = 0;

38 if–
	`ac˚ss
–
∑th
, 0 ) != 0 ){

39 #ifde‡
__WIN32__


40 
	`mkdú
–
∑th
 );

42 if–
	`mkdú
–
∑th
, 
S_IRWXU
 ) != 0 )

46 *
p
 = '/';

49 #ifde‡
__WIN32__


50  
	`mkdú
–
∑th
 );

52  
	`mkdú
–
∑th
, 
S_IRWXU
 );

54 
	}
}

56 
	$å™s_Á˚s
–* 
§c
, * 
d°
, 
ouéí
 )

58 * 
p
, *
q
;

59 
p
 = 
§c
; 
q
 = 
d°
;

60  *
p
 ){

61 if–*(
p
++) == 0x14 ){

62 if–()(
q
-
d°
Ë< 
ouéí
 - 10 )

63 
q
 +
	`•rötf
–q, "[Á˚:%u]", *(
p
++) );

65 if–()(
q
-
d°
Ë< 
ouéí
 )

66 *(
q
++Ë*(
p
-1);

69 *
q
 = 0;

70  ()(
q
-
d°
);

71 
	}
}

75 * 
	$mid_vÆue
–* 
°r
, * 
À·
, * 
right
, * 
out
, 
ouéí
 )

77 * 
beg
, * 
íd
, 
t
;

78 
beg
 = 
	`°r°r
–
°r
, 
À·
 );

79 if–
beg
 ){

80 
beg
 +
	`°æí
(
À·
);

81 if–
right
 ){

82 
íd
 = 
	`°r°r
–
beg
, 
right
 );

84 
íd
 = 
beg
 + 
	`°æí
(beg);

86 if–
íd
 ){

87 
t
 = *
íd
; *end = 0;

88 
	`°∫˝y
–
out
, 
beg
, 
ouéí
 );

89 *
íd
 = 
t
;

90  
íd
;

93 *
out
 = '\0';

94  
°r
;

95 
	}
}

101 
	$hâp_ªque°
–* 
hâp_sock
, * 
uæ
, * 
£ssi⁄
, * 
d©a
, * 
d©Æí
 )

103 
ho°_«me
[32], 
uri
[101], *
hódî
, *
√xt
, 
tmp
[16];

104 
Àn
, 
d©a_Àn
;

106 
√xt
 = 
	`mid_vÆue
–
uæ
, "//", "/", 
ho°_«me
, 31 );

107 
√xt
 = 
	`mid_vÆue
–√xt, "/", 
NULL
, 
uri
, 100 );

109 *
hâp_sock
 = 
	`qqsockë_¸óã
–
TCP
, 
NULL
, 0 );

110 if–*
hâp_sock
 <= 0 )  -3;

111 
	`qqsockë_c⁄√˘
–*
hâp_sock
, 
ho°_«me
, 80 );

112 
	`NEW
–
hódî
, 
	`KB
(4) ,);

113 
	`•rötf
–
hódî
, "GET %†HTTP/1.1\r\n\r\n", 
uri
 );

114 
	`qqsockë_£nd
–*
hâp_sock
, (
uch¨
*)
hódî
, 
	`°æí
(header) );

115 
Àn
 = 
	`qqsockë_ªcv
–*
hâp_sock
, (
uch¨
*)
hódî
, 
	`KB
(4) );

117 if–
Àn
>0 ){

118 
√xt
 = 
	`mid_vÆue
–
hódî
, "C⁄ã¡-Lígth: ", "\r\n", 
tmp
, 15 );

119 
d©a_Àn
 = 
	`©oi
–
tmp
 );

120 
√xt
 = 
	`mid_vÆue
–
hódî
, "gëqq£ssi⁄:", "\r\n", 
£ssi⁄
, 127 );

121  
Àn
 < 
d©a_Àn
 ){

122 
ªt
 = 
	`qqsockë_ªcv
–*
hâp_sock
, (
uch¨
*)(
hódî
 + 
Àn
), 
	`KB
(4)-len );

123 if–
ªt
 > 0 ) 
Àn
 +=Ñet; ;

125 
√xt
 = 
	`°r°r
–
hódî
, "\r\n\r\n" ) + 4;

126 if–
√xt
 ){

127 if–*
d©Æí
 > 
d©a_Àn
 ){

128 
	`mem˝y
–(*)
d©a
, (*)
√xt
, 
d©a_Àn
 );

129 *
d©Æí
 = 
d©a_Àn
;

131 
	`DBG
("datalen isÅoo small.");

135 
	`DEL
–
hódî
 );

136 
	`qqsockë_˛o£
–*
hâp_sock
 );

138 
	}
}

140 #ifde‡
__WIN32__


141 
	$m¶ìp
–
ms
 )

143 
	`SÀï
–
ms
 );

144 
	}
}

	@util.h

1 #i‚de‡
_UTIL_H


2 
	#_UTIL_H


	)

4 
mkdú_ªcursive
–* 
∑th
 );

5 
å™s_Á˚s
–* 
§c
, * 
d°
, 
ouéí
 );

6 
hâp_ªque°
–* 
hâp_sock
, * 
uæ
, * 
£ssi⁄
, * 
d©a
, * 
d©Æí
 );

7 * 
mid_vÆue
–* 
°r
, * 
À·
, * 
right
, * 
out
, 
ouéí
 );

8 
m¶ìp
–
ms
 );

	@vit.c

4 
	~<cur£s.h
>

5 
	~<°rög.h
>

6 
	#CTRL
(
c
Ë((cË& 037)

	)

7 
	#FONTCOLOR
 
COLOR_WHITE


	)

8 
	#NUMBERCOLOR
 
COLOR_RED


	)

9 
	#SYSCOL
 4

	)

10 
	#SYSROW
 2

	)

11 
	#FONTCOLOR1
 
COLOR_BLACK


	)

12 
	#FONTCOLOR2
 
COLOR_RED


	)

13 
	grow
, 
	gcﬁ
;

14 
	gfûe_row
, 
	gfûe_cﬁ
;

15 
boﬁ
 
	gßved
;

16 
boﬁ
 
	gisWñcome
;

17 
	gfûe_«me
[10];

21 
	$öô_cur£s
()

23 
	`öôs¸
();

33 
	`cbªak
();

34 
	`n⁄l
();

35 
	`n€cho
();

36 
	`öåÊush
(
°ds¸
, 
FALSE
);

37 
	`key∑d
(
°ds¸
, 
TRUE
);

40 
	}
}

41 
	$°©usb¨
(*
°r
)

43 
mesßge
[
COLS
];

49 if(!
	`°rcmp
(
fûe_«me
, ""))

50 
	`mv¥ötw
(
LINES
-
SYSROW
,0,"%s","[No Name]");

52 
	`mv¥ötw
(
LINES
-
SYSROW
,0,"%s",
fûe_«me
);

53 
	`mv¥ötw
(
LINES
-
SYSROW
,
COLS
-6,"%2d,%-3d",
fûe_row
,
fûe_cﬁ
);

55 
	}
}

56 
	$£t_comm™d_löe
(*
°r
)

59 
	`mvadd°r
(
LINES
-1, 0, 
°r
);

60 
	`wª‰esh
(
°ds¸
);

61 
	}
}

62 
	$Àn
(
löío
)

64 
löñí
 = 
COLS
 - 1;

66 
löñí
 >0 && 
	`mvöch
(
löío
,Üinelen) == ' ')

67 
löñí
--;

68  
löñí
 + 1;

69 
	}
}

71 
	$öô
(
¨gc
,**
¨gv
)

73 
ßved
=1;

74 
FILE
 *
fd
;

76 
	`öô_cur£s
();

77 
	`£éöe
(1,0);

78 i‡(
¨gc
 == 1)

80 
	`°r˝y
(
fûe_«me
, "");

81 
	`°©usb¨
(
NULL
);

82 
	`Show_Wñcome
();

86 
isWñcome
=0;

88 
	`°r˝y
(
fûe_«me
,
¨gv
[1]);

89 
	`ªad_fûe
(
fûe_«me
);

90 } 
cﬁ
=
SYSCOL
;

91 
	}
}

92 
	$ªad_fûe
(*
‚
)

94 
FILE
 *
fd
;

95 
fd
 = 
	`f›í
(
‚
, "rb");

96 i‡(
fd
 =
NULL
)

98 
fûe_row
= 1;

99 
row
= 0;

100 
Àngth
 = 
SYSCOL
;

101 
c
;

102 
boﬁ
 
√wlöe
=0;

103 (
c
 = 
	`gëc
(
fd
)Ë!
EOF
)

105 i‡(
row
 =
LINES
 - 
SYSROW
)

107 if(
√wlöe
)

109 
	`£éöe
(
fûe_row
,
row
);

110 
√wlöe
=0;

112 i‡(
c
 == '\n')

114 
row
++;

115 
fûe_row
++;

116 
Àngth
=
SYSCOL
;

117 
√wlöe
=1;

120 if(!(
Àngth
%
COLS
))

122 
row
++;

123 
Àngth
 = 
SYSCOL
;

124 
	`move
(
row
,
SYSCOL
);

126 
	`addch
(
c
);

127 
Àngth
++;

129 
	`f˛o£
(
fd
);

130 if(
	`has_cﬁ‹s
())

132 
	`°¨t_cﬁ‹
();

133 
	`öô_∑ú
(1, 
FONTCOLOR
, 
COLOR_BLACK
);

134 
	`öô_∑ú
(2, 
FONTCOLOR1
, 
COLOR_BLACK
);

135 
	`öô_∑ú
(3,
FONTCOLOR2
,
COLOR_BLACK
);

137 
	`©å⁄
(
	`COLOR_PAIR
(3));

138 
	`©å⁄
(
A_BOLD
);

140 ;
row
<
LINES
 - 
SYSROW
;row++)

141 
	`mv¥ötw
(
row
,2,"~");

142 if(
	`has_cﬁ‹s
())

144 
	`©åoff
(
	`COLOR_PAIR
(1));

145 
	`©åoff
(
A_BOLD
);

148 
	}
}

149 
	$£éöe
(
löe
,
edô‹_löe
)

162 if(
	`has_cﬁ‹s
())

164 
	`°¨t_cﬁ‹
();

165 
	`öô_∑ú
(1, 
FONTCOLOR
, 
COLOR_BLACK
);

166 
	`öô_∑ú
(2, 
FONTCOLOR1
, 
COLOR_BLACK
);

167 
	`öô_∑ú
(3,
FONTCOLOR2
,
COLOR_BLACK
);

169 
	`©å⁄
(
	`COLOR_PAIR
(3));

170 
	`©å⁄
(
A_BOLD
);

174 
	`mv¥ötw
(
edô‹_löe
,0,"%3d",
löe
);

190 
	`move
(
edô‹_löe
,
SYSCOL
);

191 if(
	`has_cﬁ‹s
())

193 
	`©åoff
(
	`COLOR_PAIR
(1));

194 
	`©åoff
(
A_BOLD
);

198 
	}
}

199 
	$Show_Wñcome
()

201 
iLöe
 = 
LINES
/2 -6;

202 
iCﬁ
 = 
COLS
/2;

203 
	`mvadd°r
(
iLöe
, 
iCﬁ
-7,"VIT - Vi Tiny");

204 
	`mvadd°r
(
iLöe
+2, 
iCﬁ
-6,"Version 1.0");

205 
	`mvadd°r
(
iLöe
+3, 
iCﬁ
-6,"by D.C.T.X.");

206 
	`mvadd°r
(
iLöe
+4, 
iCﬁ
-22,"VIT is open sourceánd freely distributable");

207 
	`mvadd°r
(
iLöe
+6, 
iCﬁ
-21,"HelpÅhe survivers ofÉarthquake in Sichuan");

208 
	`mvadd°r
(
iLöe
+7, 
iCﬁ
-21,"type :q<Enter>ÅoÉxit");

213 
isWñcome
=
åue
;

214 
	}
}

216 
	$edô
()

218 
c
;

219 
fûe_row
=
fûe_cﬁ
=1;

222 
	`°©usb¨
(
NULL
);

223 
	`move
(
row
, 
cﬁ
);

224 
	`ª‰esh
();

225 
c
 = 
	`gëch
();

227 
c
)

232 
KEY_LEFT
:

233 
KEY_BACKSPACE
:

234 
	`move_back
();

238 
KEY_DOWN
:

239 
	`move_down
();

243 
KEY_UP
:

244 
	`move_up
();

248 
KEY_RIGHT
:

249 
	`move_f‹w¨d
();

252 
KEY_IC
:

254 
	`ö£π
();

258 i‡(
cﬁ
 < 
COLS
 - 1)

259 
cﬁ
++;

260 
	`ö£π
();

264 
KEY_DC
:

266 
	`dñëe_ch¨a˘î
();

270 
KEY_IL
:

274 
	`ö£π 
();

275 
fûe_row
++;

276 
row
++;

277 
	`£éöe
(
fûe_row
,
row
);

278 
	`ö£π
();

282 
KEY_DL
:

284 
	`dñëe_löe
();

289 
KEY_CLEAR
:

290 
	`CTRL
('L'):

291 
	`wª‰esh
(
curs¸
);

294 
	`comm™d
(':');

297 
	`comm™d
('/');

300 
	`comm™d
('?');

303 
	`föd_√xt
();

306 
	`°©usb¨
("unextended operator");

310 
	}
}

311 
	$dñëe_ch¨a˘î
()

313 
	`dñch
();

314 
i
;

315 
i
=1;
	`mvöch
(
row
+i,
SYSCOL
-2) == ' ';i++)

317 
chty≥
 
c
 = 
	`mvöch
(
row
+
i
,
SYSCOL
);

318 
	`mvaddch
(
row
+
i
-1,
COLS
-1,
c
);

319 
	`mvdñch
(
row
+
i
,
SYSCOL
);

321 
	}
}

322 
	$dñëe_löe
()

324 if(
	`has_cﬁ‹s
())

326 
	`°¨t_cﬁ‹
();

327 
	`öô_∑ú
(1, 
FONTCOLOR
, 
COLOR_BLACK
);

328 
	`öô_∑ú
(2, 
FONTCOLOR1
, 
COLOR_BLACK
);

329 
	`öô_∑ú
(3,
FONTCOLOR2
,
COLOR_BLACK
);

331 
	`©å⁄
(
	`COLOR_PAIR
(3));

332 
	`©å⁄
(
A_BOLD
);

334 
	`dñëñn
();

335 
i
;

337 
	`move
(
LINES
-
SYSROW
-1,0);

338 
	`˛π€ﬁ
();

339 
	`mv¥ötw
(
LINES
-
SYSROW
-1,2,"~");

341 
a
;

343 
fögî
;

344 
boﬁ
 
fú°
=1;

345 
a
=
row
;a<
LINES
-
SYSROW
;a++)

347 
i
=
SYSCOL
-2;i>=0;i--)

349 
fögî
=
	`mvöch
(
a
,
i
Ë& 
A_CHARTEXT
;

350 if(
fögî
 == '~')

352 if(
fögî
 == ' ')

354 if(
fú°
)

356 
	`dñëñn
();

357 
a
--;

363 
fú°
=0;

364 if(
fögî
==48)

366 
	`addch
(57);

370 
	`addch
(
fögî
-1);

375 if((
	`mvöch
(
row
,
SYSCOL
-2Ë& 
A_CHARTEXT
)== '~')

377 
	`move_up
();

381 if(
	`has_cﬁ‹s
())

383 
	`©åoff
(
	`COLOR_PAIR
(1));

384 
	`©åoff
(
A_BOLD
);

387 
	}
}

388 
	$move_back
()

390 i‡(
cﬁ
 > 
SYSCOL
)

392 
cﬁ
--;

393 
fûe_cﬁ
--;

395 if(
	`mvöch
(
row
, 
SYSCOL
-2) == ' ')

397 
row
--;

398 
cﬁ
=
COLS
-1;

399 
fûe_cﬁ
--;

401 
	}
}

402 
	$move_f‹w¨d
()

404 i‡(
cﬁ
 < 
COLS
 - 1)

406 
cﬁ
++;

407 
fûe_cﬁ
++;

409 if(
	`mvöch
(
row
+1, 
SYSCOL
-2) == ' ')

411 
row
++;

412 
cﬁ
=
SYSCOL
;

413 
fûe_cﬁ
++;

415 
	}
}

416 
	$move_down
()

418 
i
=1;

419 (
	`mvöch
(
row
+
i
, 
SYSCOL
-2Ë& 
A_CHARTEXT
) == ' ')

420 
i
++;

421 if((
	`mvöch
(
row
+
i
, 
SYSCOL
-2Ë& 
A_CHARTEXT
) == '~'){}

422 if(
row
+
i
 < 
LINES
 - 2)

424 
row
Ùow+
i
;

425 
fûe_row
++;

426 
fûe_cﬁ
=
cﬁ
-3;

428 
	}
}

429 
	$move_up
()

431 i‡(
row
 > 0)

433 
i
;

434 
i
=1;
	`mvöch
(
row
-i, 
SYSCOL
-2) == ' ';i++){}

435 
row
Ùow-
i
;

436 
fûe_row
--;

437 
fûe_cﬁ
 = 
cﬁ
-3;

443 
	}
}

445 
	$comm™d
(
ty≥
)

447 
	`move
(
LINES
-1,0);

448 
	`˛π€ﬁ
();

449 
	`addch
(
ty≥
);

450 
posi
=1;

452 
c
;

453 
i
=0;

456 
c
=
	`gëch
();

457 i‡(
c
 == 27)

460 
	`˛π€ﬁ
();

463 i‡(
c
 == 13)

465 
comm™d_°r
[
COLS
];

466 
n
 = 
	`Àn
(
LINES
-1);

467 
i
;

468 
i
=0;i<
n
;i++)

469 
comm™d_°r
[
i
] = 
	`mvöch
(
LINES
-1,i+1Ë& 
A_CHARTEXT
;

470 
comm™d_°r
[
n
]='\0';

472 
ty≥
)

475 
	`execuã
(
comm™d_°r
);

478 
	`£¨ch
(
comm™d_°r
);

481 
	`ªvî£_£¨ch
(
comm™d_°r
);

488 if(
c
 =
KEY_BACKSPACE
)

490 if(
posi
>1)

492 
posi
--;

493 
	`move
(
LINES
-1,
posi
);

494 
	`dñch
();

501 if(
posi
<
COLS
-1)

503 
	`addch
(
c
);

504 
posi
++;

508 
	}
}

509 
	$execuã
(*
comm™d_°r
)

511 *
pch
 = 
	`°πok
(
comm™d_°r
," ");

512 if(
pch
 !
NULL
)

514 if(!
	`°rcmp
(
pch
,"q"))

515 
	`quô
();

516 if(!
	`°rcmp
(
pch
,"w"))

518 
pch
 = 
	`°πok
(
NULL
, " ");

519 if(
pch
!=
NULL
)

520 
	`°r˝y
(
fûe_«me
, 
pch
);

521 
	`wrôe_fûe
(
fûe_«me
);

523 if(!
	`°rcmp
(
pch
,"wq"))

525 
pch
 = 
	`°πok
 (
NULL
, " ");

526 if(
pch
==
NULL
)

527 
	`wrôe_fûe
(
fûe_«me
);

529 
	`wrôe_fûe
(
pch
);

530 
	`quô
();

532 if(!
	`°rcmp
(
pch
,"q!"))

534 
	`≥º‹
(), 
	`exô
();

535 
	`ídwö
();

536 
	`exô
(2);

538 if(!
	`°rcmp
(
pch
,"r"))

540 
pch
 = 
	`°πok
(
NULL
," ");

541 if(
pch
!=
NULL
)

543 
	`move
(
row
,
cﬁ
);

544 
	`ªad_fûe
(
pch
);

547 
	`°©usb¨
("please inputá fileÇame");

550 
	}
}

551 
	$wrôe_fûe
(*
fûe_nm
)

553 if(
fûe_nm
==
NULL
)

555 
	`mv¥ötw
(
LINES
-1,0,"%s","E32: No File Name");

559 
i
, 
n
, 
l
;

560 
FILE
 *
food
;

561 
food
 = 
	`f›í
(
fûe_nm
, "w");

562 
l
 = 0;Ü < 
LINES
 - 
SYSCOL
;Ü++)

564 
n
 = 
	`Àn
(
l
);

565 
i
 = 
SYSCOL
; i < 
n
; i++)

566 
	`putc
(
	`mvöch
(
l
, 
i
Ë& 
A_CHARTEXT
, 
food
);

567 if((
	`mvöch
(
l
+1,2Ë& 
A_CHARTEXT
) != ' ')

568 
	`putc
('\n', 
food
);

570 
	`f˛o£
(
food
);

571 
ßved
=1;

572 
	`mv¥ötw
(
LINES
-
SYSROW
,20,"%s"," ");

574 
	}
}

575 
	$quô
()

577 
	`≥º‹
(), 
	`exô
();

578 if(
ßved
)

580 
	`ídwö
();

581 
	`exô
(2);

585 
	`mv¥ötw
(
LINES
-1,0,"%s","No Saved!Please saveánd quit(wq) or Not saveánd quit!(q!)");

588 
	}
}

590 
	$ö£π
()

592 
c
;

594 
	`°©usb¨
(
NULL
);

595 
	`£t_comm™d_löe
("-- INSERT --");

597 
	`move
(
row
, 
cﬁ
);

598 
	`ª‰esh
();

601 
c
 = 
	`gëch
();

602 i‡(
c
 == 27)

604 if(
cﬁ
>
SYSCOL
)

605 
cﬁ
--;

606 
	`£t_comm™d_löe
(" ");

611 
ßved
=0;

612 if(
c
 =
KEY_BACKSPACE
)

614 if(
cﬁ
>
SYSCOL
)

616 
cﬁ
--;

617 
	`move
(
row
,
cﬁ
);

618 
	`dñch
();

623 if(
isWñcome
)

625 
	`˛ór
();

626 
	`°©usb¨
(
NULL
);

627 
	`£t_comm™d_löe
("-- INSERT --");

628 
	`£éöe
(1,0);

629 
cﬁ
=4;

630 
	`move
(
row
,
cﬁ
);

631 
isWñcome
=0;

633 
	`ösch
(
c
);

635 
	`mv¥ötw
(
LINES
-
SYSROW
,20,"[+]");

636 
	`move
(
row
, ++
cﬁ
);

640 
	`move
(
LINES
 - 1, 
COLS
 - 20);

641 
	`˛π€ﬁ
();

642 
	`move
(
row
, 
cﬁ
);

643 
	`ª‰esh
();

644 
	}
}

646 
	$£¨ch
(*
exgª
)

648 
	}
}

649 
	$ªvî£_£¨ch
(*
exgª
)

651 
	}
}

652 
	$föd_√xt
(*
sub_°r
)

654 
	}
}

656 
	$maö
(
¨gc
,**
¨gv
)

658 
fûe_«me
[10];

660 
	`öô
(
¨gc
, 
¨gv
);

661 
	`edô
();

663 
	}
}

	@webqq.c

14 
	#WEBQQLIB


	)

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<±hªad.h
>

21 #ifde‡
__WIN32__


22 
	~<wösock.h
>

23 
	~<wööë.h
>

25 
	~<sys/sockë.h
>

26 
	~<¨∑/öë.h
>

29 
	~"debug.h
"

30 
	~"mem‹y.h
"

31 
	~"qq˛õ¡.h
"

32 
	~"webqq.h
"

33 
	~"lo›.h
"

34 
	~"buddy.h
"

35 
	~"qun.h
"

36 
	~"group.h
"

37 
	~"c⁄fig.h
"

38 
	~"qqsockë.h
"

40 
	#TIMEOUT
 120

	)

41 
	#MAX_USERS
 1000

	)

43 
lo›
 
	gu£r_lo›
;

45 
±hªad_t
 
	gthªad_gu¨dî
;

46 
	gwebqq_ru¬ög
 = 0;

48 
	$dñëe_func
(c⁄° *
p
)

50 
u£r
* 
u
 = (u£r*)
p
;

51 
	`qq˛õ¡_logout
–
u
->
qq
 );

52 
	`qq˛õ¡_˛ónup
–
u
->
qq
 );

53 
	`SLEEP
(1);

54 
	`DEL
–
u
->
qq
 );

55 
	`DEL
–
u
 );

56 
	}
}

58 
	$gu¨dî_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

60 
u£r
* 
u
 = (u£r*)
p
;

61 
time_t
 
timíow
 = (time_t)
v
;

62 if–
timíow
-
u
->
upd©e_time
 > 
TIMEOUT
 && u->
ª„ªn˚
 == 0 ){

66 
	}
}

67 * 
	$webqq_gu¨dî
–* 
d©a
 )

69 
cou¡î
 = 0;

70 
	`DBG
("webqq_guarder");

71  
webqq_ru¬ög
 ){

72 
time_t
 
timíow
 = 
	`time
(
NULL
);

73 
cou¡î
 ++;

74 
u£r
* 
u
;

76 
u
 = 
	`lo›_£¨ch
–&
u£r_lo›
, (*)
timíow
, 
gu¨dî_£¨chî
 );

77 if–
u
 ){

78 
	`DBG
("removing qq: %uÅime1: %u -Åime2: %u > 120",

79 ((
qq˛õ¡
*)
u
->
qq
)->
numbî
, 
timíow
, u->
upd©e_time
 );

80 
	`lo›_ªmove
–&
u£r_lo›
, (*)
u
 );

81 
	`dñëe_func
–(*)
u
 );

83 } 
u
 );

84 
	`SLEEP
( 1 );

86 
	`DBG
("end.");

87  
NULL
;

88 
	}
}

91 
EXPORT
 
	$webqq_öô
()

93 
ªt
;

94 
webqq_ru¬ög
 = 1;

95 
	`c⁄fig_öô
();

97 
	`lo›_¸óã
–&
u£r_lo›
, 
MAX_USERS
, 
dñëe_func
 );

98 
ªt
 = 
	`±hªad_¸óã
–&
thªad_gu¨dî
, 
NULL
, 
webqq_gu¨dî
, (*)0 );

99 
	}
}

101 
EXPORT
 
	$webqq_íd
()

103 
	`DBG
("webqq_ending");

104 
webqq_ru¬ög
 = 0;

105 
	`±hªad_joö
–
thªad_gu¨dî
, 
NULL
 );

106 
	`lo›_˛ónup
–&
u£r_lo›
 );

107 
	`c⁄fig_íd
();

109 
	`DBG
("webqq_ended");

110 
	}
}

114 
	$gë_u£r_£¨chî
–c⁄° * 
p
, c⁄° * 
v
 )

116  ((
u£r
*)
p
)->
£ssi⁄_±r
 =
v
;

117 
	}
}

118 
EXPORT
 
u£r
* 
	$webqq_gë_u£r
–* 
£ssi⁄_±r
 )

120 
u£r
* 
u
 = (u£r*)
	`lo›_£¨ch
–&
u£r_lo›
, 
£ssi⁄_±r
, 
gë_u£r_£¨chî
 );

121 if–
u
 ){

122 
u
->
ª„ªn˚
 ++;

123 
u
->
upd©e_time
 = 
	`time
(
NULL
);

126  
u
;

127 
	}
}

129 
EXPORT
 
u£r
* 
	$webqq_¸óã_u£r
–* 
£ssi⁄_±r
, 
uöt
 
numbî
, 
uch¨
* 
md5∑ss
 )

131 
u£r
* 
u
;

132 
qq˛õ¡
* 
qq
;

133 
u
 = 
	`lo›_£¨ch
–&
u£r_lo›
, 
£ssi⁄_±r
, 
gë_u£r_£¨chî
 );

134 if–
u
 )

135  
u
;

136 
	`NEW
–
qq
, (
qq˛õ¡
) );

137 
	`NEW
–
u
, (
u£r
) );

138 if–!
u
 || !
qq
 ){

139 
	`DEL
–
qq
 ); DEL–
u
 );

140  
NULL
;

142 
u
->
£ssi⁄_±r
 = session_ptr;

143 
u
->
¸óã_time
 = u->
upd©e_time
 = 
	`time
(
NULL
);

144 
u
->
qq
 = qq;

145 
u
->
ª„ªn˚
 = 1;

146 
	`qq˛õ¡_md5_¸óã
–
qq
, 
numbî
, 
md5∑ss
 );

147 
qq
->
auto_ac˚±
 = 1;

148 
	`lo›_push_to_èû
–&
u£r_lo›
, 
u
 );

149  
u
;

150 
	}
}

153 
EXPORT
 
	$webqq_dîe„r
–
u£r
* 
u
 )

155 
u
->
ª„ªn˚
 --;

156 
	}
}

158 
EXPORT
 
	$webqq_logö
–
u£r
* 
u
 )

160  
	`qq˛õ¡_logö
–
u
->
qq
 );

161 
	}
}

163 
EXPORT
 
	$webqq_logout
–
u£r
* 
u
 )

165 
	`DBG
("logouà%u", ((
qq˛õ¡
*)
u
->
qq
)->
numbî
 );

166 
	`qq˛õ¡_logout
–
u
->
qq
 );

168 
	}
}

170 
EXPORT
 
	$webqq_ªcv_msg
–
u£r
* 
u
, * 
buf
, 
size
, 
waô
 )

172 
ªt
;

173 
ªt
 = 
	`qq˛õ¡_gë_evít
–
u
->
qq
, 
buf
, 
size
, 
waô
 );

174  
ªt
;

175 
	}
}

177 
EXPORT
 
	$webqq_£nd_msg
–
u£r
* 
u
, 
uöt
 
to
, * 
buf
, 
qun_msg
 )

179 if–
qun_msg
 ){

180 
qqqun
* 
q
 = 
	`qun_gë_by_ext
–
u
->
qq
, 
to
 );

181 if–
q
 )

182  
	`qun_£nd_mesßge
–
u
->
qq
, 
q
->
numbî
, 
buf
 );

184  
	`buddy_£nd_mesßge
–
u
->
qq
, 
to
, 
buf
 );

187 
	}
}

189 
EXPORT
 
	$webqq_upd©e_li°
–
u£r
* 
u
 )

191 
	`buddy_upd©e_li°
–
u
->
qq
 );

192 
	`group_upd©e_li°
–
u
->
qq
 );

193 
	}
}

195 
EXPORT
 
	$webqq_vîify
–
u£r
* 
u
, 
uöt
 
code
 )

197 
	`qq˛õ¡_vîify
–
u
->
qq
, 
code
 );

198 
	}
}

201 
EXPORT
 
	$webqq_ªmove
–
u£r
* 
u
 )

203 
	`lo›_ªmove
–&
u£r_lo›
, 
u
 );

204 
	`dñëe_func
–(*Ë
u
 );

205 
	}
}

207 
EXPORT
 
	$webqq_°©us
–
u£r
* 
u
, 
°
 )

209 
	`qq˛õ¡_ch™ge_°©us
–
u
->
qq
, 
°
 );

210 
	}
}

213 
	$buddy_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, 
time_t
 
t
, * 
msg
 )

215 
time°r
[24];

216 
tm
 * 
timeöfo
, * 
tmnow
;

217 * 
°r
;

218 
Àn
, 
d1
, 
d2
;

219 
time_t
 
t_now
;

220 
t_now
 = 
	`time
(
NULL
);

221 
tmnow
 = 
	`loˇ…ime
–&
t_now
 );

222 
d1
 = 
tmnow
->
tm_mday
;

223 
timeöfo
 = 
	`loˇ…ime
 ( &
t
 );

224 
d2
 = 
timeöfo
->
tm_mday
;

225 if–
d1
 !
d2
 ){

226 
	`°r·ime
–
time°r
, 24, "%Y-%m-%d %H:%M:%S", 
timeöfo
 );

228 
	`°r·ime
–
time°r
, 24, "%H:%M:%S", 
timeöfo
 );

230 
Àn
 = 
	`°æí
–
msg
 );

231 
	`NEW
–
°r
, 
Àn
+64 );

232 if–
uid
 == 10000 ){

233 
	`•rötf
–
°r
, "brﬂdˇ°^$Sy°em^$%s", 
msg
 );

235 
	`•rötf
–
°r
, "buddymsg^$%u^$%s^$%s", 
uid
, 
time°r
, 
msg
 );

237 
	`qq˛õ¡_put_mesßge
–
qq
, 
°r
 );

238 
	}
}

240 
	$qun_msg_ˇŒback
 ( 
qq˛õ¡
* 
qq
, 
uöt
 
uid
, uöà
öt_uid
,

241 
time_t
 
t
, * 
msg
 )

243 
qqqun
* 
q
;

244 
time°r
[24];

245 
tm
 * 
timeöfo
, * 
tmnow
;

246 * 
°r
;

247 
Àn
, 
d1
, 
d2
;

248 
time_t
 
t_now
;

249 
t_now
 = 
	`time
(
NULL
);

250 
tmnow
 = 
	`loˇ…ime
–&
t_now
 );

251 
d1
 = 
tmnow
->
tm_mday
;

252 
timeöfo
 = 
	`loˇ…ime
 ( &
t
 );

253 
d2
 = 
timeöfo
->
tm_mday
;

254 if–
d1
 !
d2
 ){

255 
	`°r·ime
–
time°r
, 24, "%Y-%m-%d %H:%M:%S", 
timeöfo
 );

257 
	`°r·ime
–
time°r
, 24, "%H:%M:%S", 
timeöfo
 );

259 
q
 = 
	`qun_gë
–
qq
, 
öt_uid
, 1 );

260 if–!
q
 ){

261 
	`DBG
("error: q=NULL");

264 
Àn
 = 
	`°æí
–
msg
 );

265 
	`NEW
–
°r
, 
Àn
+64 );

266 
	`•rötf
–
°r
, "˛u°îmsg^$%u^$%u^$%s^$%s", 
q
->
ext_numbî
, 
uid
, 
time°r
, 
msg
 );

267 
	`qq˛õ¡_put_mesßge
–
qq
, 
°r
 );

268 
	}
}

270 
EXPORT
 
uöt
 
	$webqq_gë_numbî
–
u£r
* 
u
 )

272 
qq˛õ¡
* 
qq
 = (qq˛õ¡*)
u
->qq;

273 
evít
[16];

274 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, qq->
¥o˚ss
 );

275 
	`•rötf
–
evít
, "°©us^$%d", 
qq
->
mode
 );

276 
	`qq˛õ¡_put_evít
–
qq
, 
evít
 );

277 
	`buddy_put_evít
–
qq
 );

278 
	`group_put_evít
–
qq
 );

279 
	`qun_put_evít
–
qq
 );

280 
	`qq˛õ¡_£t_¥o˚ss
–
qq
, qq->
¥o˚ss
 );

281  
qq
->
numbî
;

282 
	}
}

	@webqq.h

1 #i‚de‡
_WEBQQ_H


2 
	#_WEBQQ_H


	)

4 
	~<time.h
>

6 
	su£r
{

7 
time_t
 
	mupd©e_time
;

8 
time_t
 
	m¸óã_time
;

9 * 
	mqq
;

10 * 
	m£ssi⁄_±r
;

11 
	mª„ªn˚
;

12 }
	tu£r
;

15 #ifde‡
__WIN32__


17 
	#STDCALL
 
__°dˇŒ


	)

18 #ifde‡
WEBQQLIB


19 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
Ë
STDCALL


	)

21 
	#EXPORT
 
	`__de˛•ec
(
dŒimp‹t
Ë
STDCALL


	)

25 
	#EXPORT


	)

29 
EXPORT
 
webqq_öô
();

30 
EXPORT
 
webqq_íd
();

31 
EXPORT
 
u£r
* 
webqq_gë_u£r
–* 
£ssi⁄_±r
 );

32 
EXPORT
 
u£r
* 
webqq_¸óã_u£r
–* 
£ssi⁄_±r
, 
uöt
 
numbî
, 
uch¨
* 
md5∑ss
 );

33 
EXPORT
 
webqq_dîe„r
–
u£r
* 
u
 );

34 
EXPORT
 
webqq_logö
–
u£r
* 
u
 );

35 
EXPORT
 
webqq_logout
–
u£r
* 
u
 );

36 
EXPORT
 
webqq_ªcv_msg
–
u£r
* 
u
, * 
buf
, 
size
, 
waô
 );

37 
EXPORT
 
webqq_£nd_msg
–
u£r
* 
u
, 
uöt
 
to
, * 
buf
, 
qun_msg
 );

38 
EXPORT
 
webqq_upd©e_li°
–
u£r
* 
u
 );

39 
EXPORT
 
webqq_vîify
–
u£r
* 
u
, 
uöt
 
code
 );

40 
EXPORT
 
webqq_ªmove
–
u£r
* 
u
 );

41 
EXPORT
 
webqq_°©us
–
u£r
* 
u
, 
°
 );

	@tinyxml/tinystr.h

37 #i‚de‡
TIXML_USE_STL


39 #i‚de‡
TIXML_STRING_INCLUDED


40 
	#TIXML_STRING_INCLUDED


	)

42 
	~<as£π.h
>

43 
	~<°rög.h
>

49 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER >= 1200 )

51 
	#TIXML_EXPLICIT
 
ex∂icô


	)

52 #ñi‡
deföed
(
__GNUC__
) && (__GNUC__ >= 3 )

54 
	#TIXML_EXPLICIT
 
ex∂icô


	)

56 
	#TIXML_EXPLICIT


	)

67 ˛as†
	cTiXmlSåög


69 
	mpublic
 :

71 
size_t
 
	tsize_ty≥
;

74 c⁄° 
size_ty≥
 
	m≈os
;

78 
	$TiXmlSåög
 (Ë: 
	$ªp_
(&
nuŒªp_
)

83 
	$TiXmlSåög
 ( c⁄° 
TiXmlSåög
 & 
c›y
Ë: 
	$ªp_
(0)

85 
	`öô
(
c›y
.
	`Àngth
());

86 
	`mem˝y
(
	`°¨t
(), 
c›y
.
	`d©a
(), 
	`Àngth
());

87 
	}
}

90 
TIXML_EXPLICIT
 
	$TiXmlSåög
 ( c⁄° * 
c›y
Ë: 
	$ªp_
(0)

92 
	`öô
–
°©ic_ˇ°
<
size_ty≥
>–
	`°æí
(
c›y
) ));

93 
	`mem˝y
(
	`°¨t
(), 
c›y
, 
	`Àngth
());

94 
	}
}

97 
TIXML_EXPLICIT
 
	$TiXmlSåög
 ( c⁄° * 
°r
, 
size_ty≥
 
Àn
Ë: 
	$ªp_
(0)

99 
	`öô
(
Àn
);

100 
	`mem˝y
(
	`°¨t
(), 
°r
, 
Àn
);

101 
	}
}

104 ~
	$TiXmlSåög
 ()

106 
	`quô
();

107 
	}
}

110 
	gTiXmlSåög
& 
	g›î©‹
 = (c⁄° * 
c›y
)

112  
assign
–
c›y
, (
size_ty≥
)
°æí
(copy));

116 
	gTiXmlSåög
& 
	g›î©‹
 = (c⁄° 
TiXmlSåög
 & 
c›y
)

118  
assign
(
c›y
.
°¨t
(), c›y.
Àngth
());

123 
	gTiXmlSåög
& 
	g›î©‹
 +(c⁄° * 
suffix
)

125  
≠≥nd
(
suffix
, 
°©ic_ˇ°
<
size_ty≥
>–
°æí
(suffix) ));

129 
	gTiXmlSåög
& 
	g›î©‹
 +(
sögÀ
)

131  
≠≥nd
(&
sögÀ
, 1);

135 
	gTiXmlSåög
& 
	g›î©‹
 +(c⁄° 
TiXmlSåög
 & 
suffix
)

137  
≠≥nd
(
suffix
.
d©a
(), suffix.
Àngth
());

142 c⁄° * 
	$c_°r
 (Ëc⁄° {  
ªp_
->
°r
; 
	}
}

145 c⁄° * 
	$d©a
 (Ëc⁄° {  
ªp_
->
°r
; 
	}
}

148 
size_ty≥
 
	$Àngth
 (Ëc⁄° {  
ªp_
->
size
; 
	}
}

151 
size_ty≥
 
	$size
 (Ëc⁄° {  
ªp_
->
size
; 
	}
}

154 
boﬁ
 
	$em±y
 (Ëc⁄° {  
ªp_
->
size
 =0; 
	}
}

157 
size_ty≥
 
	$ˇ∑côy
 (Ëc⁄° {  
ªp_
->
ˇ∑côy
; 
	}
}

161 c⁄° & 
	$©
 (
size_ty≥
 
ödex
) const

163 
	`as£π
–
ödex
 < 
	`Àngth
() );

164  
ªp_
->
°r
[ 
ödex
 ];

165 
	}
}

168 & 
	g›î©‹
 [] (
size_ty≥
 
	gödex
) const

170 
as£π
–
ödex
 < 
Àngth
() );

171  
	gªp_
->
	g°r
[ 
ödex
 ];

175 
size_ty≥
 
	$föd
 (
lookup
) const

177  
	`föd
(
lookup
, 0);

178 
	}
}

181 
size_ty≥
 
	$föd
 (
toföd
, 
size_ty≥
 
off£t
) const

183 i‡(
off£t
 >
	`Àngth
()Ë 
≈os
;

185 c⁄° * 
p
 = 
	`c_°r
(Ë+ 
off£t
; *p != '\0'; ++p)

187 i‡(*
p
 =
toföd
Ë 
°©ic_ˇ°
< 
size_ty≥
 >–∞- 
	`c_°r
() );

189  
≈os
;

190 
	}
}

192 
	$˛ór
 ()

198 
	`quô
();

199 
	`öô
(0,0);

200 
	}
}

205 
ª£rve
 (
size_ty≥
 
ˇp
);

207 
	gTiXmlSåög
& 
assign
 (c⁄° * 
°r
, 
size_ty≥
 
Àn
);

209 
	gTiXmlSåög
& 
≠≥nd
 (c⁄° * 
°r
, 
size_ty≥
 
Àn
);

211 
	$sw≠
 (
TiXmlSåög
& 
Ÿhî
)

213 
Rï
* 
r
 = 
ªp_
;

214 
ªp_
 = 
Ÿhî
.rep_;

215 
Ÿhî
.
ªp_
 = 
r
;

216 
	}
}

218 
	g¥iv©e
:

220 
	$öô
(
size_ty≥
 
sz
Ë{ 
	`öô
(sz, sz); 
	}
}

221 
	$£t_size
(
size_ty≥
 
sz
Ë{ 
ªp_
->
°r
[Ñï_->
size
 = sz ] = '\0'; 
	}
}

222 * 
	$°¨t
(Ëc⁄° {  
ªp_
->
°r
; 
	}
}

223 * 
	$föish
(Ëc⁄° {  
ªp_
->
°r
 +Ñï_->
size
; 
	}
}

225 
	sRï


227 
size_ty≥
 
	gsize
, 
	gˇ∑côy
;

228 
	g°r
[1];

231 
	$öô
(
size_ty≥
 
sz
, size_ty≥ 
ˇp
)

233 i‡(
ˇp
)

240 c⁄° 
size_ty≥
 
byãsNìded
 = (
Rï
Ë+ 
ˇp
;

241 c⁄° 
size_ty≥
 
ötsNìded
 = ( 
byãsNìded
 + () - 1 ) / ( );

242 
ªp_
 = 
ªöãΩªt_ˇ°
<
Rï
*>–
√w
 [ 
ötsNìded
 ] );

244 
ªp_
->
°r
[Ñï_->
size
 = 
sz
 ] = '\0';

245 
ªp_
->
ˇ∑côy
 = 
ˇp
;

249 
ªp_
 = &
nuŒªp_
;

251 
	}
}

253 
	$quô
()

255 i‡(
ªp_
 !&
nuŒªp_
)

259 
dñëe
 [] ( 
ªöãΩªt_ˇ°
<*>–
ªp_
 ) );

261 
	}
}

263 
Rï
 * 
	gªp_
;

264 
Rï
 
	gnuŒªp_
;

269 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
TiXmlSåög
 & 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
)

271  ( 
	ga
.
Àngth
(Ë=
b
.length() )

272 && ( 
°rcmp
(
a
.
c_°r
(), 
b
.c_str()) == 0 );

274 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gTiXmlSåög
 & 
	ga
, c⁄° TiXmlSåög & 
	gb
)

276  
°rcmp
(
a
.
c_°r
(), 
b
.c_str()) < 0;

279 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
TiXmlSåög
 & 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
Ë{  !(
	ga
 =
b
); }

280 
ölöe
 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gTiXmlSåög
 & 
	ga
, c⁄° TiXmlSåög & 
	gb
) {  b <á; }

281 
ölöe
 
boﬁ
 
	g›î©‹
 <(c⁄° 
TiXmlSåög
 & 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
Ë{  !(b < 
	ga
); }

282 
ölöe
 
boﬁ
 
	g›î©‹
 >(c⁄° 
TiXmlSåög
 & 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
Ë{  !(
	ga
 < b); }

284 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
TiXmlSåög
 & 
a
, c⁄° * 
	gb
Ë{  
°rcmp
◊.
c_°r
(), 
b
) == 0; }

285 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° * 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
) {  b ==á; }

286 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
TiXmlSåög
 & 
a
, c⁄° * 
	gb
Ë{  !(
	ga
 =
b
); }

287 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° * 
a
, c⁄° 
	gTiXmlSåög
 & 
	gb
) {  !(b ==á); }

289 
TiXmlSåög
 
	g›î©‹
 + (c⁄° 
	gTiXmlSåög
 & 
	ga
, c⁄° TiXmlSåög & 
	gb
);

290 
TiXmlSåög
 
	g›î©‹
 + (c⁄° 
	gTiXmlSåög
 & 
	ga
, c⁄° * 
	gb
);

291 
TiXmlSåög
 
	g›î©‹
 + (c⁄° * 
	ga
, c⁄° 
	gTiXmlSåög
 & 
	gb
);

298 ˛as†
	cTiXmlOutSåóm
 : 
public
 
TiXmlSåög


300 
public
 :

303 
TiXmlOutSåóm
 & 
›î©‹
 << (c⁄° 
TiXmlSåög
 & 
ö
)

305 *
this
 +
ö
;

306  *
	mthis
;

310 
	gTiXmlOutSåóm
 & 
	g›î©‹
 << (c⁄° * 
	gö
)

312 *
	gthis
 +
ö
;

313  *
	gthis
;

	@tinyxml/tinyxml.h

26 #i‚de‡
TINYXML_INCLUDED


27 
	#TINYXML_INCLUDED


	)

29 #ifde‡
_MSC_VER


30 #¥agm®
w¨nög
–
push
 )

31 #¥agm®
w¨nög
–
dißbÀ
 : 4530 )

32 #¥agm®
w¨nög
–
dißbÀ
 : 4786 )

35 
	~<˘y≥.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<as£π.h
>

42 #i‡
deföed
–
_DEBUG
 ) && !deföed–
DEBUG
 )

43 
	#DEBUG


	)

46 #ifde‡
TIXML_USE_STL


47 
	~<°rög
>

48 
	~<io°ªam
>

49 
	~<s°ªam
>

50 
	#TIXML_STRING
 
°d
::
°rög


	)

52 
	~"töy°r.h
"

53 
	#TIXML_STRING
 
TiXmlSåög


	)

60 
	#TIXML_SAFE


	)

62 #ifde‡
TIXML_SAFE


63 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER >= 1400 )

65 
	#TIXML_SNPRINTF
 
_¢¥ötf_s


	)

66 
	#TIXML_SNSCANF
 
_¢sˇnf_s


	)

67 
	#TIXML_SSCANF
 
ssˇnf_s


	)

68 #ñi‡
deföed
(
_MSC_VER
) && (_MSC_VER >= 1200 )

71 
	#TIXML_SNPRINTF
 
_¢¥ötf


	)

72 
	#TIXML_SNSCANF
 
_¢sˇnf


	)

73 
	#TIXML_SSCANF
 
ssˇnf


	)

74 #ñi‡
deföed
(
__GNUC__
) && (__GNUC__ >= 3 )

77 
	#TIXML_SNPRINTF
 
¢¥ötf


	)

78 
	#TIXML_SNSCANF
 
¢sˇnf


	)

79 
	#TIXML_SSCANF
 
ssˇnf


	)

81 
	#TIXML_SSCANF
 
ssˇnf


	)

85 
˛ass
 
	gTiXmlDocumít
;

86 
˛ass
 
	gTiXmlEÀmít
;

87 
˛ass
 
	gTiXmlCommít
;

88 
˛ass
 
	gTiXmlUnknown
;

89 
˛ass
 
	gTiXmlAâribuã
;

90 
˛ass
 
	gTiXmlText
;

91 
˛ass
 
	gTiXmlDe˛¨©i⁄
;

92 
˛ass
 
	gTiXmlP¨sögD©a
;

94 c⁄° 
	gTIXML_MAJOR_VERSION
 = 2;

95 c⁄° 
	gTIXML_MINOR_VERSION
 = 5;

96 c⁄° 
	gTIXML_PATCH_VERSION
 = 3;

101 
	sTiXmlCurs‹


103 
TiXmlCurs‹
(Ë{ 
CÀ¨
(); }

104 
CÀ¨
(Ë{ 
	mrow
 = 
cﬁ
 = -1; }

106 
	mrow
;

107 
	mcﬁ
;

129 ˛as†
	cTiXmlVisô‹


131 
	mpublic
:

132 
vútuÆ
 ~
	$TiXmlVisô‹
() {}

135 
vútuÆ
 
boﬁ
 
	$VisôE¡î
–c⁄° 
TiXmlDocumít
& ) {  
åue
; 
	}
}

137 
vútuÆ
 
boﬁ
 
	$VisôExô
–c⁄° 
TiXmlDocumít
& ) {  
åue
; 
	}
}

140 
vútuÆ
 
boﬁ
 
	$VisôE¡î
–c⁄° 
TiXmlEÀmít
& , c⁄° 
TiXmlAâribuã
* ) {  
åue
; 
	}
}

142 
vútuÆ
 
boﬁ
 
	$VisôExô
–c⁄° 
TiXmlEÀmít
& ) {  
åue
; 
	}
}

145 
vútuÆ
 
boﬁ
 
	$Visô
–c⁄° 
TiXmlDe˛¨©i⁄
& ) {  
åue
; 
	}
}

147 
vútuÆ
 
boﬁ
 
	$Visô
–c⁄° 
TiXmlText
& ) {  
åue
; 
	}
}

149 
vútuÆ
 
boﬁ
 
	$Visô
–c⁄° 
TiXmlCommít
& ) {  
åue
; 
	}
}

151 
vútuÆ
 
boﬁ
 
	$Visô
–c⁄° 
TiXmlUnknown
& ) {  
åue
; 
	}
}

157 
	mTIXML_SUCCESS
,

158 
	mTIXML_NO_ATTRIBUTE
,

159 
	mTIXML_WRONG_TYPE


164 
	eTiXmlEncodög


166 
	mTIXML_ENCODING_UNKNOWN
,

167 
	mTIXML_ENCODING_UTF8
,

168 
	mTIXML_ENCODING_LEGACY


171 c⁄° 
TiXmlEncodög
 
	gTIXML_DEFAULT_ENCODING
 = 
TIXML_ENCODING_UNKNOWN
;

195 ˛as†
	cTiXmlBa£


197 
‰õnd
 
˛ass
 
	mTiXmlNode
;

198 
‰õnd
 
˛ass
 
	mTiXmlEÀmít
;

199 
‰õnd
 
˛ass
 
	mTiXmlDocumít
;

201 
	mpublic
:

202 
	$TiXmlBa£
(Ë: 
	$u£rD©a
(0) {}

203 
vútuÆ
 ~
	$TiXmlBa£
(Ë{
	}
}

214 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const = 0;

222 
	$SëC⁄dí£WhôeS∑˚
–
boﬁ
 
c⁄dí£
 ) { 
c⁄dí£WhôeS∑˚
 = c⁄dí£; 
	}
}

225 
boﬁ
 
	$IsWhôeS∑˚C⁄dí£d
(Ë{  
c⁄dí£WhôeS∑˚
; 
	}
}

245 
	$Row
(Ëc⁄° {  
loˇti⁄
.
row
 + 1; 
	}
}

246 
	$Cﬁumn
(Ëc⁄° {  
loˇti⁄
.
cﬁ
 + 1; 
	}
}

248 
	$SëU£rD©a
–* 
u£r
 ) { 
u£rD©a
 = u£r; 
	}
}

249 * 
	$GëU£rD©a
(Ë{  
u£rD©a
; 
	}
}

250 c⁄° * 
	$GëU£rD©a
(Ëc⁄° {  
u£rD©a
; 
	}
}

254 c⁄° 
	gutf8ByãTabÀ
[256];

256 
vútuÆ
 c⁄° * 
P¨£
–c⁄° * 
p
,

257 
TiXmlP¨sögD©a
* 
d©a
,

258 
TiXmlEncodög
 
ícodög
 ) = 0;

263 
EncodeSåög
–c⁄° 
TIXML_STRING
& 
°r
, TIXML_STRING* 
out
 );

267 
	gTIXML_NO_ERROR
 = 0,

268 
	gTIXML_ERROR
,

269 
	gTIXML_ERROR_OPENING_FILE
,

270 
	gTIXML_ERROR_OUT_OF_MEMORY
,

271 
	gTIXML_ERROR_PARSING_ELEMENT
,

272 
	gTIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME
,

273 
	gTIXML_ERROR_READING_ELEMENT_VALUE
,

274 
	gTIXML_ERROR_READING_ATTRIBUTES
,

275 
	gTIXML_ERROR_PARSING_EMPTY
,

276 
	gTIXML_ERROR_READING_END_TAG
,

277 
	gTIXML_ERROR_PARSING_UNKNOWN
,

278 
	gTIXML_ERROR_PARSING_COMMENT
,

279 
	gTIXML_ERROR_PARSING_DECLARATION
,

280 
	gTIXML_ERROR_DOCUMENT_EMPTY
,

281 
	gTIXML_ERROR_EMBEDDED_NULL
,

282 
	gTIXML_ERROR_PARSING_CDATA
,

283 
	gTIXML_ERROR_DOCUMENT_TOP_ONLY
,

285 
	gTIXML_ERROR_STRING_COUNT


288 
	g¥Ÿe˘ed
:

290 c⁄° * 
SkùWhôeS∑˚
–c⁄° *, 
TiXmlEncodög
 
ícodög
 );

291 
ölöe
 
boﬁ
 
	$IsWhôeS∑˚
–
c
 )

293  ( 
	`is•a˚
–(Ë
c
 ) || c == '\n' || c == '\r' );

294 
	}
}

295 
ölöe
 
boﬁ
 
	$IsWhôeS∑˚
–
c
 )

297 i‡–
c
 < 256 )

298  
	`IsWhôeS∑˚
–(Ë
c
 );

299  
Ál£
;

300 
	}
}

302 #ifde‡
TIXML_USE_STL


303 
boﬁ
 
SåómWhôeS∑˚
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

304 
boﬁ
 
SåómTo
–
°d
::
i°ªam
 * 
ö
, 
ch¨a˘î
, 
TIXML_STRING
 * 
èg
 );

311 c⁄° * 
RódName
–c⁄° * 
p
, 
TIXML_STRING
* 
«me
, 
TiXmlEncodög
 
ícodög
 );

316 c⁄° * 
RódText
–c⁄° * 
ö
,

317 
TIXML_STRING
* 
ãxt
,

318 
boﬁ
 
ign‹eWhôeS∑˚
,

319 c⁄° * 
ídTag
,

320 
boﬁ
 
ign‹eCa£
,

321 
TiXmlEncodög
 
ícodög
 );

324 c⁄° * 
GëE¡ôy
–c⁄° * 
ö
, * 
vÆue
, * 
Àngth
, 
TiXmlEncodög
 
ícodög
 );

328 
ölöe
 c⁄° * 
	$GëCh¨
–c⁄° * 
p
, * 
_vÆue
, * 
Àngth
, 
TiXmlEncodög
 
ícodög
 )

330 
	`as£π
–
p
 );

331 i‡–
ícodög
 =
TIXML_ENCODING_UTF8
 )

333 *
Àngth
 = 
utf8ByãTabÀ
[ *((c⁄° *)
p
) ];

334 
	`as£π
–*
Àngth
 >= 0 && *length < 5 );

338 *
Àngth
 = 1;

341 i‡–*
Àngth
 == 1 )

343 i‡–*
p
 == '&' )

344  
	`GëE¡ôy
–
p
, 
_vÆue
, 
Àngth
, 
ícodög
 );

345 *
_vÆue
 = *
p
;

346  
p
+1;

348 i‡–*
Àngth
 )

352  
i
=0; 
p
[i] && i<*
Àngth
; ++i ) {

353 
_vÆue
[
i
] = 
p
[i];

355  
p
 + (*
Àngth
);

362 
	}
}

367 
boﬁ
 
SåögEquÆ
–c⁄° * 
p
,

368 c⁄° * 
ídTag
,

369 
boﬁ
 
ign‹eCa£
,

370 
TiXmlEncodög
 
ícodög
 );

372 c⁄° * 
	gîr‹Såög
[ 
TIXML_ERROR_STRING_COUNT
 ];

374 
TiXmlCurs‹
 
	gloˇti⁄
;

377 * 
	gu£rD©a
;

381 
IsAÕha
–
™yByã
, 
TiXmlEncodög
 
ícodög
 );

382 
IsAÕhaNum
–
™yByã
, 
TiXmlEncodög
 
ícodög
 );

383 
ölöe
 
	$ToLowî
–
v
, 
TiXmlEncodög
 
ícodög
 )

385 i‡–
ícodög
 =
TIXML_ENCODING_UTF8
 )

387 i‡–
v
 < 128 )  
	`tﬁowî
( v );

388  
v
;

392  
	`tﬁowî
–
v
 );

394 
	}
}

395 
C⁄vîtUTF32ToUTF8
–
öput
, * 
ouçut
, * 
Àngth
 );

397 
	g¥iv©e
:

398 
TiXmlBa£
( const TiXmlBase& );

399 
	g›î©‹
=–c⁄° 
TiXmlBa£
& 
ba£
 );

401 
	sE¡ôy


403 c⁄° * 
	g°r
;

404 
	g°rLígth
;

405 
	gchr
;

409 
	gNUM_ENTITY
 = 5,

410 
	gMAX_ENTITY_LENGTH
 = 6

413 
E¡ôy
 
	gítôy
[ 
NUM_ENTITY
 ];

414 
boﬁ
 
	gc⁄dí£WhôeS∑˚
;

424 ˛as†
	cTiXmlNode
 : 
public
 
TiXmlBa£


426 
‰õnd
 
˛ass
 
TiXmlDocumít
;

427 
‰õnd
 
˛ass
 
	mTiXmlEÀmít
;

429 
	mpublic
:

430 #ifde‡
TIXML_USE_STL


435 
‰õnd
 
°d
::
i°ªam
& 
›î©‹
 >> (°d::i°ªam& 
ö
, 
	mTiXmlNode
& 
	mba£
);

453 
‰õnd
 
	m°d
::
o°ªam
& 
›î©‹
<< (
°d
::o°ªam& 
out
, c⁄° 
	mTiXmlNode
& 
	mba£
);

456 
‰õnd
 
	m°d
::
°rög
& 
›î©‹
<< (
°d
::°rög& 
out
, c⁄° 
	mTiXmlNode
& 
	mba£
 );

463 
	eNodeTy≥


465 
	mDOCUMENT
,

466 
	mELEMENT
,

467 
	mCOMMENT
,

468 
	mUNKNOWN
,

469 
	mTEXT
,

470 
	mDECLARATION
,

471 
	mTYPECOUNT


474 
	gvútuÆ
 ~
TiXmlNode
();

488 c⁄° *
	$VÆue
(Ëc⁄° {  
vÆue
.
	`c_°r
 (); 
	}
}

490 #ifde‡
TIXML_USE_STL


495 c⁄° 
	g°d
::
°rög
& 
	$VÆueSå
(Ëc⁄° {  
vÆue
; 
	}
}

498 c⁄° 
	gTIXML_STRING
& 
	$VÆueTSå
(Ëc⁄° {  
vÆue
; 
	}
}

509 
	$SëVÆue
(c⁄° * 
_vÆue
Ë{ 
vÆue
 = _vÆue;
	}
}

511 #ifde‡
TIXML_USE_STL


513 
SëVÆue
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) { 
vÆue
 = _value; }

517 
CÀ¨
();

520 
TiXmlNode
* 
	$P¨ít
(Ë{  
∑ª¡
; 
	}
}

521 c⁄° 
TiXmlNode
* 
	$P¨ít
(Ëc⁄° {  
∑ª¡
; 
	}
}

523 c⁄° 
TiXmlNode
* 
	$Fú°Chûd
(Ëc⁄° {  
fú°Chûd
; 
	}
}

524 
TiXmlNode
* 
	$Fú°Chûd
(Ë{  
fú°Chûd
; 
	}
}

525 c⁄° 
TiXmlNode
* 
	$Fú°Chûd
–c⁄° * 
vÆue
 ) const;

527 
TiXmlNode
* 
	$Fú°Chûd
–c⁄° * 
_vÆue
 ) {

530  
c⁄°_ˇ°
< 
TiXmlNode
* > ((c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`Fú°Chûd
–
_vÆue
 ));

531 
	}
}

532 c⁄° 
TiXmlNode
* 
	$La°Chûd
(Ëc⁄° {  
œ°Chûd
; 
	}
}

533 
TiXmlNode
* 
	$La°Chûd
(Ë{  
œ°Chûd
; 
	}
}

535 c⁄° 
TiXmlNode
* 
	$La°Chûd
–c⁄° * 
vÆue
 ) const;

536 
TiXmlNode
* 
	$La°Chûd
–c⁄° * 
_vÆue
 ) {

537  
c⁄°_ˇ°
< 
TiXmlNode
* > ((c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`La°Chûd
–
_vÆue
 ));

538 
	}
}

540 #ifde‡
TIXML_USE_STL


541 c⁄° 
TiXmlNode
* 
Fú°Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  Fú°Chûd (_vÆue.
c_°r
 ()); }

542 
TiXmlNode
* 
Fú°Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) {  Fú°Chûd (_vÆue.
c_°r
 ()); }

543 c⁄° 
TiXmlNode
* 
La°Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  La°Chûd (_vÆue.
c_°r
 ()); }

544 
TiXmlNode
* 
La°Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) {  La°Chûd (_vÆue.
c_°r
 ()); }

563 c⁄° 
TiXmlNode
* 
	$IãøãChûdªn
–c⁄° 
TiXmlNode
* 
¥evious
 ) const;

564 
TiXmlNode
* 
	$IãøãChûdªn
–c⁄° 
TiXmlNode
* 
¥evious
 ) {

565  
c⁄°_ˇ°
< 
TiXmlNode
* >–(c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`IãøãChûdªn
–
¥evious
 ) );

566 
	}
}

569 c⁄° 
TiXmlNode
* 
	$IãøãChûdªn
–c⁄° * 
vÆue
, c⁄° 
TiXmlNode
* 
¥evious
 ) const;

570 
TiXmlNode
* 
	$IãøãChûdªn
–c⁄° * 
_vÆue
, c⁄° 
TiXmlNode
* 
¥evious
 ) {

571  
c⁄°_ˇ°
< 
TiXmlNode
* >–(c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`IãøãChûdªn
–
_vÆue
, 
¥evious
 ) );

572 
	}
}

574 #ifde‡
TIXML_USE_STL


575 c⁄° 
TiXmlNode
* 
IãøãChûdªn
–c⁄° 
°d
::
°rög
& 
_vÆue
, c⁄° TiXmlNode* 
¥evious
 ) c⁄° {  IãøãChûdª¿(_vÆue.
c_°r
 (),Örevious); }

576 
TiXmlNode
* 
IãøãChûdªn
–c⁄° 
°d
::
°rög
& 
_vÆue
, c⁄° TiXmlNode* 
¥evious
 ) {  IãøãChûdª¿(_vÆue.
c_°r
 (),Örevious); }

582 
TiXmlNode
* 
In£πEndChûd
–c⁄° TiXmlNode& 
addThis
 );

594 
TiXmlNode
* 
LökEndChûd
–TiXmlNode* 
addThis
 );

599 
TiXmlNode
* 
In£πBef‹eChûd
–TiXmlNode* 
bef‹eThis
, c⁄° TiXmlNode& 
addThis
 );

604 
TiXmlNode
* 
In£πA·îChûd
–TiXmlNode* 
a·îThis
, c⁄° TiXmlNode& 
addThis
 );

609 
TiXmlNode
* 
Rïœ˚Chûd
–TiXmlNode* 
ª∂a˚This
, c⁄° TiXmlNode& 
wôhThis
 );

612 
boﬁ
 
RemoveChûd
–
TiXmlNode
* 
ªmoveThis
 );

615 c⁄° 
TiXmlNode
* 
	$PªviousSiblög
(Ëc⁄° {  
¥ev
; 
	}
}

616 
TiXmlNode
* 
	$PªviousSiblög
(Ë{  
¥ev
; 
	}
}

619 c⁄° 
TiXmlNode
* 
	$PªviousSiblög
( const * ) const;

620 
TiXmlNode
* 
	$PªviousSiblög
–c⁄° *
_¥ev
 ) {

621  
c⁄°_ˇ°
< 
TiXmlNode
* >–(c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`PªviousSiblög
–
_¥ev
 ) );

622 
	}
}

624 #ifde‡
TIXML_USE_STL


625 c⁄° 
TiXmlNode
* 
PªviousSiblög
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  PªviousSiblög (_vÆue.
c_°r
 ()); }

626 
TiXmlNode
* 
PªviousSiblög
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) {  PªviousSiblög (_vÆue.
c_°r
 ()); }

627 c⁄° 
TiXmlNode
* 
NextSiblög
–c⁄° 
°d
::
°rög
& 
_vÆue
Ëc⁄° {  NextSiblög (_vÆue.
c_°r
 ()); }

628 
TiXmlNode
* 
NextSiblög
–c⁄° 
°d
::
°rög
& 
_vÆue
Ë{  NextSiblög (_vÆue.
c_°r
 ()); }

632 c⁄° 
TiXmlNode
* 
	$NextSiblög
(Ëc⁄° {  
√xt
; 
	}
}

633 
TiXmlNode
* 
	$NextSiblög
(Ë{  
√xt
; 
	}
}

636 c⁄° 
TiXmlNode
* 
	$NextSiblög
( const * ) const;

637 
TiXmlNode
* 
	$NextSiblög
–c⁄° * 
_√xt
 ) {

638  
c⁄°_ˇ°
< 
TiXmlNode
* >–(c⁄°_ˇ°< c⁄° TiXmlNode* >(
this
))->
	`NextSiblög
–
_√xt
 ) );

639 
	}
}

645 c⁄° 
TiXmlEÀmít
* 
	$NextSiblögEÀmít
() const;

646 
TiXmlEÀmít
* 
	$NextSiblögEÀmít
() {

647  
c⁄°_ˇ°
< 
TiXmlEÀmít
* >–(c⁄°_ˇ°< c⁄° 
TiXmlNode
* >(
this
))->
	`NextSiblögEÀmít
() );

648 
	}
}

654 c⁄° 
TiXmlEÀmít
* 
	$NextSiblögEÀmít
( const * ) const;

655 
TiXmlEÀmít
* 
	$NextSiblögEÀmít
–c⁄° *
_√xt
 ) {

656  
c⁄°_ˇ°
< 
TiXmlEÀmít
* >–(c⁄°_ˇ°< c⁄° 
TiXmlNode
* >(
this
))->
	`NextSiblögEÀmít
–
_√xt
 ) );

657 
	}
}

659 #ifde‡
TIXML_USE_STL


660 c⁄° 
TiXmlEÀmít
* 
NextSiblögEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
Ëc⁄° {  NextSiblögEÀmíà(_vÆue.
c_°r
 ()); }

661 
TiXmlEÀmít
* 
NextSiblögEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
Ë{  NextSiblögEÀmíà(_vÆue.
c_°r
 ()); }

665 c⁄° 
TiXmlEÀmít
* 
	$Fú°ChûdEÀmít
() const;

666 
TiXmlEÀmít
* 
	$Fú°ChûdEÀmít
() {

667  
c⁄°_ˇ°
< 
TiXmlEÀmít
* >–(c⁄°_ˇ°< c⁄° 
TiXmlNode
* >(
this
))->
	`Fú°ChûdEÀmít
() );

668 
	}
}

671 c⁄° 
TiXmlEÀmít
* 
	$Fú°ChûdEÀmít
–c⁄° * 
_vÆue
 ) const;

672 
TiXmlEÀmít
* 
	$Fú°ChûdEÀmít
–c⁄° * 
_vÆue
 ) {

673  
c⁄°_ˇ°
< 
TiXmlEÀmít
* >–(c⁄°_ˇ°< c⁄° 
TiXmlNode
* >(
this
))->
	`Fú°ChûdEÀmít
–
_vÆue
 ) );

674 
	}
}

676 #ifde‡
TIXML_USE_STL


677 c⁄° 
TiXmlEÀmít
* 
Fú°ChûdEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  Fú°ChûdEÀmíà(_vÆue.
c_°r
 ()); }

678 
TiXmlEÀmít
* 
Fú°ChûdEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) {  Fú°ChûdEÀmíà(_vÆue.
c_°r
 ()); }

685 
	$Ty≥
(Ëc⁄° {  
ty≥
; 
	}
}

690 c⁄° 
TiXmlDocumít
* 
	$GëDocumít
() const;

691 
TiXmlDocumít
* 
	$GëDocumít
() {

692  
c⁄°_ˇ°
< 
TiXmlDocumít
* >–(c⁄°_ˇ°< c⁄° 
TiXmlNode
* >(
this
))->
	`GëDocumít
() );

693 
	}
}

696 
boﬁ
 
	$NoChûdªn
(Ëc⁄° {  !
fú°Chûd
; 
	}
}

698 
vútuÆ
 c⁄° 
TiXmlDocumít
* 
	$ToDocumít
(Ëc⁄° {  0; 
	}
}

699 
vútuÆ
 c⁄° 
TiXmlEÀmít
* 
	$ToEÀmít
(Ëc⁄° {  0; 
	}
}

700 
vútuÆ
 c⁄° 
TiXmlCommít
* 
	$ToCommít
(Ëc⁄° {  0; 
	}
}

701 
vútuÆ
 c⁄° 
TiXmlUnknown
* 
	$ToUnknown
(Ëc⁄° {  0; 
	}
}

702 
vútuÆ
 c⁄° 
TiXmlText
* 
	$ToText
(Ëc⁄° {  0; 
	}
}

703 
vútuÆ
 c⁄° 
TiXmlDe˛¨©i⁄
* 
	$ToDe˛¨©i⁄
(Ëc⁄° {  0; 
	}
}

705 
vútuÆ
 
TiXmlDocumít
* 
	$ToDocumít
(Ë{  0; 
	}
}

706 
vútuÆ
 
TiXmlEÀmít
* 
	$ToEÀmít
(Ë{  0; 
	}
}

707 
vútuÆ
 
TiXmlCommít
* 
	$ToCommít
(Ë{  0; 
	}
}

708 
vútuÆ
 
TiXmlUnknown
* 
	$ToUnknown
(Ë{  0; 
	}
}

709 
vútuÆ
 
TiXmlText
* 
	$ToText
(Ë{  0; 
	}
}

710 
vútuÆ
 
TiXmlDe˛¨©i⁄
* 
	$ToDe˛¨©i⁄
(Ë{  0; 
	}
}

715 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const = 0;

739 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
visô‹
 ) const = 0;

741 
¥Ÿe˘ed
:

742 
	`TiXmlNode
–
NodeTy≥
 
_ty≥
 );

746 
	$C›yTo
–
TiXmlNode
* 
èrgë
 ) const;

748 #ifde‡
TIXML_USE_STL


750 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
* 
ö
, 
TIXML_STRING
* 
èg
 ) = 0;

754 
TiXmlNode
* 
	`Idítify
–c⁄° * 
°¨t
, 
TiXmlEncodög
 
ícodög
 );

756 
TiXmlNode
* 
∑ª¡
;

757 
NodeTy≥
 
ty≥
;

759 
TiXmlNode
* 
fú°Chûd
;

760 
TiXmlNode
* 
œ°Chûd
;

762 
TIXML_STRING
 
vÆue
;

764 
TiXmlNode
* 
¥ev
;

765 
TiXmlNode
* 
√xt
;

767 
¥iv©e
:

768 
	`TiXmlNode
–c⁄° 
TiXmlNode
& );

769 
›î©‹
=–c⁄° 
TiXmlNode
& 
ba£
 );

770 
	}
};

780 ˛as†
	cTiXmlAâribuã
 : 
public
 
TiXmlBa£


782 
‰õnd
 
˛ass
 
TiXmlAâribuãSë
;

784 
	mpublic
:

786 
	$TiXmlAâribuã
(Ë: 
	$TiXmlBa£
()

788 
documít
 = 0;

789 
¥ev
 = 
√xt
 = 0;

792 #ifde‡
TIXML_USE_STL


794 
	`TiXmlAâribuã
–c⁄° 
°d
::
°rög
& 
_«me
, c⁄° std::°rög& 
_vÆue
 )

796 
«me
 = 
_«me
;

797 
vÆue
 = 
_vÆue
;

798 
documít
 = 0;

799 
¥ev
 = 
√xt
 = 0;

800 
	}
}

804 
	$TiXmlAâribuã
–c⁄° * 
_«me
, c⁄° * 
_vÆue
 )

806 
«me
 = 
_«me
;

807 
vÆue
 = 
_vÆue
;

808 
documít
 = 0;

809 
¥ev
 = 
√xt
 = 0;

810 
	}
}

812 c⁄° * 
	$Name
(Ëc⁄° {  
«me
.
	`c_°r
(); 
	}
}

813 c⁄° * 
	$VÆue
(Ëc⁄° {  
vÆue
.
	`c_°r
(); 
	}
}

814 #ifde‡
TIXML_USE_STL


815 c⁄° 
	g°d
::
°rög
& 
	$VÆueSå
(Ëc⁄° {  
vÆue
; 
	}
}

817 
	$I¡VÆue
() const;

818 
	$DoubÀVÆue
() const;

821 c⁄° 
TIXML_STRING
& 
	$NameTSå
(Ëc⁄° {  
«me
; 
	}
}

832 
	$QuîyI¡VÆue
–* 
_vÆue
 ) const;

834 
	$QuîyDoubÀVÆue
–* 
_vÆue
 ) const;

836 
	$SëName
–c⁄° * 
_«me
 ) { 
«me
 = _«me; 
	}
}

837 
	$SëVÆue
–c⁄° * 
_vÆue
 ) { 
vÆue
 = _vÆue; 
	}
}

839 
SëI¡VÆue
–
_vÆue
 );

840 
SëDoubÀVÆue
–
_vÆue
 );

842 #ifde‡
TIXML_USE_STL


844 
SëName
–c⁄° 
°d
::
°rög
& 
_«me
 ) { 
«me
 = _name; }

846 
SëVÆue
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) { 
vÆue
 = _value; }

850 c⁄° 
TiXmlAâribuã
* 
	$Next
() const;

851 
TiXmlAâribuã
* 
	$Next
() {

852  
c⁄°_ˇ°
< 
TiXmlAâribuã
* >–(c⁄°_ˇ°< c⁄° TiXmlAâribuã* >(
this
))->
	`Next
() );

853 
	}
}

856 c⁄° 
TiXmlAâribuã
* 
	$Pªvious
() const;

857 
TiXmlAâribuã
* 
	$Pªvious
() {

858  
c⁄°_ˇ°
< 
TiXmlAâribuã
* >–(c⁄°_ˇ°< c⁄° TiXmlAâribuã* >(
this
))->
	`Pªvious
() );

859 
	}
}

861 
boﬁ
 
	g›î©‹
==–c⁄° 
TiXmlAâribuã
& 
rhs
 ) c⁄° { Ñhs.
«me
 ==Çame; }

862 
boﬁ
 
	g›î©‹
<–c⁄° 
	gTiXmlAâribuã
& 
	grhs
 ) c⁄° {  
	g«me
 <Ñhs.name; }

863 
boﬁ
 
	g›î©‹
>–c⁄° 
	gTiXmlAâribuã
& 
	grhs
 ) c⁄° {  
	g«me
 >Ñhs.name; }

868 
vútuÆ
 c⁄° * 
P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

871 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const {

872 
	`Pröt
–
cfûe
, 
dïth
, 0 );

873 
	}
}

874 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
, 
TIXML_STRING
* 
°r
 ) const;

878 
	$SëDocumít
–
TiXmlDocumít
* 
doc
 ) { 
documít
 = doc; 
	}
}

880 
	g¥iv©e
:

881 
TiXmlAâribuã
( const TiXmlAttribute& );

882 
	g›î©‹
=–c⁄° 
TiXmlAâribuã
& 
ba£
 );

884 
TiXmlDocumít
* 
	gdocumít
;

885 
TIXML_STRING
 
	g«me
;

886 
TIXML_STRING
 
	gvÆue
;

887 
TiXmlAâribuã
* 
	g¥ev
;

888 
TiXmlAâribuã
* 
	g√xt
;

904 ˛as†
	cTiXmlAâribuãSë


906 
	mpublic
:

907 
TiXmlAâribuãSë
();

908 ~
TiXmlAâribuãSë
();

910 
Add
–
TiXmlAâribuã
* 
©åibuã
 );

911 
Remove
–
TiXmlAâribuã
* 
©åibuã
 );

913 c⁄° 
TiXmlAâribuã
* 
	$Fú°
(Ëc⁄° {  ( 
£¡öñ
.
√xt
 == &sentinel ) ? 0 : sentinel.next; }

914 
TiXmlAâribuã
* 
	$Fú°
(Ë{  ( 
£¡öñ
.
√xt
 =&£¡öñ ) ? 0 : sítöñ.√xt; 
	}
}

915 c⁄° 
TiXmlAâribuã
* 
	$La°
(Ëc⁄° {  ( 
£¡öñ
.
¥ev
 =&£¡öñ ) ? 0 : sítöñ.¥ev; 
	}
}

916 
TiXmlAâribuã
* 
	$La°
(Ë{  ( 
£¡öñ
.
¥ev
 =&£¡öñ ) ? 0 : sítöñ.¥ev; 
	}
}

918 c⁄° 
TiXmlAâribuã
* 
	$Föd
–c⁄° * 
_«me
 ) const;

919 
TiXmlAâribuã
* 
	$Föd
–c⁄° * 
_«me
 ) {

920  
c⁄°_ˇ°
< 
TiXmlAâribuã
* >–(c⁄°_ˇ°< c⁄° 
TiXmlAâribuãSë
* >(
this
))->
	`Föd
–
_«me
 ) );

921 
	}
}

922 #ifde‡
TIXML_USE_STL


923 c⁄° 
TiXmlAâribuã
* 
Föd
–c⁄° 
°d
::
°rög
& 
_«me
 ) const;

924 
TiXmlAâribuã
* 
Föd
–c⁄° 
°d
::
°rög
& 
_«me
 ) {

925  
c⁄°_ˇ°
< 
TiXmlAâribuã
* >–(c⁄°_ˇ°< c⁄° 
TiXmlAâribuãSë
* >(
this
))->
Föd
–
_«me
 ) );

930 
	g¥iv©e
:

933 
TiXmlAâribuãSë
( const TiXmlAttributeSet& );

934 
	g›î©‹
=–c⁄° 
TiXmlAâribuãSë
& );

936 
TiXmlAâribuã
 
	g£¡öñ
;

944 ˛as†
	cTiXmlEÀmít
 : 
public
 
TiXmlNode


946 
public
:

948 
TiXmlEÀmít
 (c⁄° * 
ö_vÆue
);

950 #ifde‡
TIXML_USE_STL


952 
TiXmlEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
 );

955 
TiXmlEÀmít
( const TiXmlElement& );

957 
	m›î©‹
=–c⁄° 
TiXmlEÀmít
& 
ba£
 );

959 
	mvútuÆ
 ~
TiXmlEÀmít
();

964 c⁄° * 
	$Aâribuã
–c⁄° * 
«me
 ) const;

972 c⁄° * 
	$Aâribuã
–c⁄° * 
«me
, * 
i
 ) const;

980 c⁄° * 
	$Aâribuã
–c⁄° * 
«me
, * 
d
 ) const;

989 
	$QuîyI¡Aâribuã
–c⁄° * 
«me
, * 
_vÆue
 ) const;

991 
	$QuîyDoubÀAâribuã
–c⁄° * 
«me
, * 
_vÆue
 ) const;

993 
	$QuîyFlﬂtAâribuã
–c⁄° * 
«me
, * 
_vÆue
 ) const {

994 
d
;

995 
ªsu…
 = 
	`QuîyDoubÀAâribuã
–
«me
, &
d
 );

996 i‡–
ªsu…
 =
TIXML_SUCCESS
 ) {

997 *
_vÆue
 = ()
d
;

999  
ªsu…
;

1002 #ifde‡
TIXML_USE_STL


1011 
ãm∂©e
< 
ty≥«me
 
T
 > 
	`QuîyVÆueAâribuã
–c⁄° 
°d
::
°rög
& 
«me
, T* 
outVÆue
 ) const

1013 c⁄° 
TiXmlAâribuã
* 
node
 = 
©åibuãSë
.
	`Föd
–
«me
 );

1014 i‡–!
node
 )

1015  
TIXML_NO_ATTRIBUTE
;

1017 
°d
::
°rög°ªam
 
	`s°ªam
–
node
->
	`VÆueSå
() );

1018 
s°ªam
 >> *
outVÆue
;

1019 i‡–!
s°ªam
.
	`Áû
() )

1020  
TIXML_SUCCESS
;

1021  
TIXML_WRONG_TYPE
;

1022 
	}
}

1043 
SëAâribuã
–c⁄° * 
«me
, c⁄° * 
_vÆue
 );

1045 #ifde‡
TIXML_USE_STL


1046 c⁄° 
	g°d
::
°rög
* 
Aâribuã
–c⁄° 
°d
::°rög& 
«me
 ) const;

1047 c⁄° 
	g°d
::
°rög
* 
Aâribuã
–c⁄° 
°d
::°rög& 
«me
, * 
i
 ) const;

1048 c⁄° 
	g°d
::
°rög
* 
Aâribuã
–c⁄° 
°d
::°rög& 
«me
, * 
d
 ) const;

1049 
QuîyI¡Aâribuã
–c⁄° 
°d
::
°rög
& 
«me
, * 
_vÆue
 ) const;

1050 
QuîyDoubÀAâribuã
–c⁄° 
°d
::
°rög
& 
«me
, * 
_vÆue
 ) const;

1053 
SëAâribuã
–c⁄° 
°d
::
°rög
& 
«me
, c⁄° std::°rög& 
_vÆue
 );

1055 
SëAâribuã
–c⁄° 
°d
::
°rög
& 
«me
, 
_vÆue
 );

1061 
SëAâribuã
–c⁄° * 
«me
, 
vÆue
 );

1066 
SëDoubÀAâribuã
–c⁄° * 
«me
, 
vÆue
 );

1070 
RemoveAâribuã
–c⁄° * 
«me
 );

1071 #ifde‡
TIXML_USE_STL


1072 
RemoveAâribuã
–c⁄° 
°d
::
°rög
& 
«me
 ) { RemoveAâribuã («me.
c_°r
 ()); }

1075 c⁄° 
TiXmlAâribuã
* 
	$Fú°Aâribuã
(Ëc⁄° {  
©åibuãSë
.
	`Fú°
(); 
	}
}

1076 
TiXmlAâribuã
* 
	$Fú°Aâribuã
(Ë{  
©åibuãSë
.
	`Fú°
(); 
	}
}

1077 c⁄° 
TiXmlAâribuã
* 
	$La°Aâribuã
(Ëc⁄° {  
©åibuãSë
.
	`La°
(); 
	}
}

1078 
TiXmlAâribuã
* 
	$La°Aâribuã
(Ë{  
©åibuãSë
.
	`La°
(); 
	}
}

1112 c⁄° * 
	$GëText
() const;

1115 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1117 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const;

1122 
vútuÆ
 c⁄° * 
	`P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

1124 
vútuÆ
 c⁄° 
TiXmlEÀmít
* 
	$ToEÀmít
(Ëc⁄° {  
this
; 
	}
}

1125 
vútuÆ
 
TiXmlEÀmít
* 
	$ToEÀmít
(Ë{  
this
; 
	}
}

1129 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
visô‹
 ) const;

1131 
¥Ÿe˘ed
:

1133 
	$C›yTo
–
TiXmlEÀmít
* 
èrgë
 ) const;

1134 
	`CÀ¨This
();

1137 #ifde‡
TIXML_USE_STL


1138 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1144 c⁄° * 
	`RódVÆue
–c⁄° * 
ö
, 
TiXmlP¨sögD©a
* 
¥evD©a
, 
TiXmlEncodög
 
ícodög
 );

1146 
¥iv©e
:

1148 
TiXmlAâribuãSë
 
©åibuãSë
;

1149 
	}
};

1154 ˛as†
	cTiXmlCommít
 : 
public
 
TiXmlNode


1156 
public
:

1158 
	$TiXmlCommít
(Ë: 
	`TiXmlNode
–
TiXmlNode
::
COMMENT
 ) {}

1160 
	$TiXmlCommít
–c⁄° * 
_vÆue
 ) : 
	`TiXmlNode
–
TiXmlNode
::
COMMENT
 ) {

1161 
	`SëVÆue
–
_vÆue
 );

1162 
	}
}

1163 
TiXmlCommít
( const TiXmlComment& );

1164 
	g›î©‹
=–c⁄° 
TiXmlCommít
& 
ba£
 );

1166 
	gvútuÆ
 ~
	$TiXmlCommít
(Ë{
	}
}

1169 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1171 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const;

1176 
vútuÆ
 c⁄° * 
	`P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

1178 
vútuÆ
 c⁄° 
TiXmlCommít
* 
	$ToCommít
(Ëc⁄° {  
this
; 
	}
}

1179 
vútuÆ
 
TiXmlCommít
* 
	$ToCommít
(Ë{  
this
; 
	}
}

1183 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
visô‹
 ) const;

1185 
¥Ÿe˘ed
:

1186 
	$C›yTo
–
TiXmlCommít
* 
èrgë
 ) const;

1189 #ifde‡
TIXML_USE_STL


1190 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1194 
¥iv©e
:

1196 
	}
};

1204 ˛as†
	cTiXmlText
 : 
public
 
TiXmlNode


1206 
‰õnd
 
˛ass
 
TiXmlEÀmít
;

1207 
	mpublic
:

1212 
	$TiXmlText
 (c⁄° * 
öôVÆue
 ) : 
	`TiXmlNode
 (
TiXmlNode
::
TEXT
)

1214 
	`SëVÆue
–
öôVÆue
 );

1215 
cd©a
 = 
Ál£
;

1217 
vútuÆ
 ~
	$TiXmlText
(Ë{
	}
}

1219 #ifde‡
TIXML_USE_STL


1221 
TiXmlText
–c⁄° 
°d
::
°rög
& 
öôVÆue
 ) : 
TiXmlNode
 (TiXmlNode::
TEXT
)

1223 
SëVÆue
–
öôVÆue
 );

1224 
	gcd©a
 = 
Ál£
;

1228 
	$TiXmlText
–c⁄° 
TiXmlText
& 
c›y
 ) : 
	`TiXmlNode
–
TiXmlNode
::
TEXT
 ) { c›y.
	`C›yTo
–
this
 ); 
	}
}

1229 
	g›î©‹
=–c⁄° 
TiXmlText
& 
ba£
 ) { ba£.
C›yTo
–
this
 ); }

1232 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const;

1235 
boﬁ
 
	$CDATA
(Ëc⁄° {  
cd©a
; 
	}
}

1237 
	$SëCDATA
–
boﬁ
 
_cd©a
 ) { 
cd©a
 = _cd©a; 
	}
}

1239 
vútuÆ
 c⁄° * 
P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

1241 
vútuÆ
 c⁄° 
TiXmlText
* 
	$ToText
(Ëc⁄° {  
this
; 
	}
}

1242 
vútuÆ
 
TiXmlText
* 
	$ToText
(Ë{  
this
; 
	}
}

1246 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
c⁄ã¡
 ) const;

1248 
¥Ÿe˘ed
 :

1250 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1251 
	$C›yTo
–
TiXmlText
* 
èrgë
 ) const;

1253 
boﬁ
 
	$Bœnk
() const;

1255 #ifde‡
TIXML_USE_STL


1256 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1259 
¥iv©e
:

1260 
boﬁ
 
cd©a
;

1261 
	}
};

1277 ˛as†
	cTiXmlDe˛¨©i⁄
 : 
public
 
TiXmlNode


1279 
public
:

1281 
	$TiXmlDe˛¨©i⁄
(Ë: 
	`TiXmlNode
–
TiXmlNode
::
DECLARATION
 ) {}

1283 #ifde‡
TIXML_USE_STL


1285 
	`TiXmlDe˛¨©i⁄
–c⁄° 
°d
::
°rög
& 
_vîsi⁄
,

1286 c⁄° 
°d
::
°rög
& 
_ícodög
,

1287 c⁄° 
°d
::
°rög
& 
_°™dÆ⁄e
 );

1291 
	`TiXmlDe˛¨©i⁄
–c⁄° * 
_vîsi⁄
,

1292 c⁄° * 
_ícodög
,

1293 c⁄° * 
_°™dÆ⁄e
 );

1295 
	`TiXmlDe˛¨©i⁄
–c⁄° 
TiXmlDe˛¨©i⁄
& 
c›y
 );

1296 
›î©‹
=–c⁄° 
TiXmlDe˛¨©i⁄
& 
c›y
 );

1298 
vútuÆ
 ~
	$TiXmlDe˛¨©i⁄
(Ë{
	}
}

1301 c⁄° *
	$Vîsi⁄
(Ëc⁄° {  
vîsi⁄
.
	`c_°r
 (); 
	}
}

1303 c⁄° *
	$Encodög
(Ëc⁄° {  
ícodög
.
	`c_°r
 (); 
	}
}

1305 c⁄° *
	$SèndÆ⁄e
(Ëc⁄° {  
°™dÆ⁄e
.
	`c_°r
 (); 
	}
}

1308 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1310 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
, 
TIXML_STRING
* 
°r
 ) const;

1311 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const {

1312 
	`Pröt
–
cfûe
, 
dïth
, 0 );

1313 
	}
}

1315 
vútuÆ
 c⁄° * 
P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

1317 
vútuÆ
 c⁄° 
TiXmlDe˛¨©i⁄
* 
	$ToDe˛¨©i⁄
(Ëc⁄° {  
this
; 
	}
}

1318 
vútuÆ
 
TiXmlDe˛¨©i⁄
* 
	$ToDe˛¨©i⁄
(Ë{  
this
; 
	}
}

1322 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
visô‹
 ) const;

1324 
¥Ÿe˘ed
:

1325 
	$C›yTo
–
TiXmlDe˛¨©i⁄
* 
èrgë
 ) const;

1327 #ifde‡
TIXML_USE_STL


1328 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1331 
¥iv©e
:

1333 
TIXML_STRING
 
vîsi⁄
;

1334 
TIXML_STRING
 
ícodög
;

1335 
TIXML_STRING
 
°™dÆ⁄e
;

1336 
	}
};

1346 ˛as†
	cTiXmlUnknown
 : 
public
 
TiXmlNode


1348 
public
:

1349 
	$TiXmlUnknown
(Ë: 
	`TiXmlNode
–
TiXmlNode
::
UNKNOWN
 ) {}

1350 
vútuÆ
 ~
	$TiXmlUnknown
(Ë{
	}
}

1352 
	$TiXmlUnknown
–c⁄° 
TiXmlUnknown
& 
c›y
 ) : 
	`TiXmlNode
–
TiXmlNode
::
UNKNOWN
 ) { c›y.
	`C›yTo
–
this
 ); 
	}
}

1353 
	g›î©‹
=–c⁄° 
TiXmlUnknown
& 
c›y
 ) { c›y.
C›yTo
–
this
 ); }

1356 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1358 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 ) const;

1360 
vútuÆ
 c⁄° * 
	`P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
, 
TiXmlEncodög
 
ícodög
 );

1362 
vútuÆ
 c⁄° 
TiXmlUnknown
* 
	$ToUnknown
(Ëc⁄° {  
this
; 
	}
}

1363 
vútuÆ
 
TiXmlUnknown
* 
	$ToUnknown
(Ë{  
this
; 
	}
}

1367 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
c⁄ã¡
 ) const;

1369 
¥Ÿe˘ed
:

1370 
	$C›yTo
–
TiXmlUnknown
* 
èrgë
 ) const;

1372 #ifde‡
TIXML_USE_STL


1373 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1376 
¥iv©e
:

1378 
	}
};

1385 ˛as†
	cTiXmlDocumít
 : 
public
 
TiXmlNode


1387 
public
:

1389 
TiXmlDocumít
();

1391 
TiXmlDocumít
–c⁄° * 
documítName
 );

1393 #ifde‡
TIXML_USE_STL


1395 
TiXmlDocumít
–c⁄° 
°d
::
°rög
& 
documítName
 );

1398 
TiXmlDocumít
–c⁄° TiXmlDocumít& 
c›y
 );

1399 
	m›î©‹
=–c⁄° 
TiXmlDocumít
& 
c›y
 );

1401 
	mvútuÆ
 ~
	$TiXmlDocumít
() {}

1407 
boﬁ
 
	`LﬂdFûe
–
TiXmlEncodög
 
ícodög
 = 
TIXML_DEFAULT_ENCODING
 );

1409 
boﬁ
 
	$SaveFûe
() const;

1411 
boﬁ
 
	`LﬂdFûe
–c⁄° * 
fûíame
, 
TiXmlEncodög
 
ícodög
 = 
TIXML_DEFAULT_ENCODING
 );

1413 
boﬁ
 
	$SaveFûe
–c⁄° * 
fûíame
 ) const;

1419 
boﬁ
 
	`LﬂdFûe
–
FILE
*, 
TiXmlEncodög
 
ícodög
 = 
TIXML_DEFAULT_ENCODING
 );

1421 
boﬁ
 
	$SaveFûe
–
FILE
* ) const;

1423 #ifde‡
TIXML_USE_STL


1424 
boﬁ
 
	`LﬂdFûe
–c⁄° 
°d
::
°rög
& 
fûíame
, 
TiXmlEncodög
 
ícodög
 = 
TIXML_DEFAULT_ENCODING
 )

1428  
	`LﬂdFûe
–
fûíame
.
	`c_°r
(), 
ícodög
 );

1429 
	}
}

1430 
boﬁ
 
SaveFûe
–c⁄° 
°d
::
°rög
& 
fûíame
 ) const

1434  
SaveFûe
–
fûíame
.
c_°r
() );

1442 
vútuÆ
 c⁄° * 
P¨£
–c⁄° * 
p
, 
TiXmlP¨sögD©a
* 
d©a
 = 0, 
TiXmlEncodög
 
ícodög
 = 
TIXML_DEFAULT_ENCODING
 );

1448 c⁄° 
TiXmlEÀmít
* 
	$RoŸEÀmít
(Ëc⁄° {  
	`Fú°ChûdEÀmít
(); 
	}
}

1449 
TiXmlEÀmít
* 
	$RoŸEÀmít
(Ë{  
	`Fú°ChûdEÀmít
(); 
	}
}

1456 
boﬁ
 
	$Eº‹
(Ëc⁄° {  
îr‹
; 
	}
}

1459 c⁄° * 
	$Eº‹Desc
(Ëc⁄° {  
îr‹Desc
.
	`c_°r
 (); 
	}
}

1464 
	$Eº‹Id
(Ëc⁄° {  
îr‹Id
; 
	}
}

1473 
	$Eº‹Row
(Ëc⁄° {  
îr‹Loˇti⁄
.
row
+1; 
	}
}

1474 
	$Eº‹Cﬁ
(Ëc⁄° {  
îr‹Loˇti⁄
.
cﬁ
+1; 
	}
}

1500 
	$SëTabSize
–
_èbsize
 ) { 
èbsize
 = _èbsize; 
	}
}

1502 
	$TabSize
(Ëc⁄° {  
èbsize
; 
	}
}

1507 
	$CÀ¨Eº‹
(Ë{ 
îr‹
 = 
Ál£
;

1508 
îr‹Id
 = 0;

1509 
îr‹Desc
 = "";

1510 
îr‹Loˇti⁄
.
row
 =Éº‹Loˇti⁄.
cﬁ
 = 0;

1512 
	}
}

1515 
	$Pröt
(Ëc⁄° { 
	`Pröt
–
°dout
, 0 ); 
	}
}

1524 
vútuÆ
 
	$Pröt
–
FILE
* 
cfûe
, 
dïth
 = 0 ) const;

1526 
	`SëEº‹
–
îr
, c⁄° * 
îr‹Loˇti⁄
, 
TiXmlP¨sögD©a
* 
¥evD©a
, 
TiXmlEncodög
 
ícodög
 );

1528 
vútuÆ
 c⁄° 
TiXmlDocumít
* 
	$ToDocumít
(Ëc⁄° {  
this
; 
	}
}

1529 
vútuÆ
 
TiXmlDocumít
* 
	$ToDocumít
(Ë{  
this
; 
	}
}

1533 
vútuÆ
 
boﬁ
 
	$Ac˚±
–
TiXmlVisô‹
* 
c⁄ã¡
 ) const;

1535 
¥Ÿe˘ed
 :

1537 
vútuÆ
 
TiXmlNode
* 
	$Cl⁄e
() const;

1538 #ifde‡
TIXML_USE_STL


1539 
vútuÆ
 
	`SåómIn
–
°d
::
i°ªam
 * 
ö
, 
TIXML_STRING
 * 
èg
 );

1542 
¥iv©e
:

1543 
	$C›yTo
–
TiXmlDocumít
* 
èrgë
 ) const;

1545 
boﬁ
 
îr‹
;

1546 
îr‹Id
;

1547 
TIXML_STRING
 
îr‹Desc
;

1548 
èbsize
;

1549 
TiXmlCurs‹
 
îr‹Loˇti⁄
;

1550 
boﬁ
 
u£Mi¸oso·BOM
;

1551 
	}
};

1634 ˛as†
	cTiXmlH™dÀ


1636 
	mpublic
:

1638 
	$TiXmlH™dÀ
–
TiXmlNode
* 
_node
 ) { 
this
->
node
 = _node; }

1640 
	$TiXmlH™dÀ
–c⁄° 
TiXmlH™dÀ
& 
ªf
 ) { 
this
->
node
 =Ñef.node; 
	}
}

1641 
TiXmlH™dÀ
 
	g›î©‹
=–c⁄° TiXmlH™dÀ& 
ªf
 ) { 
this
->
node
 =Ñef.node;  *
	gthis
; }

1644 
TiXmlH™dÀ
 
	$Fú°Chûd
() const;

1646 
TiXmlH™dÀ
 
	$Fú°Chûd
–c⁄° * 
vÆue
 ) const;

1648 
TiXmlH™dÀ
 
	$Fú°ChûdEÀmít
() const;

1650 
TiXmlH™dÀ
 
	$Fú°ChûdEÀmít
–c⁄° * 
vÆue
 ) const;

1655 
TiXmlH™dÀ
 
	$Chûd
–c⁄° * 
vÆue
, 
ödex
 ) const;

1659 
TiXmlH™dÀ
 
	$Chûd
–
ödex
 ) const;

1664 
TiXmlH™dÀ
 
	$ChûdEÀmít
–c⁄° * 
vÆue
, 
ödex
 ) const;

1669 
TiXmlH™dÀ
 
	$ChûdEÀmít
–
ödex
 ) const;

1671 #ifde‡
TIXML_USE_STL


1672 
TiXmlH™dÀ
 
	`Fú°Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  Fú°Chûd–_vÆue.
	`c_°r
(Ë); 
	}
}

1673 
TiXmlH™dÀ
 
Fú°ChûdEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
 ) c⁄° {  Fú°ChûdEÀmít–_vÆue.
c_°r
() ); }

1675 
TiXmlH™dÀ
 
Chûd
–c⁄° 
°d
::
°rög
& 
_vÆue
, 
ödex
 ) c⁄° {  Chûd–_vÆue.
c_°r
(), index ); }

1676 
TiXmlH™dÀ
 
ChûdEÀmít
–c⁄° 
°d
::
°rög
& 
_vÆue
, 
ödex
 ) c⁄° {  ChûdEÀmít–_vÆue.
c_°r
(), index ); }

1681 
TiXmlNode
* 
	$ToNode
(Ëc⁄° {  
node
; 
	}
}

1684 
TiXmlEÀmít
* 
	$ToEÀmít
(Ëc⁄° {  ( ( 
node
 &&Çode->
	`ToEÀmít
(ËË?Çode->ToEÀmít(Ë: 0 ); 
	}
}

1687 
TiXmlText
* 
	$ToText
(Ëc⁄° {  ( ( 
node
 &&Çode->
	`ToText
(ËË?Çode->ToText(Ë: 0 ); 
	}
}

1690 
TiXmlUnknown
* 
	$ToUnknown
(Ëc⁄° {  ( ( 
node
 &&Çode->
	`ToUnknown
(ËË?Çode->ToUnknown(Ë: 0 ); 
	}
}

1695 
TiXmlNode
* 
	$Node
(Ëc⁄° {  
	`ToNode
(); 
	}
}

1699 
TiXmlEÀmít
* 
	$EÀmít
(Ëc⁄° {  
	`ToEÀmít
(); 
	}
}

1703 
TiXmlText
* 
	$Text
(Ëc⁄° {  
	`ToText
(); 
	}
}

1707 
TiXmlUnknown
* 
	$Unknown
(Ëc⁄° {  
	`ToUnknown
(); 
	}
}

1709 
	g¥iv©e
:

1710 
TiXmlNode
* 
node
;

1733 ˛as†
	cTiXmlPröãr
 : 
public
 
TiXmlVisô‹


1735 
public
:

1736 
	$TiXmlPröãr
(Ë: 
	`dïth
–0 ), 
	`sim∂eTextPröt
–
Ál£
 ),

1737 
	`buf„r
(), 
	`ödít
–" " ), 
	`löeBªak
( "\n" ) {}

1739 
vútuÆ
 
boﬁ
 
	`VisôE¡î
–c⁄° 
TiXmlDocumít
& 
doc
 );

1740 
vútuÆ
 
boﬁ
 
	`VisôExô
–c⁄° 
TiXmlDocumít
& 
doc
 );

1742 
vútuÆ
 
boﬁ
 
	`VisôE¡î
–c⁄° 
TiXmlEÀmít
& 
ñemít
, c⁄° 
TiXmlAâribuã
* 
fú°Aâribuã
 );

1743 
vútuÆ
 
boﬁ
 
	`VisôExô
–c⁄° 
TiXmlEÀmít
& 
ñemít
 );

1745 
vútuÆ
 
boﬁ
 
	`Visô
–c⁄° 
TiXmlDe˛¨©i⁄
& 
de˛¨©i⁄
 );

1746 
vútuÆ
 
boﬁ
 
	`Visô
–c⁄° 
TiXmlText
& 
ãxt
 );

1747 
vútuÆ
 
boﬁ
 
	`Visô
–c⁄° 
TiXmlCommít
& 
commít
 );

1748 
vútuÆ
 
boﬁ
 
	`Visô
–c⁄° 
TiXmlUnknown
& 
unknown
 );

1753 
	$SëIndít
–c⁄° * 
_ödít
 ) { 
ödít
 = _ödíà? _ödíà: "" ; 
	}
}

1755 c⁄° * 
	$Indít
(Ë{  
ödít
.
	`c_°r
(); 
	}
}

1760 
	$SëLöeBªak
–c⁄° * 
_löeBªak
 ) { 
löeBªak
 = _löeBªak ? _löeBªak : ""; 
	}
}

1762 c⁄° * 
	$LöeBªak
(Ë{  
löeBªak
.
	`c_°r
(); 
	}
}

1767 
	$SëSåómPrötög
(Ë{ 
ödít
 = "";

1768 
löeBªak
 = "";

1769 
	}
}

1771 c⁄° * 
	$CSå
(Ë{  
buf„r
.
	`c_°r
(); 
	}
}

1773 
size_t
 
	$Size
(Ë{  
buf„r
.
	`size
(); 
	}
}

1775 #ifde‡
TIXML_USE_STL


1777 c⁄° 
	g°d
::
°rög
& 
	$Så
(Ë{  
buf„r
; 
	}
}

1780 
	g¥iv©e
:

1781 
	$DoIndít
() {

1782  
i
=0; i<
dïth
; ++i )

1783 
buf„r
 +
ödít
;

1784 
	}
}

1785 
	$DoLöeBªak
() {

1786 
buf„r
 +
löeBªak
;

1787 
	}
}

1789 
	gdïth
;

1790 
boﬁ
 
	gsim∂eTextPröt
;

1791 
TIXML_STRING
 
	gbuf„r
;

1792 
TIXML_STRING
 
	gödít
;

1793 
TIXML_STRING
 
	glöeBªak
;

1797 #ifde‡
_MSC_VER


1798 #¥agm®
w¨nög
–
p›
 )

	@
1
.
0
57
544
buddy.c
buddy.h
checkAndSetConfig.cc
config.c
config.h
crc32.c
crc32.h
debug.c
debug.h
gMystar.cc
gMystar.h
gmyqq.cc
gmyqq.h
group.c
group.h
list.c
list.h
loop.c
loop.h
main.cc
md5.c
md5.h
memory.c
memory.h
myqq.cc
myqq.h
packetmgr.c
packetmgr.h
prot_buddy.c
prot_group.c
prot_im.c
prot_login.c
prot_misc.c
prot_qun.c
prot_user.c
protocol.c
protocol.h
qqclient.c
qqclient.h
qqcrypt.c
qqcrypt.h
qqdef.h
qqpacket.c
qqpacket.h
qqsocket.c
qqsocket.h
qun.c
qun.h
utf8.c
utf8.h
util.c
util.h
vit.c
webqq.c
webqq.h
tinyxml/tinystr.h
tinyxml/tinyxml.h
